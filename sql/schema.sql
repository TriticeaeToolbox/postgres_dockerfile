--
-- PostgreSQL database dump
--

-- Dumped from database version 11.2 (Debian 11.2-1.pgdg90+1)
-- Dumped by pg_dump version 11.2 (Debian 11.2-1.pgdg90+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

CREATE DATABASE breedbase ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';

ALTER DATABASE breedbase OWNER TO postgres;

\connect breedbase

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;


--
-- Name: annotation; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA annotation;


ALTER SCHEMA annotation OWNER TO postgres;

--
-- Name: biosource; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA biosource;


ALTER SCHEMA biosource OWNER TO postgres;

--
-- Name: SCHEMA biosource; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA biosource IS 'Biosource schema are composed by tables that store data about biological source of the data or other schemas as transcript or expression. It is a combination of the biological origin (samples) and how it was processed (protocol). See specific table comment for more information. The table prefix used is "bs_"';


--
-- Name: gem; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA gem;


ALTER SCHEMA gem OWNER TO postgres;

--
-- Name: genomic; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA genomic;


ALTER SCHEMA genomic OWNER TO postgres;

--
-- Name: insitu; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA insitu;


ALTER SCHEMA insitu OWNER TO postgres;

--
-- Name: metadata; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA metadata;


ALTER SCHEMA metadata OWNER TO postgres;

--
-- Name: SCHEMA metadata; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA metadata IS 'metadata schema is composed of tables that store data about the CXGN system (from file locations to the user that loaded some data). See specific table comment for more information. The table prefix used is "md_"';


--
-- Name: pheno_population; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA pheno_population;


ALTER SCHEMA pheno_population OWNER TO postgres;

--
-- Name: phenome; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA phenome;


ALTER SCHEMA phenome OWNER TO postgres;

--
-- Name: physical; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA physical;


ALTER SCHEMA physical OWNER TO postgres;

--
-- Name: sgn; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn;


ALTER SCHEMA sgn OWNER TO postgres;

--
-- Name: sgn_people; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn_people;


ALTER SCHEMA sgn_people OWNER TO postgres;

--
-- Name: sgn_submit; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn_submit;


ALTER SCHEMA sgn_submit OWNER TO postgres;

--
-- Name: tomato_gff; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA tomato_gff;


ALTER SCHEMA tomato_gff OWNER TO postgres;

--
-- Name: utils; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA utils;


ALTER SCHEMA utils OWNER TO postgres;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA sgn;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA sgn;


--
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


--
-- Name: abstract_tsvector(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.abstract_tsvector() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
NEW.abstract_tsvector := to_tsvector(NEW.abstract);
RETURN NEW;
END
$$;


ALTER FUNCTION public.abstract_tsvector() OWNER TO postgres;

--
-- Name: create_point(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_point(integer, integer) RETURNS point
    LANGUAGE sql
    AS $_$SELECT point ($1, $2)$_$;


ALTER FUNCTION public.create_point(integer, integer) OWNER TO postgres;

--
-- Name: boxquery(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.boxquery(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $2))$_$;


ALTER FUNCTION public.boxquery(integer, integer) OWNER TO postgres;

--
-- Name: boxrange(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.boxrange(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (public.create_point(0, $1), public.create_point($2, 500000000))$_$;


ALTER FUNCTION public.boxrange(integer, integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature (
    feature_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    residues text,
    seqlen integer,
    md5checksum character(32),
    type_id integer NOT NULL,
    is_analysis boolean DEFAULT false NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    timelastmodified timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE public.feature OWNER TO postgres;

--
-- Name: TABLE feature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature IS 'A feature is a biological sequence or a
section of a biological sequence, or a collection of such
sections. Examples include genes, exons, transcripts, regulatory
regions, polypeptides, protein domains, chromosome sequences, sequence
variations, cross-genome match regions such as hits and HSPs and so
on; see the Sequence Ontology for more';


--
-- Name: COLUMN feature.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.dbxref_id IS 'An optional primary public stable
identifier for this feature. Secondary identifiers and external
dbxrefs go in table:feature_dbxref';


--
-- Name: COLUMN feature.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.organism_id IS 'The organism to which this feature
belongs. This column is mandatory';


--
-- Name: COLUMN feature.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.name IS 'The optional human-readable common name for
a feature, for display purposes';


--
-- Name: COLUMN feature.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.uniquename IS 'The unique name for a feature; may
not be necessarily be particularly human-readable, although this is
prefered. This name must be unique for this type of feature within
this organism';


--
-- Name: COLUMN feature.residues; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.residues IS 'A sequence of alphabetic characters
representing biological residues (nucleic acids, amino acids). This
column does not need to be manifested for all features; it is optional
for features such as exons where the residues can be derived from the
featureloc. It is recommended that the value for this column be
manifested for features which may may non-contiguous sublocations (eg
transcripts), since derivation at query time is non-trivial. For
expressed sequence, the DNA sequence should be used rather than the
RNA sequence';


--
-- Name: COLUMN feature.seqlen; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.seqlen IS 'The length of the residue feature. See
column:residues. This column is partially redundant with the residues
column, and also with featureloc. This column is required because the
location may be unknown and the residue sequence may not be
manifested, yet it may be desirable to store and query the length of
the feature. The seqlen should always be manifested where the length
of the sequence is known';


--
-- Name: COLUMN feature.md5checksum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.md5checksum IS 'The 32-character checksum of the sequence,
calculated using the MD5 algorithm. This is practically guaranteed to
be unique for any feature. This column thus acts as a unique
identifier on the mathematical sequence';


--
-- Name: COLUMN feature.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.type_id IS 'A required reference to a table:cvterm
giving the feature type. This will typically be a Sequence Ontology
identifier. This column is thus used to subclass the feature table';


--
-- Name: COLUMN feature.is_analysis; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.is_analysis IS 'Boolean indicating whether this
feature is annotated or the result of an automated analysis. Analysis
results also use the companalysis module. Note that the dividing line
between analysis/annotation may be fuzzy, this should be determined on
a per-project basis in a consistent manner. One requirement is that
there should only be one non-analysis version of each wild-type gene
feature in a genome, whereas the same gene feature can be predicted
multiple times in different analyses';


--
-- Name: COLUMN feature.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.is_obsolete IS 'Boolean indicating whether this
feature has been obsoleted. Some chado instances may choose to simply
remove the feature altogether, others may choose to keep an obsolete
row in the table';


--
-- Name: COLUMN feature.timeaccessioned; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.timeaccessioned IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


--
-- Name: COLUMN feature.timelastmodified; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature.timelastmodified IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


--
-- Name: feature_disjoint_from(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.feature_disjoint_from(integer) RETURNS SETOF public.feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id=$1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax < y.fmin OR x.fmin > y.fmax ) $_$;


ALTER FUNCTION public.feature_disjoint_from(integer) OWNER TO postgres;

--
-- Name: feature_overlaps(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.feature_overlaps(integer) RETURNS SETOF public.feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id=$1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax >= y.fmin AND x.fmin <= y.fmax ) $_$;


ALTER FUNCTION public.feature_overlaps(integer) OWNER TO postgres;

--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.featureloc (
    featureloc_id integer NOT NULL,
    feature_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    is_fmin_partial boolean DEFAULT false NOT NULL,
    fmax integer,
    is_fmax_partial boolean DEFAULT false NOT NULL,
    strand smallint,
    phase integer,
    residue_info text,
    locgroup integer DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    CONSTRAINT featureloc_c2 CHECK ((fmin <= fmax))
);


ALTER TABLE public.featureloc OWNER TO postgres;

--
-- Name: TABLE featureloc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.featureloc IS 'The location of a feature relative to
another feature.  IMPORTANT: INTERBASE COORDINATES ARE USED.(This is
vital as it allows us to represent zero-length features eg splice
sites, insertion points without an awkward fuzzy system). Features
typically have exactly ONE location, but this need not be the
case. Some features may not be localized (eg a gene that has been
characterized genetically but no sequence/molecular info is
available). NOTE ON MULTIPLE LOCATIONS: Each feature can have 0 or
more locations. Multiple locations do NOT indicate non-contiguous
locations (if a feature such as a transcript has a non-contiguous
location, then the subfeatures such as exons should always be
manifested). Instead, multiple featurelocs for a feature designate
alternate locations or grouped locations; for instance, a feature
designating a blast hit or hsp will have two locations, one on the
query feature, one on the subject feature.  features representing
sequence variation could have alternate locations instantiated on a
feature on the mutant strain.  the column:rank is used to
differentiate these different locations. Reflexive locations should
never be stored - this is for -proper- (ie non-self) locations only;
i.e. nothing should be located relative to itself';


--
-- Name: COLUMN featureloc.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.feature_id IS 'The feature that is being located. Any feature can have zero or more featurelocs';


--
-- Name: COLUMN featureloc.srcfeature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.srcfeature_id IS 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph';


--
-- Name: COLUMN featureloc.fmin; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.fmin IS 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, bioperl), add 1 to fmin';


--
-- Name: COLUMN featureloc.is_fmin_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.is_fmin_partial IS 'This is typically
false, but may be true if the value for column:fmin is inaccurate or
the leftmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.fmax; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.fmax IS 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (eg GFF, bioperl)';


--
-- Name: COLUMN featureloc.is_fmax_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.is_fmax_partial IS 'This is typically
false, but may be true if the value for column:fmax is inaccurate or
the rightmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.strand; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.strand IS 'The orientation/directionality of the
location. Should be 0,-1 or +1';


--
-- Name: COLUMN featureloc.phase; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.phase IS 'phase of translation wrt srcfeature_id.
Values are 0,1,2. It may not be possible to manifest this column for
some features such as exons, because the phase is dependant on the
spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs';


--
-- Name: COLUMN featureloc.residue_info; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.residue_info IS 'Alternative residues,
when these differ from feature.residues. for instance, a SNP feature
located on a wild and mutant protein would have different alresidues.
for alignment/similarity features, the altresidues is used to
represent the alignment string (CIGAR format). Note on variation
features; even if we dont want to instantiate a mutant
chromosome/contig feature, we can still represent a SNP etc with 2
locations, one (rank 0) on the genome, the other (rank 1) would have
most fields null, except for altresidues';


--
-- Name: COLUMN featureloc.locgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.locgroup IS 'This is used to manifest redundant,
derivable extra locations for a feature. The default locgroup=0 is
used for the DIRECT location of a feature. !! MOST CHADO USERS MAY
NEVER USE featurelocs WITH logroup>0 !! Transitively derived locations
are indicated with locgroup>0. For example, the position of an exon on
a BAC and in global chromosome coordinates. This column is used to
differentiate these groupings of locations. the default locgroup 0
is used for the main/primary location, from which the others can be
derived via coordinate transformations. another example of redundant
locations is storing ORF coordinates relative to both transcript and
genome. redundant locations open the possibility of the database
getting into inconsistent states; this schema gives us the flexibility
of both warehouse instantiations with redundant locations (easier for
querying) and management instantiations with no redundant
locations. An example of using both locgroup and rank: imagine a
feature indicating a conserved region between the chromosomes of two
different species. we may want to keep redundant locations on both
contigs and chromosomes. we would thus have 4 locations for the single
conserved region feature - two distinct locgroups (contig level and
chromosome level) and two distinct ranks (for the two species)';


--
-- Name: COLUMN featureloc.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureloc.rank IS 'Used when a feature has >1
location, otherwise the default rank 0 is used. Some features (eg
blast hits and HSPs) have two locations - one on the query and one on
the subject. Rank is used to differentiate these. Rank=0 is always
used for the query, Rank=1 for the subject. For multiple alignments,
assignment of rank is arbitrary. Rank is also used for
sequence_variant features, such as SNPs. Rank=0 indicates the wildtype
(or baseline) feature, Rank=1 indicates the mutant (or compared) feature';


--
-- Name: featureloc_slice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.featureloc_slice(integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.featureloc_slice(integer, integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcfeature_id = $1 $_$;


ALTER FUNCTION public.featureloc_slice(integer, integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.featureloc_slice(character varying, integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT featureloc.* 
   FROM featureloc 
   INNER JOIN feature AS srcf ON (srcf.feature_id = featureloc.srcfeature_id)
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcf.name = $1 $_$;


ALTER FUNCTION public.featureloc_slice(character varying, integer, integer) OWNER TO postgres;

--
-- Name: featureslice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.featureslice(integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureslice(integer, integer) OWNER TO postgres;

--
-- Name: gffattstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gffattstring(integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$DECLARE
  return_string      varchar;
  f_id               ALIAS FOR $1;
  atts_view          gffatts%ROWTYPE;
  feature_row        feature%ROWTYPE;
  name               varchar;
  uniquename         varchar;
  parent             varchar;
  escape_loc         int; 
BEGIN
  --Get name from feature.name
  --Get ID from feature.uniquename
                                                                                
  SELECT INTO feature_row * FROM feature WHERE feature_id = f_id;
  name  = feature_row.name;
  return_string = 'ID=' || feature_row.uniquename;
  IF name IS NOT NULL AND name != ''
  THEN
    return_string = return_string ||';' || 'Name=' || name;
  END IF;
                                                                                
  --Get Parent from feature_relationship
  SELECT INTO feature_row * FROM feature f, feature_relationship fr
    WHERE fr.subject_id = f_id AND fr.object_id = f.feature_id;
  IF FOUND
  THEN
    return_string = return_string||';'||'Parent='||feature_row.uniquename;
  END IF;
                                                                                
  FOR atts_view IN SELECT * FROM gff3atts WHERE feature_id = f_id  LOOP
    escape_loc = position(';' in atts_view.attribute);
    IF escape_loc > 0 THEN
      atts_view.attribute = replace(atts_view.attribute, ';', '%3B');
    END IF;
    return_string = return_string || ';'
                     || atts_view.type || '='
                     || atts_view.attribute;
  END LOOP;
                                                                                
  RETURN return_string;
END;
$_$;


ALTER FUNCTION public.gffattstring(integer) OWNER TO postgres;

--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvterm (
    cvterm_id integer NOT NULL,
    cv_id integer NOT NULL,
    name character varying(1024) NOT NULL,
    definition text,
    dbxref_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    is_relationshiptype integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm OWNER TO postgres;

--
-- Name: TABLE cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvterm IS 'A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships';


--
-- Name: COLUMN cvterm.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.cv_id IS 'The cv/ontology/namespace to which
this cvterm belongs';


--
-- Name: COLUMN cvterm.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.name IS 'A concise human-readable name or
label for the cvterm. uniquely identifies a cvterm within a cv';


--
-- Name: COLUMN cvterm.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.definition IS 'A human-readable text
definition';


--
-- Name: COLUMN cvterm.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.dbxref_id IS 'Primary identifier dbxref - The
unique global OBO identifier for this cvterm.  Note that a cvterm may
have multiple secondary dbxrefs - see also table: cvterm_dbxref';


--
-- Name: COLUMN cvterm.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.is_obsolete IS 'Boolean 0=false,1=true; see
GO documentation for details of obsoletion.  note that two terms with
different primary dbxrefs may exist if one is obsolete';


--
-- Name: COLUMN cvterm.is_relationshiptype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm.is_relationshiptype IS 'Boolean
0=false,1=true relations or relationship types (also known as Typedefs
in OBO format, or as properties or slots) form a cv/ontology in
themselves. We use this flag to indicate whether this cvterm is an
actual term/class/universal or a relation. Relations may be drawn from
the OBO Relations ontology, but are not exclusively drawn from there';


--
-- Name: db; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.db (
    db_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    urlprefix character varying(255),
    url character varying(255)
);


ALTER TABLE public.db OWNER TO postgres;

--
-- Name: TABLE db; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.db IS 'A database authority. Typical dbs in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this sortened form, which is unique within the
bioinformatics and biomedical realm.  **TODO** - add support for URIs,
URNs (eg LSIDs). We can do this by treating the url as a uri -
however, some applications may expect this to be resolvable - to be
decided';


--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dbxref (
    dbxref_id integer NOT NULL,
    db_id integer NOT NULL,
    accession character varying(255) NOT NULL,
    version character varying(255) DEFAULT ''::character varying NOT NULL,
    description text
);


ALTER TABLE public.dbxref OWNER TO postgres;

--
-- Name: TABLE dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.dbxref IS 'A unique, global, public, stable identifier. Not necessarily an eXternal reference - can reference data items inside the particular chado instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>. ';


--
-- Name: COLUMN dbxref.accession; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.dbxref.accession IS 'The local part of the identifier. Guaranteed by the db authority to be unique for that db';


--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_cvterm (
    feature_cvterm_id integer NOT NULL,
    feature_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvterm OWNER TO postgres;

--
-- Name: TABLE feature_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_cvterm IS 'Associate a term from a cv with a feature, for example, GO annotation';


--
-- Name: COLUMN feature_cvterm.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_cvterm.pub_id IS 'Provenance for the annotation. Each annotation should have a single primary publication (which may be of the appropriate type for computational analyses) where more details can be found. Additional provenance dbxrefs can be attached using feature_cvterm_dbxref';


--
-- Name: COLUMN feature_cvterm.is_not; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_cvterm.is_not IS 'if this is set to true, then this annotation is interpreted as a NEGATIVE annotation - ie the feature does NOT have the specified function, process, component, part, etc. See GO docs for more details';


--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_dbxref (
    feature_dbxref_id integer NOT NULL,
    feature_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.feature_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_dbxref IS 'links a feature to dbxrefs. This is for secondary identifiers; primary identifiers should use feature.dbxref_id';


--
-- Name: COLUMN feature_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_dbxref.is_current IS 'the is_current boolean indicates whether the linked dbxref is the  current -official- dbxref for the linked feature';


--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_pub (
    feature_pub_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_pub OWNER TO postgres;

--
-- Name: TABLE feature_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_pub IS 'Provenance. Linking table between features and publications that mention them';


--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_synonym (
    feature_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.feature_synonym OWNER TO postgres;

--
-- Name: TABLE feature_synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_synonym IS 'Linking table between feature and synonym';


--
-- Name: COLUMN feature_synonym.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_synonym.pub_id IS 'the pub_id link is for relating the usage of a given synonym to the publication in which it was used';


--
-- Name: COLUMN feature_synonym.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_synonym.is_current IS 'the is_current boolean indicates whether the linked synonym is the  current -official- symbol for the linked feature';


--
-- Name: COLUMN feature_synonym.is_internal; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_synonym.is_internal IS 'typically a synonym exists so that somebody querying the db with an obsolete name can find the object theyre looking for (under its current name.  If the synonym has been used publicly & deliberately (eg in a paper), it my also be listed in reports as a synonym.   If the synonym was not used deliberately (eg, there was a typo which went public), then the is_internal boolean may be set to -true- so that it is known that the 
synonym is -internal- and should be queryable but should not be listed in reports as a valid synonym';


--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.featureprop (
    featureprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.featureprop OWNER TO postgres;

--
-- Name: TABLE featureprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.featureprop IS 'A feature can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible';


--
-- Name: COLUMN featureprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Certain property types will only apply to certain feature
types (e.g. the anticodon property will only apply to tRNA features) ;
the types here come from the sequence feature property ontology';


--
-- Name: COLUMN featureprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation. This is less efficient than using native database types, but is easier to query.';


--
-- Name: COLUMN featureprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.featureprop.rank IS 'Property-Value ordering. Any
feature can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pub (
    pub_id integer NOT NULL,
    title text,
    volumetitle text,
    volume character varying(255),
    series_name character varying(255),
    issue character varying(255),
    pyear character varying(255),
    pages character varying(255),
    miniref character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false,
    publisher character varying(255),
    pubplace character varying(255),
    title_tsvector tsvector
);


ALTER TABLE public.pub OWNER TO postgres;

--
-- Name: TABLE pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.pub IS 'A documented provenance artefact - publications,
documents, personal communication';


--
-- Name: COLUMN pub.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pub.title IS 'descriptive general heading';


--
-- Name: COLUMN pub.volumetitle; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pub.volumetitle IS 'title of part if one of a series';


--
-- Name: COLUMN pub.series_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pub.series_name IS 'full name of (journal) series';


--
-- Name: COLUMN pub.pages; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pub.pages IS 'page number range[s], eg, 457--459, viii + 664pp, lv--lvii';


--
-- Name: COLUMN pub.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pub.type_id IS 'the type of the publication (book, journal, poem, graffiti, etc). Uses pub cv';


--
-- Name: synonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.synonym (
    synonym_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    synonym_sgml character varying(255) NOT NULL
);


ALTER TABLE public.synonym OWNER TO postgres;

--
-- Name: TABLE synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.synonym IS 'A synonym for a feature. One feature can have multiple synonyms, and the same synonym can apply to multiple features';


--
-- Name: COLUMN synonym.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.synonym.name IS 'The synonym itself. Should be human-readable machine-searchable ascii text';


--
-- Name: COLUMN synonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.synonym.type_id IS 'types would be symbol and fullname for now';


--
-- Name: COLUMN synonym.synonym_sgml; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.synonym.synonym_sgml IS 'The fully specified synonym, with any non-ascii characters encoded in SGML';


--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.gffatts AS
 SELECT fs.feature_id,
    'cvterm'::text AS type,
    s.name AS attribute
   FROM public.cvterm s,
    public.feature_cvterm fs
  WHERE (fs.cvterm_id = s.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM public.dbxref s,
    public.feature_dbxref fs,
    public.db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))
UNION ALL
 SELECT fs.feature_id,
    'synonym'::text AS type,
    s.name AS attribute
   FROM public.synonym s,
    public.feature_synonym fs
  WHERE (fs.synonym_id = s.synonym_id)
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM public.featureprop fp,
    public.cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM public.pub s,
    public.feature_pub fs
  WHERE (fs.pub_id = s.pub_id);


ALTER TABLE public.gffatts OWNER TO postgres;

--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gfffeatureatts(integer) RETURNS SETOF public.gffatts
    LANGUAGE sql
    AS $_$
SELECT feature_id, 'cvterm' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
--UNION
--SELECT feature_id, 'expression' AS type, s.description AS attribute
--FROM expression s, feature_expression fs
--WHERE fs.feature_id= $1 AND fs.expression_id = s.expression_id
--UNION
--SELECT fg.feature_id, 'genotype' AS type, g.uniquename||': '||g.description AS attribute
--FROM gcontext g, feature_gcontext fg
--WHERE fg.feature_id= $1 AND g.gcontext_id = fg.gcontext_id
--UNION
--SELECT feature_id, 'genotype' AS type, s.description AS attribute
--FROM genotype s, feature_genotype fs
--WHERE fs.feature_id= $1 AND fs.genotype_id = s.genotype_id
--UNION
--SELECT feature_id, 'phenotype' AS type, s.description AS attribute
--FROM phenotype s, feature_phenotype fs
--WHERE fs.feature_id= $1 AND fs.phenotype_id = s.phenotype_id
UNION
SELECT feature_id, 'synonym' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$;


ALTER FUNCTION public.gfffeatureatts(integer) OWNER TO postgres;

--
-- Name: make_all_rows_visible_in_schema(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.make_all_rows_visible_in_schema(scm character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  myrec RECORD;
  stmt VARCHAR;
  query VARCHAR;
  bt_schema VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  query = 'SELECT relname 
             FROM pg_class c, pg_namespace n
            WHERE c.relnamespace=n.oid 
              AND c.relkind=''r''
              AND n.nspname=''' || bt_schema || '''';
--  RAISE NOTICE '%', query; --stmt;
  FOR myrec IN EXECUTE query LOOP
    RAISE NOTICE 'Making rows in ''%'' visible', myrec.relname;
    stmt = 'SELECT make_all_rows_visible(''' || scm || '''::varchar, ''' || myrec.relname || '''::varchar)';
    --RAISE NOTICE '%', stmt;
    EXECUTE stmt;
  END LOOP;
  RETURN 't';
END
$$;


ALTER FUNCTION public.make_all_rows_visible_in_schema(scm character varying) OWNER TO postgres;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO postgres;

--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.plpgsql_validator(oid) RETURNS void
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_validator';


ALTER FUNCTION public.plpgsql_validator(oid) OWNER TO postgres;

--
-- Name: randstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.randstring(length integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ declare ret varchar; begin ret = ''; for i in 1..length loop ret = ret || substring ('abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMN' from cast (random()*50 as integer) for 1); end loop; return ret; end $$;


ALTER FUNCTION public.randstring(length integer) OWNER TO postgres;

--
-- Name: refresh_materialized_phenotype_jsonb_table(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_phenotype_jsonb_table() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW public.materialized_phenotype_jsonb_table;$$;


ALTER FUNCTION public.refresh_materialized_phenotype_jsonb_table() OWNER TO postgres;

--
-- Name: refresh_materialized_phenotype_jsonb_table_concurrently(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_phenotype_jsonb_table_concurrently() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_phenotype_jsonb_table;$$;


ALTER FUNCTION public.refresh_materialized_phenotype_jsonb_table_concurrently() OWNER TO postgres;

--
-- Name: refresh_materialized_stockprop(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_stockprop() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW public.materialized_stockprop;$$;


ALTER FUNCTION public.refresh_materialized_stockprop() OWNER TO postgres;

--
-- Name: refresh_materialized_stockprop_concurrently(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_stockprop_concurrently() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_stockprop;$$;


ALTER FUNCTION public.refresh_materialized_stockprop_concurrently() OWNER TO postgres;

--
-- Name: refresh_materialized_views(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_views() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW public.materialized_phenoview;
REFRESH MATERIALIZED VIEW public.materialized_genoview;
REFRESH MATERIALIZED VIEW public.accessions;
REFRESH MATERIALIZED VIEW public.breeding_programs;
REFRESH MATERIALIZED VIEW public.genotyping_protocols;
REFRESH MATERIALIZED VIEW public.locations;
REFRESH MATERIALIZED VIEW public.plants;
REFRESH MATERIALIZED VIEW public.plots;
REFRESH MATERIALIZED VIEW public.seedlots;
REFRESH MATERIALIZED VIEW public.trait_components;
REFRESH MATERIALIZED VIEW public.traits;
REFRESH MATERIALIZED VIEW public.trial_designs;
REFRESH MATERIALIZED VIEW public.trial_types;
REFRESH MATERIALIZED VIEW public.trials;
REFRESH MATERIALIZED VIEW public.years;
REFRESH MATERIALIZED VIEW public.accessionsXbreeding_programs;
REFRESH MATERIALIZED VIEW public.accessionsXlocations;
REFRESH MATERIALIZED VIEW public.accessionsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW public.accessionsXplants;
REFRESH MATERIALIZED VIEW public.accessionsXplots;
REFRESH MATERIALIZED VIEW public.accessionsXseedlots;
REFRESH MATERIALIZED VIEW public.accessionsXtrait_components;
REFRESH MATERIALIZED VIEW public.accessionsXtraits;
REFRESH MATERIALIZED VIEW public.accessionsXtrial_designs;
REFRESH MATERIALIZED VIEW public.accessionsXtrial_types;
REFRESH MATERIALIZED VIEW public.accessionsXtrials;
REFRESH MATERIALIZED VIEW public.accessionsXyears;
REFRESH MATERIALIZED VIEW public.breeding_programsXlocations;
REFRESH MATERIALIZED VIEW public.breeding_programsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW public.breeding_programsXplants;
REFRESH MATERIALIZED VIEW public.breeding_programsXplots;
REFRESH MATERIALIZED VIEW public.breeding_programsXseedlots;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrait_components;
REFRESH MATERIALIZED VIEW public.breeding_programsXtraits;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrial_designs;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrial_types;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrials;
REFRESH MATERIALIZED VIEW public.breeding_programsXyears;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXlocations;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXplants;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXplots;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXseedlots;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrait_components;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtraits;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrial_designs;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrial_types;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrials;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXyears;
REFRESH MATERIALIZED VIEW public.locationsXplants;
REFRESH MATERIALIZED VIEW public.locationsXplots;
REFRESH MATERIALIZED VIEW public.locationsXseedlots;
REFRESH MATERIALIZED VIEW public.locationsXtrait_components;
REFRESH MATERIALIZED VIEW public.locationsXtraits;
REFRESH MATERIALIZED VIEW public.locationsXtrial_designs;
REFRESH MATERIALIZED VIEW public.locationsXtrial_types;
REFRESH MATERIALIZED VIEW public.locationsXtrials;
REFRESH MATERIALIZED VIEW public.locationsXyears;
REFRESH MATERIALIZED VIEW public.plantsXplots;
REFRESH MATERIALIZED VIEW public.plantsXseedlots;
REFRESH MATERIALIZED VIEW public.plantsXtrait_components;
REFRESH MATERIALIZED VIEW public.plantsXtraits;
REFRESH MATERIALIZED VIEW public.plantsXtrial_designs;
REFRESH MATERIALIZED VIEW public.plantsXtrial_types;
REFRESH MATERIALIZED VIEW public.plantsXtrials;
REFRESH MATERIALIZED VIEW public.plantsXyears;
REFRESH MATERIALIZED VIEW public.plotsXseedlots;
REFRESH MATERIALIZED VIEW public.plotsXtrait_components;
REFRESH MATERIALIZED VIEW public.plotsXtraits;
REFRESH MATERIALIZED VIEW public.plotsXtrial_designs;
REFRESH MATERIALIZED VIEW public.plotsXtrial_types;
REFRESH MATERIALIZED VIEW public.plotsXtrials;
REFRESH MATERIALIZED VIEW public.plotsXyears;
REFRESH MATERIALIZED VIEW public.seedlotsXtrait_components;
REFRESH MATERIALIZED VIEW public.seedlotsXtraits;
REFRESH MATERIALIZED VIEW public.seedlotsXtrial_designs;
REFRESH MATERIALIZED VIEW public.seedlotsXtrial_types;
REFRESH MATERIALIZED VIEW public.seedlotsXtrials;
REFRESH MATERIALIZED VIEW public.seedlotsXyears;
REFRESH MATERIALIZED VIEW public.trait_componentsXtraits;
REFRESH MATERIALIZED VIEW public.trait_componentsXtrial_designs;
REFRESH MATERIALIZED VIEW public.trait_componentsXtrial_types;
REFRESH MATERIALIZED VIEW public.trait_componentsXtrials;
REFRESH MATERIALIZED VIEW public.trait_componentsXyears;
REFRESH MATERIALIZED VIEW public.traitsXtrial_designs;
REFRESH MATERIALIZED VIEW public.traitsXtrial_types;
REFRESH MATERIALIZED VIEW public.traitsXtrials;
REFRESH MATERIALIZED VIEW public.traitsXyears;
REFRESH MATERIALIZED VIEW public.trial_designsXtrial_types;
REFRESH MATERIALIZED VIEW public.trial_designsXtrials;
REFRESH MATERIALIZED VIEW public.trial_designsXyears;
REFRESH MATERIALIZED VIEW public.trial_typesXtrials;
REFRESH MATERIALIZED VIEW public.trial_typesXyears;
REFRESH MATERIALIZED VIEW public.trialsXyears;
UPDATE public.matviews SET currently_refreshing=FALSE, last_refresh=CURRENT_TIMESTAMP;$$;


ALTER FUNCTION public.refresh_materialized_views() OWNER TO postgres;

--
-- Name: refresh_materialized_views_concurrently(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_materialized_views_concurrently() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_phenoview;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_genoview;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessions;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.years;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXbreeding_programs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXseedlots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXtrait_components;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.seedlotsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_componentsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_componentsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_componentsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_componentsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trait_componentsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_typesXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_typesXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trialsXyears;
UPDATE public.matviews SET currently_refreshing=FALSE, last_refresh=CURRENT_TIMESTAMP;$$;


ALTER FUNCTION public.refresh_materialized_views_concurrently() OWNER TO postgres;

--
-- Name: store_feature(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_feature(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    paccession           ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_id
      FROM feature
      WHERE feature.accession = paccession;
    IF NOT FOUND THEN
      INSERT INTO feature 
       (accession)
         VALUES
       (paccession);
      RETURN currval('feature_pk_seq');
    END IF;
    UPDATE feature
      SET
         
      WHERE
         feature.accession = paccession

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature(character varying) OWNER TO postgres;

--
-- Name: store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pname                ALIAS FOR $1;
    paccession           ALIAS FOR $2;
    pfmin                ALIAS FOR $3;
    pfmax                ALIAS FOR $4;
    pfstrand             ALIAS FOR $5;
    presidues            ALIAS FOR $6;
    pseqlen              ALIAS FOR $7;
    pmd5checksum         ALIAS FOR $8;
    ptype_id             ALIAS FOR $9;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_id
      FROM feature
      WHERE feature.name = pname AND
            feature.accession = paccession AND
            feature.fmin = pfmin AND
            feature.fmax = pfmax AND
            feature.fstrand = pfstrand AND
            feature.residues = presidues AND
            feature.seqlen = pseqlen AND
            feature.md5checksum = pmd5checksum AND
            feature.type_id = ptype_id;
    IF NOT FOUND THEN
      INSERT INTO feature 
       (name, accession, fmin, fmax, fstrand, residues, seqlen, md5checksum, type_id)
         VALUES
       (pname, paccession, pfmin, pfmax, pfstrand, presidues, pseqlen, pmd5checksum, ptype_id);
      RETURN currval('feature_pk_seq');
    END IF;
    UPDATE feature
      SET
         
      WHERE
         feature.name = pname AND
            feature.accession = paccession AND
            feature.fmin = pfmin AND
            feature.fmax = pfmax AND
            feature.fstrand = pfstrand AND
            feature.residues = presidues AND
            feature.seqlen = pseqlen AND
            feature.md5checksum = pmd5checksum AND
            feature.type_id = ptype_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer) OWNER TO postgres;

--
-- Name: store_feature_cvterm(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_feature_cvterm(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeature_id          ALIAS FOR $1;
    pcvterm_id           ALIAS FOR $2;
    ppub_id              ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_cvterm_id
      FROM feature_cvterm
      WHERE feature_cvterm.feature_id = pfeature_id AND
            feature_cvterm.cvterm_id = pcvterm_id AND
            feature_cvterm.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO feature_cvterm 
       (feature_id, cvterm_id, pub_id)
         VALUES
       (pfeature_id, pcvterm_id, ppub_id);
      RETURN currval('feature_cvterm_pk_seq');
    END IF;
    UPDATE feature_cvterm
      SET
         
      WHERE
         feature_cvterm.feature_id = pfeature_id AND
            feature_cvterm.cvterm_id = pcvterm_id AND
            feature_cvterm.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_cvterm(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_feature_dbxref(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_feature_dbxref(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pdbxref_id           ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_dbxref_id
      FROM feature_dbxref
      WHERE feature_dbxref.feature_dbxref_id = pfeature_dbxref_id AND
            feature_dbxref.dbxref_id = pdbxref_id;
    IF NOT FOUND THEN
      INSERT INTO feature_dbxref 
       (dbxref_id)
         VALUES
       (pdbxref_id);
      RETURN currval('feature_dbxref_pk_seq');
    END IF;
    UPDATE feature_dbxref
      SET
         
      WHERE
         feature_dbxref.feature_dbxref_id = pfeature_dbxref_id AND
            feature_dbxref.dbxref_id = pdbxref_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_dbxref(integer) OWNER TO postgres;

--
-- Name: store_feature_relationship(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_feature_relationship(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    psubj_feature_id     ALIAS FOR $1;
    pobj_feature_id      ALIAS FOR $2;
    ptype_id             ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_relationship_id
      FROM feature_relationship
      WHERE feature_relationship.subj_feature_id = psubj_feature_id AND
            feature_relationship.obj_feature_id = pobj_feature_id AND
            feature_relationship.type_id = ptype_id;
    IF NOT FOUND THEN
      INSERT INTO feature_relationship 
       (subj_feature_id, obj_feature_id, type_id)
         VALUES
       (psubj_feature_id, pobj_feature_id, ptype_id);
      RETURN currval('feature_relationship_pk_seq');
    END IF;
    UPDATE feature_relationship
      SET
         
      WHERE
         feature_relationship.subj_feature_id = psubj_feature_id AND
            feature_relationship.obj_feature_id = pobj_feature_id AND
            feature_relationship.type_id = ptype_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_relationship(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_featureprop(integer, integer, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_featureprop(integer, integer, text, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeature_id          ALIAS FOR $1;
    ppkey_id             ALIAS FOR $2;
    ppval                ALIAS FOR $3;
    pprank               ALIAS FOR $4;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid featureprop_id
      FROM featureprop
      WHERE featureprop.feature_id = pfeature_id AND
            featureprop.pkey_id = ppkey_id AND
            featureprop.pval = ppval AND
            featureprop.prank = pprank;
    IF NOT FOUND THEN
      INSERT INTO featureprop 
       (feature_id, pkey_id, pval, prank)
         VALUES
       (pfeature_id, ppkey_id, ppval, pprank);
      RETURN currval('featureprop_pk_seq');
    END IF;
    UPDATE featureprop
      SET
         
      WHERE
         featureprop.feature_id = pfeature_id AND
            featureprop.pkey_id = ppkey_id AND
            featureprop.pval = ppval AND
            featureprop.prank = pprank

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_featureprop(integer, integer, text, integer) OWNER TO postgres;

--
-- Name: store_featureprop_pub(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_featureprop_pub(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeatureprop_id      ALIAS FOR $1;
    ppub_id              ALIAS FOR $2;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM featureprop_pub
      WHERE featureprop_pub.featureprop_id = pfeatureprop_id AND
            featureprop_pub.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO featureprop_pub 
       (featureprop_id, pub_id)
         VALUES
       (pfeatureprop_id, ppub_id);
      RETURN currval('0');
    END IF;
    UPDATE featureprop_pub
      SET
         
      WHERE
         featureprop_pub.featureprop_id = pfeatureprop_id AND
            featureprop_pub.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_featureprop_pub(integer, integer) OWNER TO postgres;

--
-- Name: store_gene(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_gene(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pname                ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid gene_id
      FROM gene
      WHERE gene.name = pname;
    IF NOT FOUND THEN
      INSERT INTO gene 
       (name)
         VALUES
       (pname);
      RETURN currval('gene_pk_seq');
    END IF;
    UPDATE gene
      SET
         
      WHERE
         gene.name = pname

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene(character varying) OWNER TO postgres;

--
-- Name: store_gene_feature(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_gene_feature(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgene_id             ALIAS FOR $1;
    pfeature_id          ALIAS FOR $2;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM gene_feature
      WHERE gene_feature.gene_id = pgene_id AND
            gene_feature.feature_id = pfeature_id;
    IF NOT FOUND THEN
      INSERT INTO gene_feature 
       (gene_id, feature_id)
         VALUES
       (pgene_id, pfeature_id);
      RETURN currval('0');
    END IF;
    UPDATE gene_feature
      SET
         
      WHERE
         gene_feature.gene_id = pgene_id AND
            gene_feature.feature_id = pfeature_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene_feature(integer, integer) OWNER TO postgres;

--
-- Name: store_gene_genesynonym(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_gene_genesynonym(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgenesynonym_id      ALIAS FOR $1;
    pgene_id             ALIAS FOR $2;
    ppub_id              ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM gene_genesynonym
      WHERE gene_genesynonym.genesynonym_id = pgenesynonym_id AND
            gene_genesynonym.gene_id = pgene_id AND
            gene_genesynonym.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO gene_genesynonym 
       (genesynonym_id, gene_id, pub_id)
         VALUES
       (pgenesynonym_id, pgene_id, ppub_id);
      RETURN currval('0');
    END IF;
    UPDATE gene_genesynonym
      SET
         
      WHERE
         gene_genesynonym.genesynonym_id = pgenesynonym_id AND
            gene_genesynonym.gene_id = pgene_id AND
            gene_genesynonym.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene_genesynonym(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_genesynonym(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.store_genesynonym(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgsynonym            ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid genesynonym_id
      FROM genesynonym
      WHERE genesynonym.gsynonym = pgsynonym;
    IF NOT FOUND THEN
      INSERT INTO genesynonym 
       (gsynonym)
         VALUES
       (pgsynonym);
      RETURN currval('genesynonym_pk_seq');
    END IF;
    UPDATE genesynonym
      SET
         
      WHERE
         genesynonym.gsynonym = pgsynonym

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_genesynonym(character varying) OWNER TO postgres;

--
-- Name: add_cxgn_metadata_to_empty_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.add_cxgn_metadata_to_empty_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
visible_bit VARCHAR := 'cxgn_production_visible';
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
nonempty INTEGER := 0;
stmt VARCHAR;
BEGIN
  prod_schema = scm;
  dev_schema = scm || '_dev';
  bt_schema = scm || '_bt';
-- FIXME: check whether the table is empty before doing this, or else
-- you'll wait a loooonnnnngggg time for it to finish.
--  stmt='SELECT count(*) FROM ' || bt_schema || '.' || tbl || ' LIMIT 1';
--  EXECUTE stmt;
--  IF nonempty > 0 THEN
--    RAISE NOTICE 'Can''t add metadata to a non-empty table.';
--     RETURN 'f';
--  ELSE
    stmt= 'ALTER TABLE ' || bt_schema || '.' || tbl || ' ADD COLUMN ' || visible_bit || ' BOOLEAN DEFAULT false';
    EXECUTE stmt;
    RETURN 't';
--  END IF;
END
$$;


ALTER FUNCTION utils.add_cxgn_metadata_to_empty_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: create_cxgn_branch_views_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
cols VARCHAR;
pkey VARCHAR;
pkey_ins VARCHAR;
seq VARCHAR;
upd_cols VARCHAR;
ins_cols VARCHAR;
visible_bit VARCHAR := 'cxgn_production_visible';
--metadata_cols ROW := ('cxgn_production_visible');
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
new_view_oid BIGINT;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--RAISE NOTICE '%', prod_schema;
--RAISE NOTICE '%', dev_schema;
--RAISE NOTICE '%', bt_schema;

-- Make sure there's a primary key
pkey = find_primary_key_for_table(bt_schema, tbl);
IF pkey IS NULL THEN
  RAISE NOTICE 'Sorry, can''t operate on tables that lack primary keys.  Please fix me.';
  RETURN 'f';
END IF;

-- Get a string representation of the column names.
SELECT array_to_string(array(SELECT quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attisdropped = 'f'
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
   INTO cols;

 SELECT (SELECT adsrc
           FROM pg_class c, 
                 pg_attribute a,
                 pg_namespace n,
                 pg_constraint t,
                 pg_attrdef d
  WHERE c.relnamespace = n.oid
    AND a.attrelid = c.oid
    AND t.conrelid = c.oid
    AND t.contype = 'p'
    AND array_upper(t.conkey, 1)=1
    AND t.conkey[1]=a.attnum      
    AND d.adrelid = c.oid
    AND d.adnum = a.attnum
    AND a.attname NOT IN ('cxgn_production_visible')
    AND nspname = bt_schema
    AND c.relname = tbl
    AND a.attnum > 0
       ORDER BY attnum)
   INTO seq;

-- If the table doesn't have a sequence behind the pkey, use the pkey
-- column.
IF seq IS NULL THEN
  pkey_ins = 'NEW.' || pkey;
ELSE
  pkey_ins = 'COALESCE(NEW.' || pkey || ',' || seq || ')';
END IF;

-- Get a string representation of the non-primary key columns
-- of the pseudotable NEW (see the Pg Rules documentation for NEW).
SELECT pkey_ins || ', ' || 
       array_to_string(array(SELECT 'NEW.' || quote_ident(attname)
                               FROM pg_class c 
                               JOIN pg_attribute a ON (a.attrelid = c.oid)
                               JOIN pg_namespace n ON (c.relnamespace = n.oid)
                              WHERE a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                             ORDER BY attnum), ', ')
  INTO ins_cols;

IF ins_cols IS NULL THEN
  RAISE NOTICE 'This table doesn''t have any non-primary key columns.';
  RETURN 'f';
END IF;     

-- Get a string representation of the update list for all the
-- non-primary key columns.
SELECT array_to_string(array(SELECT quote_ident(attname) || ' = NEW.' || quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
          INTO upd_cols;

--RAISE NOTICE 'cols: %', cols;
--RAISE NOTICE 'pkey: %', pkey;
--RAISE NOTICE 'ins_cols: %', ins_cols;
--RAISE NOTICE 'upd_cols: %', upd_cols;

stmt ='CREATE VIEW ' || dev_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl;
--RAISE NOTICE 'dev view: %', stmt;
EXECUTE stmt;
stmt ='CREATE VIEW ' || prod_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl || ' WHERE ' || visible_bit || ' = ' || 'true';
--RAISE NOTICE 'prod view: %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ') VALUES (' || ins_cols ||')';
--RAISE NOTICE 'insert rule %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;

--      Restore old privileges on views.  XXX doesn't actually work.
--SELECT relname INTO dropped_view_privs FROM pg_class WHERE relname='dropped_view_privs';
--IF dropped_view_privs IS NOT NULL THEN
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--  stmt='UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--          stmt= 'UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--END IF;
RETURN 't';
END
$$;


ALTER FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: create_cxgn_branch_views_for_table(character varying, character varying, boolean); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying, modifiable_in_production boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
cols VARCHAR;
pkey VARCHAR;
pkey_ins VARCHAR;
seq VARCHAR;
upd_cols VARCHAR;
ins_cols VARCHAR;
visible_bit VARCHAR := 'cxgn_production_visible';
--metadata_cols ROW := ('cxgn_production_visible');
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
new_view_oid BIGINT;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--RAISE NOTICE '%', prod_schema;
--RAISE NOTICE '%', dev_schema;
--RAISE NOTICE '%', bt_schema;

-- Make sure there's a primary key
pkey = find_primary_key_for_table(bt_schema, tbl);
IF pkey IS NULL THEN
  RAISE NOTICE 'Sorry, can''t operate on tables that lack primary keys.  Please fix me.';
  RETURN 'f';
END IF;

-- Get a string representation of the column names.
SELECT array_to_string(array(SELECT quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attisdropped = 'f'
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
   INTO cols;

 SELECT (SELECT adsrc
           FROM pg_class c, 
                 pg_attribute a,
                 pg_namespace n,
                 pg_constraint t,
                 pg_attrdef d
  WHERE c.relnamespace = n.oid
    AND a.attrelid = c.oid
    AND t.conrelid = c.oid
    AND t.contype = 'p'
    AND array_upper(t.conkey, 1)=1
    AND t.conkey[1]=a.attnum      
    AND d.adrelid = c.oid
    AND d.adnum = a.attnum
    AND a.attname NOT IN ('cxgn_production_visible')
    AND nspname = bt_schema
    AND c.relname = tbl
    AND a.attnum > 0
       ORDER BY attnum)
   INTO seq;

-- If the table doesn't have a sequence behind the pkey, use the pkey
-- column.
IF seq IS NULL THEN
  pkey_ins = 'NEW.' || pkey;
ELSE
  pkey_ins = 'COALESCE(NEW.' || pkey || ',' || seq || ')';
END IF;

-- Get a string representation of the non-primary key columns
-- of the pseudotable NEW (see the Pg Rules documentation for NEW).
SELECT pkey_ins || ', ' || 
       array_to_string(array(SELECT 'NEW.' || quote_ident(attname)
                               FROM pg_class c 
                               JOIN pg_attribute a ON (a.attrelid = c.oid)
                               JOIN pg_namespace n ON (c.relnamespace = n.oid)
                              WHERE a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                             ORDER BY attnum), ', ')
  INTO ins_cols;

IF ins_cols IS NULL THEN
  RAISE NOTICE 'This table doesn''t have any non-primary key columns.';
  RETURN 'f';
END IF;     

-- Get a string representation of the update list for all the
-- non-primary key columns.
SELECT array_to_string(array(SELECT quote_ident(attname) || ' = NEW.' || quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
          INTO upd_cols;

--RAISE NOTICE 'cols: %', cols;
--RAISE NOTICE 'pkey: %', pkey;
--RAISE NOTICE 'ins_cols: %', ins_cols;
--RAISE NOTICE 'upd_cols: %', upd_cols;

stmt ='CREATE VIEW ' || dev_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl;
--RAISE NOTICE 'dev view: %', stmt;
EXECUTE stmt;
stmt ='CREATE VIEW ' || prod_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl || ' WHERE ' || visible_bit || ' = ' || 'true';
--RAISE NOTICE 'prod view: %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ') VALUES (' || ins_cols ||')';
--RAISE NOTICE 'insert rule %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
if modifiable_in_production IS TRUE THEN
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ', cxgn_production_visible) VALUES (' || ins_cols ||', ''t'')';
  --RAISE NOTICE 'insert rule %', stmt;
  EXECUTE stmt;
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
  --RAISE NOTICE '%', stmt;
  EXECUTE stmt;
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
  --RAISE NOTICE '%', stmt;
  EXECUTE stmt;
END IF;

--      Restore old privileges on views.  XXX doesn't actually work.
--SELECT relname INTO dropped_view_privs FROM pg_class WHERE relname='dropped_view_privs';
--IF dropped_view_privs IS NOT NULL THEN
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--  stmt='UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--          stmt= 'UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--END IF;
RETURN 't';
END $$;


ALTER FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying, modifiable_in_production boolean) OWNER TO postgres;

--
-- Name: drop_cxgn_branch_views_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.drop_cxgn_branch_views_for_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--Save the permissions on the production and development tables
--before proceeding
--      XXX: Doesn't actually work, because
--stmt='SELECT nspname, relname, relacl INTO TEMPORARY TABLE dropped_view_privs FROM pg_class c
--JOIN pg_namespace n ON (n.oid=c.relnamespace) WHERE c.relname=''' || tbl || ''' AND n.nspname='''|| dev_schema ||'''';
--EXECUTE stmt;
--stmt='SELECT nspname, relname, relacl INTO TEMPORARY TABLE dropped_view_privs FROM pg_class c
--JOIN pg_namespace n ON (n.oid=c.relnamespace) WHERE c.relname=' || tbl || ' AND n.nspname='|| prod_schema || ';';
--EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_insert_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_update_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_delete_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;

stmt = 'DROP VIEW ' || prod_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP VIEW ' || dev_schema || '.' || tbl;
EXECUTE stmt;
RETURN 't';
END
$$;


ALTER FUNCTION utils.drop_cxgn_branch_views_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: find_primary_key_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.find_primary_key_for_table(scm character varying, tbl character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$DECLARE ret VARCHAR; BEGIN SELECT quote_ident(attname) FROM pg_class c JOIN pg_namespace n ON (n.oid = c.relnamespace) JOIN pg_attribute a ON (a.attrelid = c.oid)  JOIN pg_constraint t ON (t.conrelid = c.oid) WHERE array_upper(t.conkey, 1)=1 AND t.conkey[1]=a.attnum AND t.contype = 'p' AND a.attname NOT IN ('cxgn_production_visible') AND nspname = scm AND c.relname = tbl INTO ret; RETURN ret; END;$$;


ALTER FUNCTION utils.find_primary_key_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: make_all_rows_visible(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.make_all_rows_visible(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$DECLARE
  stmt VARCHAR;
  visible_bit VARCHAR := 'cxgn_production_visible';
  bt_schema VARCHAR;
  qualified_tbl VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  qualified_tbl = bt_schema || '.' || tbl;
     stmt = 'UPDATE ' || qualified_tbl || ' SET ' || visible_bit || ' = true WHERE ' || visible_bit || ' = ''f''';
     BEGIN
       EXECUTE stmt;
     EXCEPTION WHEN OTHERS THEN
       RAISE NOTICE 'failure making rows in % visible', qualified_tbl;
     END;
     RETURN 't';
END
$$;


ALTER FUNCTION utils.make_all_rows_visible(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: make_all_rows_visible_in_schema(character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION utils.make_all_rows_visible_in_schema(scm character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  myrec RECORD;
  stmt VARCHAR;
  query VARCHAR;
  bt_schema VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  query = 'SELECT relname 
             FROM pg_class c, pg_namespace n
            WHERE c.relnamespace=n.oid 
              AND c.relkind=''r''
              AND n.nspname=''' || bt_schema || '''';
--  RAISE NOTICE '%', query; --stmt;
  FOR myrec IN EXECUTE query LOOP
    RAISE NOTICE 'Making rows in ''%'' visible', myrec.relname;
    stmt = 'SELECT make_all_rows_visible(''' || scm || ''', ''' || myrec.relname || ''')';
    --RAISE NOTICE '%', stmt;
    EXECUTE stmt;
  END LOOP;
  RETURN 't';
END
$$;


ALTER FUNCTION utils.make_all_rows_visible_in_schema(scm character varying) OWNER TO postgres;

--
-- Name: annotation; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.annotation (
    annot_id integer NOT NULL,
    id character varying(100),
    name character varying(100),
    type character varying(10),
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint,
    history_id bigint,
    CONSTRAINT annotation_type_check CHECK ((((type)::text = 'gene'::text) OR ((type)::text = 'pseudogene'::text) OR ((type)::text = 'transposon'::text) OR ((type)::text = 'tRNA'::text) OR ((type)::text = 'rRNA'::text) OR ((type)::text = 'snRNA'::text) OR ((type)::text = 'snoRNA'::text)))
);


ALTER TABLE annotation.annotation OWNER TO postgres;

--
-- Name: annotation_annot_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.annotation_annot_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.annotation_annot_id_seq OWNER TO postgres;

--
-- Name: annotation_annot_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.annotation_annot_id_seq OWNED BY annotation.annotation.annot_id;


--
-- Name: comment; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.comment (
    comment_id integer NOT NULL,
    text text,
    person_id bigint,
    date date,
    table_name character varying(11),
    table_id bigint,
    CONSTRAINT comment_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text)))
);


ALTER TABLE annotation.comment OWNER TO postgres;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.comment_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.comment_comment_id_seq OWNER TO postgres;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.comment_comment_id_seq OWNED BY annotation.comment.comment_id;


--
-- Name: comp_analysis; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.comp_analysis (
    ca_id integer NOT NULL,
    program_id bigint,
    db_id bigint,
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint
);


ALTER TABLE annotation.comp_analysis OWNER TO postgres;

--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.comp_analysis_ca_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.comp_analysis_ca_id_seq OWNER TO postgres;

--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.comp_analysis_ca_id_seq OWNED BY annotation.comp_analysis.ca_id;


--
-- Name: dblist; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.dblist (
    db_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE annotation.dblist OWNER TO postgres;

--
-- Name: dblist_db_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.dblist_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.dblist_db_id_seq OWNER TO postgres;

--
-- Name: dblist_db_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.dblist_db_id_seq OWNED BY annotation.dblist.db_id;


--
-- Name: dbxref; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.dbxref (
    dbxref_id integer NOT NULL,
    db_id bigint,
    db_key character varying(100),
    table_name character varying(10),
    table_id bigint,
    CONSTRAINT dbxref_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'seq'::text)))
);


ALTER TABLE annotation.dbxref OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.dbxref_dbxref_id_seq OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.dbxref_dbxref_id_seq OWNED BY annotation.dbxref.dbxref_id;


--
-- Name: feature_set; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.feature_set (
    f_set_id integer NOT NULL,
    annot_id bigint,
    name character varying(100),
    type character varying(20),
    cdna_seq_id bigint,
    cds_seq_id bigint,
    prot_seq_id bigint,
    description text,
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint,
    history_id bigint
);


ALTER TABLE annotation.feature_set OWNER TO postgres;

--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.feature_set_f_set_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.feature_set_f_set_id_seq OWNER TO postgres;

--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.feature_set_f_set_id_seq OWNED BY annotation.feature_set.f_set_id;


--
-- Name: feature_span; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.feature_span (
    f_span_id integer NOT NULL,
    f_set_id bigint,
    type character varying(13),
    CONSTRAINT feature_span_type_check CHECK ((((type)::text = 'exon'::text) OR ((type)::text = 'intron'::text) OR ((type)::text = '3utr'::text) OR ((type)::text = '5utr'::text) OR ((type)::text = 'match_segment'::text) OR ((type)::text = 'start_codon'::text)))
);


ALTER TABLE annotation.feature_span OWNER TO postgres;

--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.feature_span_f_span_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.feature_span_f_span_id_seq OWNER TO postgres;

--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.feature_span_f_span_id_seq OWNED BY annotation.feature_span.f_span_id;


--
-- Name: organism; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.organism (
    organism_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE annotation.organism OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.organism_organism_id_seq OWNED BY annotation.organism.organism_id;


--
-- Name: output; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.output (
    output_id integer NOT NULL,
    r_span_id bigint,
    type character varying(20),
    value character varying(20)
);


ALTER TABLE annotation.output OWNER TO postgres;

--
-- Name: output_output_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.output_output_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.output_output_id_seq OWNER TO postgres;

--
-- Name: output_output_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.output_output_id_seq OWNED BY annotation.output.output_id;


--
-- Name: person; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.person (
    person_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE annotation.person OWNER TO postgres;

--
-- Name: person_person_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.person_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.person_person_id_seq OWNER TO postgres;

--
-- Name: person_person_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.person_person_id_seq OWNED BY annotation.person.person_id;


--
-- Name: program; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.program (
    program_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE annotation.program OWNER TO postgres;

--
-- Name: program_program_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.program_program_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.program_program_id_seq OWNER TO postgres;

--
-- Name: program_program_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.program_program_id_seq OWNED BY annotation.program.program_id;


--
-- Name: property; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.property (
    property_id integer NOT NULL,
    type character varying(100),
    value character varying(100),
    table_name character varying(13),
    table_id bigint,
    CONSTRAINT property_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text) OR ((table_name)::text = 'comp_analysis'::text)))
);


ALTER TABLE annotation.property OWNER TO postgres;

--
-- Name: property_property_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.property_property_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.property_property_id_seq OWNER TO postgres;

--
-- Name: property_property_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.property_property_id_seq OWNED BY annotation.property.property_id;


--
-- Name: result_set; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.result_set (
    r_set_id integer NOT NULL,
    ca_id bigint,
    name character varying(100),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE annotation.result_set OWNER TO postgres;

--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.result_set_r_set_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.result_set_r_set_id_seq OWNER TO postgres;

--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.result_set_r_set_id_seq OWNED BY annotation.result_set.r_set_id;


--
-- Name: result_span; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.result_span (
    r_span_id integer NOT NULL,
    r_set_id bigint,
    type character varying(20),
    score double precision,
    output_id bigint
);


ALTER TABLE annotation.result_span OWNER TO postgres;

--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.result_span_r_span_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.result_span_r_span_id_seq OWNER TO postgres;

--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.result_span_r_span_id_seq OWNED BY annotation.result_span.r_span_id;


--
-- Name: seq; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.seq (
    seq_id integer NOT NULL,
    id character varying(100),
    version bigint,
    length bigint,
    md5checksum character varying(32),
    name character varying(100),
    description text,
    organism_id bigint,
    type character varying(3),
    residues text,
    genbank_gi character varying(20),
    person_id bigint,
    clone_id bigint,
    CONSTRAINT seq_type_check CHECK ((((type)::text = 'AA'::text) OR ((type)::text = 'DNA'::text) OR ((type)::text = 'RNA'::text)))
);


ALTER TABLE annotation.seq OWNER TO postgres;

--
-- Name: seq_error; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.seq_error (
    seq_err_id integer NOT NULL,
    seq_id bigint,
    type character varying(20),
    "position" bigint
);


ALTER TABLE annotation.seq_error OWNER TO postgres;

--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.seq_error_seq_err_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.seq_error_seq_err_id_seq OWNER TO postgres;

--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.seq_error_seq_err_id_seq OWNED BY annotation.seq_error.seq_err_id;


--
-- Name: seq_relationship; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.seq_relationship (
    seq_rel_id integer NOT NULL,
    seq_id bigint,
    type character varying(7),
    alignment text,
    start bigint,
    "end" bigint,
    strand character varying(1),
    table_name character varying(12),
    table_id bigint,
    CONSTRAINT seq_relationship_strand_check CHECK ((((strand)::text = '-'::text) OR ((strand)::text = '+'::text))),
    CONSTRAINT seq_relationship_table_name_check CHECK ((((table_name)::text = 'seq'::text) OR ((table_name)::text = 'result_span'::text) OR ((table_name)::text = 'feature_set'::text) OR ((table_name)::text = 'feature_span'::text))),
    CONSTRAINT seq_relationship_type_check CHECK ((((type)::text = 'query'::text) OR ((type)::text = 'subject'::text)))
);


ALTER TABLE annotation.seq_relationship OWNER TO postgres;

--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.seq_relationship_seq_rel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.seq_relationship_seq_rel_id_seq OWNER TO postgres;

--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.seq_relationship_seq_rel_id_seq OWNED BY annotation.seq_relationship.seq_rel_id;


--
-- Name: seq_seq_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.seq_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.seq_seq_id_seq OWNER TO postgres;

--
-- Name: seq_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.seq_seq_id_seq OWNED BY annotation.seq.seq_id;


--
-- Name: synonym; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation.synonym (
    synonym_id integer NOT NULL,
    name character varying(100),
    table_name character varying(11),
    table_id bigint,
    CONSTRAINT synonym_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text)))
);


ALTER TABLE annotation.synonym OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation.synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation.synonym_synonym_id_seq OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation.synonym_synonym_id_seq OWNED BY annotation.synonym.synonym_id;


SET default_with_oids = false;

--
-- Name: bs_protocol; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_protocol (
    protocol_id integer NOT NULL,
    protocol_name character varying(250),
    protocol_type character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE biosource.bs_protocol OWNER TO postgres;

--
-- Name: TABLE bs_protocol; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_protocol IS 'biosource.bs_protocol store general information about how something was processed. mRNA extraction is a protocol, but also can be a protocol sequence_assembly or plant growth';


--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_protocol_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_protocol_protocol_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_protocol_protocol_id_seq OWNED BY biosource.bs_protocol.protocol_id;


--
-- Name: bs_protocol_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_protocol_pub (
    protocol_pub_id integer NOT NULL,
    protocol_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_protocol_pub OWNER TO postgres;

--
-- Name: TABLE bs_protocol_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_protocol_pub IS 'biosource.bs_protocol_pub is a linker table to associate publications to some protocols';


--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_protocol_pub_protocol_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_protocol_pub_protocol_pub_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_protocol_pub_protocol_pub_id_seq OWNED BY biosource.bs_protocol_pub.protocol_pub_id;


--
-- Name: bs_protocol_step; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_protocol_step (
    protocol_step_id integer NOT NULL,
    protocol_id integer,
    step integer,
    action text,
    execution text,
    tool_id integer,
    begin_date timestamp without time zone,
    end_date timestamp without time zone,
    location text,
    metadata_id bigint
);


ALTER TABLE biosource.bs_protocol_step OWNER TO postgres;

--
-- Name: TABLE bs_protocol_step; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_protocol_step IS 'biosource.bs_protocol_step store data for each step or stage in a protocol. They are order by the secuencially by step column. Execution describe the action produced during the step, for example plant growth at 24C, blastall -p blastx, ligation... begin_date, end_date and location generally will be used for plant field growth conditions.';


--
-- Name: bs_protocol_step_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_protocol_step_dbxref (
    protocol_step_dbxref_id integer NOT NULL,
    protocol_step_id integer,
    dbxref_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_protocol_step_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_protocol_step_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_protocol_step_dbxref IS 'biosource.bs_protocol_step_dbxref is a loker table designed to store controlled vocabulary terms associated to some protocol steps';


--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq OWNED BY biosource.bs_protocol_step_dbxref.protocol_step_dbxref_id;


--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_protocol_step_protocol_step_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_protocol_step_protocol_step_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_protocol_step_protocol_step_id_seq OWNED BY biosource.bs_protocol_step.protocol_step_id;


--
-- Name: bs_sample; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample (
    sample_id integer NOT NULL,
    sample_name character varying(250),
    sample_type character varying(250),
    alternative_name text,
    type_id bigint,
    description text,
    organism_id integer,
    stock_id integer,
    protocol_id bigint,
    contact_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample OWNER TO postgres;

--
-- Name: TABLE bs_sample; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample IS 'biosource.bs_sample store information about the origin of a biological sample. It can be composed by different elements, for example tomato fruit sample can be a mix of fruits in different stages. Each stage will be a sample_element. Sample also can have associated a sp_person_id in terms of contact.';


--
-- Name: bs_sample_cvterm; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_cvterm (
    sample_cvterm_id integer NOT NULL,
    sample_id integer,
    cvterm_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_cvterm OWNER TO postgres;

--
-- Name: TABLE bs_sample_cvterm; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_cvterm IS 'biosource.bs_sample_cvterm is a linker table to associate tags to the samples as Normalized, Sustracted...';


--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_cvterm_sample_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_cvterm_sample_cvterm_id_seq OWNER TO postgres;

--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_cvterm_sample_cvterm_id_seq OWNED BY biosource.bs_sample_cvterm.sample_cvterm_id;


--
-- Name: bs_sample_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_dbxref (
    sample_dbxref_id integer NOT NULL,
    sample_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_sample_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_dbxref IS 'biosource.bs_sample_dbxref is a linker table to associate controlled vocabullary as Plant Ontology to each element of a sample';


--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_dbxref_sample_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_dbxref_sample_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_dbxref_sample_dbxref_id_seq OWNED BY biosource.bs_sample_dbxref.sample_dbxref_id;


--
-- Name: bs_sample_element; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_element (
    sample_element_id integer NOT NULL,
    sample_element_name character varying(250),
    alternative_name text,
    sample_id integer,
    description text,
    organism_id integer,
    stock_id integer,
    protocol_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_element OWNER TO postgres;

--
-- Name: TABLE bs_sample_element; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_element IS 'biosource.bs_sample_element store information of each elemennt of a sample. It have a organism_id column and stock_id to associate different origins, for example a tomato leaves sample can be composed by leaves of Solanum lycopersicum and Solanum pimpinellifolium.';


--
-- Name: bs_sample_element_cvterm; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_element_cvterm (
    sample_element_cvterm_id integer NOT NULL,
    sample_element_id integer,
    cvterm_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_element_cvterm OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_cvterm; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_element_cvterm IS 'biosource.bs_sample_cvterm is a linker table to associate tags to the samples as Normalized, Sustracted...';


--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq OWNED BY biosource.bs_sample_element_cvterm.sample_element_cvterm_id;


--
-- Name: bs_sample_element_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_element_dbxref (
    sample_element_dbxref_id integer NOT NULL,
    sample_element_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_element_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_element_dbxref IS 'biosource.bs_sample_element_dbxref is a linker table to associate controlled vocabullary as Plant Ontology to each element of a sample';


--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq OWNED BY biosource.bs_sample_element_dbxref.sample_element_dbxref_id;


--
-- Name: bs_sample_element_file; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_element_file (
    sample_element_file_id integer NOT NULL,
    sample_element_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_element_file OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_file; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_element_file IS 'biosource.bs_sample_element_file store the associations between the sample_elements and files.';


--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_element_file_sample_element_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_element_file_sample_element_file_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_element_file_sample_element_file_id_seq OWNED BY biosource.bs_sample_element_file.sample_element_file_id;


--
-- Name: bs_sample_element_relation; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_element_relation (
    sample_element_relation_id integer NOT NULL,
    sample_element_id_a integer,
    sample_element_id_b integer,
    relation_type text,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_element_relation OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_relation; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_element_relation IS 'biosource.bs_sample_element_relation store the associations between sample_elements, for example an est dataset and an unigene dataset can be related with a sequence assembly relation';


--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_element_relation_sample_element_relation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_element_relation_sample_element_relation_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_element_relation_sample_element_relation_id_seq OWNED BY biosource.bs_sample_element_relation.sample_element_relation_id;


--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_element_sample_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_element_sample_element_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_element_sample_element_id_seq OWNED BY biosource.bs_sample_element.sample_element_id;


--
-- Name: bs_sample_file; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_file (
    sample_file_id integer NOT NULL,
    sample_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_file OWNER TO postgres;

--
-- Name: TABLE bs_sample_file; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_file IS 'biosource.bs_sample_file store the associations between the sample and files.';


--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_file_sample_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_file_sample_file_id_seq OWNER TO postgres;

--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_file_sample_file_id_seq OWNED BY biosource.bs_sample_file.sample_file_id;


--
-- Name: bs_sample_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_pub (
    sample_pub_id integer NOT NULL,
    sample_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_pub OWNER TO postgres;

--
-- Name: TABLE bs_sample_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_pub IS 'bisource.bs_sample_pub is a linker table to associate publications to a sample.';


--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_pub_sample_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_pub_sample_pub_id_seq OWNER TO postgres;

--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_pub_sample_pub_id_seq OWNED BY biosource.bs_sample_pub.sample_pub_id;


--
-- Name: bs_sample_relationship; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_sample_relationship (
    sample_relationship_id integer NOT NULL,
    subject_id integer,
    object_id integer,
    type_id integer,
    value text,
    rank integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_sample_relationship OWNER TO postgres;

--
-- Name: TABLE bs_sample_relationship; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_sample_relationship IS 'biosource.bs_sample_relationship store the associations between sample, for example an est dataset and an unigene dataset can be related with a sequence assembly relation';


--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_relationship_sample_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_relationship_sample_relationship_id_seq OWNER TO postgres;

--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_relationship_sample_relationship_id_seq OWNED BY biosource.bs_sample_relationship.sample_relationship_id;


--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_sample_sample_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_sample_sample_id_seq OWNER TO postgres;

--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_sample_sample_id_seq OWNED BY biosource.bs_sample.sample_id;


--
-- Name: bs_tool; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_tool (
    tool_id integer NOT NULL,
    tool_name character varying(250),
    tool_version character varying(10),
    tool_type character varying(250),
    tool_description text,
    tool_weblink text,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_tool OWNER TO postgres;

--
-- Name: TABLE bs_tool; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_tool IS 'biosource.bs_tool stores information about the tools used during the execution of some protocols. Example of tools are vectors, mRNA purification kits, software, soils. They can have links to web_pages or/and files.';


--
-- Name: bs_tool_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE biosource.bs_tool_pub (
    tool_pub_id integer NOT NULL,
    tool_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE biosource.bs_tool_pub OWNER TO postgres;

--
-- Name: TABLE bs_tool_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE biosource.bs_tool_pub IS 'biosource.bs_tool_pub is a linker table to associate publications to some tools';


--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_tool_pub_tool_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_tool_pub_tool_pub_id_seq OWNER TO postgres;

--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_tool_pub_tool_pub_id_seq OWNED BY biosource.bs_tool_pub.tool_pub_id;


--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE biosource.bs_tool_tool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE biosource.bs_tool_tool_id_seq OWNER TO postgres;

--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE biosource.bs_tool_tool_id_seq OWNED BY biosource.bs_tool.tool_id;


--
-- Name: ge_cluster_analysis; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_cluster_analysis (
    cluster_analysis_id integer NOT NULL,
    experiment_analysis_group_id integer,
    methodology character varying(250),
    protocol_id integer,
    description text,
    correlation_analysis_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_cluster_analysis OWNER TO postgres;

--
-- Name: TABLE ge_cluster_analysis; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_cluster_analysis IS 'gem.ge_cluster_analysis stores information about the experiments and methology used to do a cluster analysis of data expression.';


--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_cluster_analysis_cluster_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_cluster_analysis_cluster_analysis_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_cluster_analysis_cluster_analysis_id_seq OWNED BY gem.ge_cluster_analysis.cluster_analysis_id;


--
-- Name: ge_cluster_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_cluster_member (
    cluster_member_id bigint NOT NULL,
    template_id bigint,
    cluster_profile_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_cluster_member OWNER TO postgres;

--
-- Name: TABLE ge_cluster_member; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_cluster_member IS 'gem.ge_cluster_member stores the cluster composition as template list';


--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_cluster_member_cluster_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_cluster_member_cluster_member_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_cluster_member_cluster_member_id_seq OWNED BY gem.ge_cluster_member.cluster_member_id;


--
-- Name: ge_cluster_profile; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_cluster_profile (
    cluster_profile_id integer NOT NULL,
    cluster_analysis_id integer,
    member_nr integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_cluster_profile OWNER TO postgres;

--
-- Name: TABLE ge_cluster_profile; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_cluster_profile IS 'gem.ge_cluster_profile is a linker table between ge_cluster_expression_analysis table and md_files table. It let associate image and files to a cluster expression analysis.';


--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_cluster_profile_cluster_profile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_cluster_profile_cluster_profile_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_cluster_profile_cluster_profile_id_seq OWNED BY gem.ge_cluster_profile.cluster_profile_id;


--
-- Name: ge_correlation_analysis; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_correlation_analysis (
    correlation_analysis_id integer NOT NULL,
    experiment_analysis_group_id integer,
    methodology character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE gem.ge_correlation_analysis OWNER TO postgres;

--
-- Name: TABLE ge_correlation_analysis; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_correlation_analysis IS 'gem.ge_correlation_member stores correlation values associated to each template of a correlation analysis over a set of experiments.';


--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_correlation_analysis_correlation_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_correlation_analysis_correlation_analysis_id_seq OWNER TO postgres;

--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_correlation_analysis_correlation_analysis_id_seq OWNED BY gem.ge_correlation_analysis.correlation_analysis_id;


--
-- Name: ge_correlation_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_correlation_member (
    correlation_member_id bigint NOT NULL,
    correlation_analysis_id bigint,
    template_a_id bigint,
    template_b_id bigint,
    correlation_value real,
    correlation_type character varying(250),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_correlation_member OWNER TO postgres;

--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_correlation_member_correlation_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_correlation_member_correlation_member_id_seq OWNER TO postgres;

--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_correlation_member_correlation_member_id_seq OWNED BY gem.ge_correlation_member.correlation_member_id;


--
-- Name: ge_data_analysis_process; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_data_analysis_process (
    data_analysis_process_id integer NOT NULL,
    process_type character varying(250),
    target_id integer,
    source_dataset_id integer,
    result_dataset_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_data_analysis_process OWNER TO postgres;

--
-- Name: TABLE ge_data_analysis_process; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_data_analysis_process IS 'gem.ge_data_analysis_process store the different steps of a data analysis process for a microarray analysis as a relation between two datasets (source and result). The protocol can be stored as a protocol associated to a sample. A result file can be associated using file_id.';


--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_data_analysis_process_data_analysis_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_data_analysis_process_data_analysis_process_id_seq OWNER TO postgres;

--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_data_analysis_process_data_analysis_process_id_seq OWNED BY gem.ge_data_analysis_process.data_analysis_process_id;


--
-- Name: ge_diff_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_diff_expression (
    diff_expression_id integer NOT NULL,
    experiment_analysis_group_id integer,
    method character varying(250),
    stat_significance_cutoff real,
    stat_significance_type character varying(250),
    metadata_id bigint
);


ALTER TABLE gem.ge_diff_expression OWNER TO postgres;

--
-- Name: TABLE ge_diff_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_diff_expression IS 'gem.ge_diff_expression store information about the differential expression analysis made over a set of experiments';


--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_diff_expression_diff_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_diff_expression_diff_expression_id_seq OWNER TO postgres;

--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_diff_expression_diff_expression_id_seq OWNED BY gem.ge_diff_expression.diff_expression_id;


--
-- Name: ge_experiment; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experiment (
    experiment_id integer NOT NULL,
    experiment_name character varying(250),
    experimental_design_id integer,
    replicates_nr integer,
    colour_nr integer,
    description text,
    contact_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_experiment OWNER TO postgres;

--
-- Name: TABLE ge_experiment; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_experiment IS 'gem.ge_experiment store data about a single expression experiment such as tomato leaves or tomato leaves vs potato leaves in a two colour microarray experiment. For a high-throughtput sequencing methods an experiment could be equal to a sequencing run.';


--
-- Name: ge_experiment_analysis_group; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experiment_analysis_group (
    experiment_analysis_group_id integer NOT NULL,
    group_name character varying(250),
    group_description text,
    metadata_id bigint
);


ALTER TABLE gem.ge_experiment_analysis_group OWNER TO postgres;

--
-- Name: TABLE ge_experiment_analysis_group; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_experiment_analysis_group IS 'gem.ge_experiment_analysis_member stores member id for experiment groups.';


--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq OWNED BY gem.ge_experiment_analysis_group.experiment_analysis_group_id;


--
-- Name: ge_experiment_analysis_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experiment_analysis_member (
    experiment_analysis_member_id integer NOT NULL,
    experiment_analysis_group_id integer,
    experiment_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_experiment_analysis_member OWNER TO postgres;

--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq OWNED BY gem.ge_experiment_analysis_member.experiment_analysis_member_id;


--
-- Name: ge_experiment_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experiment_dbxref (
    experiment_dbxref_id integer NOT NULL,
    experiment_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_experiment_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_experiment_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_experiment_dbxref IS 'gem.ge_experiment_dbxref is a linking table between gem.ge_experiment table and dbxref table in the chado schema. It is used to store experiment associations with other databases.';


--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experiment_dbxref_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experiment_dbxref_experiment_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experiment_dbxref_experiment_dbxref_id_seq OWNED BY gem.ge_experiment_dbxref.experiment_dbxref_id;


--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experiment_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experiment_experiment_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experiment_experiment_id_seq OWNED BY gem.ge_experiment.experiment_id;


--
-- Name: ge_experimental_design; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experimental_design (
    experimental_design_id integer NOT NULL,
    experimental_design_name character varying(250),
    description text,
    design_type character varying(250),
    metadata_id bigint
);


ALTER TABLE gem.ge_experimental_design OWNER TO postgres;

--
-- Name: ge_experimental_design_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experimental_design_dbxref (
    experimental_design_dbxref_id integer NOT NULL,
    experimental_design_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_experimental_design_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_experimental_design_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_experimental_design_dbxref IS 'gem.ge_experimental_design_dbxref is a linking table between gem.ge_experimental_design table and dbxref table in the chado schema. It is used to store experimental designs associations with other databases.';


--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq OWNED BY gem.ge_experimental_design_dbxref.experimental_design_dbxref_id;


--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experimental_design_experimental_design_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experimental_design_experimental_design_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experimental_design_experimental_design_id_seq OWNED BY gem.ge_experimental_design.experimental_design_id;


--
-- Name: ge_experimental_design_pub; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_experimental_design_pub (
    experimental_design_pub_id integer NOT NULL,
    experimental_design_id integer,
    pub_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_experimental_design_pub OWNER TO postgres;

--
-- Name: TABLE ge_experimental_design_pub; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_experimental_design_pub IS 'gem.ge_experimental_design_pub is a linking table between gem.ge_experimental_design table and pub table in the chado schema. It is used to store experimental designs associations with publications.';


--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_experimental_design_pub_experimental_design_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_experimental_design_pub_experimental_design_pub_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_experimental_design_pub_experimental_design_pub_id_seq OWNED BY gem.ge_experimental_design_pub.experimental_design_pub_id;


--
-- Name: ge_expression_by_experiment; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_expression_by_experiment (
    expression_by_experiment_id bigint NOT NULL,
    experiment_id integer,
    template_id bigint,
    replicates_used integer,
    mean real,
    median real,
    standard_desviation double precision,
    coefficient_of_variance double precision,
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_expression_by_experiment OWNER TO postgres;

--
-- Name: TABLE ge_expression_by_experiment; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_expression_by_experiment IS 'gem.ge_expression_by_experiment stores the mean, media, SD and CV associated to the expression values of a template in a concrete experiment. These statistical values are calculated using the signal values for different hybridizations in the same experiment.';


--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_expression_by_experiment_expression_by_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_expression_by_experiment_expression_by_experiment_id_seq OWNER TO postgres;

--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_expression_by_experiment_expression_by_experiment_id_seq OWNED BY gem.ge_expression_by_experiment.expression_by_experiment_id;


--
-- Name: ge_fluorescanning; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_fluorescanning (
    fluorescanning_id integer NOT NULL,
    hybridization_id integer,
    protocol_id integer,
    file_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_fluorescanning OWNER TO postgres;

--
-- Name: TABLE ge_fluorescanning; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_fluorescanning IS 'gem.ge_fluorescanning store the data and the file location of how a hybridization was scanned (the location can be specified in two different ways. Using a file location in the system (file_id), or linking the file with a ftp location (dbxref_id)).';


--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_fluorescanning_fluorescanning_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_fluorescanning_fluorescanning_id_seq OWNER TO postgres;

--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_fluorescanning_fluorescanning_id_seq OWNED BY gem.ge_fluorescanning.fluorescanning_id;


--
-- Name: ge_hybridization; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_hybridization (
    hybridization_id integer NOT NULL,
    target_id integer,
    platform_id integer,
    platform_batch character varying(250),
    protocol_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_hybridization OWNER TO postgres;

--
-- Name: TABLE ge_hybridization; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_hybridization IS 'gem.ge_hybridization store the data of the platform and the target used in a hybridization.';


--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_hybridization_hybridization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_hybridization_hybridization_id_seq OWNER TO postgres;

--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_hybridization_hybridization_id_seq OWNED BY gem.ge_hybridization.hybridization_id;


--
-- Name: ge_platform; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_platform (
    platform_id integer NOT NULL,
    technology_type_id integer,
    platform_name character varying(250),
    description text,
    contact_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_platform OWNER TO postgres;

--
-- Name: TABLE ge_platform; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_platform IS 'trancriptomics.ge_platform stores for a specific gem platform, an aplication of a gem expression meassure technology to a concrete system. For example Arabidopsis AffyChip';


--
-- Name: ge_platform_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_platform_dbxref (
    platform_dbxref_id integer NOT NULL,
    platform_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_platform_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_platform_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_platform_dbxref IS 'gem.ge_platform_dbxref is a linking table between gem.ge_platform table and dbxref table in the chado schema. It is used to store platform associations with other expression databases as GEO';


--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_platform_dbxref_platform_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_platform_dbxref_platform_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_platform_dbxref_platform_dbxref_id_seq OWNED BY gem.ge_platform_dbxref.platform_dbxref_id;


--
-- Name: ge_platform_design; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_platform_design (
    platform_design_id integer NOT NULL,
    platform_id integer,
    sample_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_platform_design OWNER TO postgres;

--
-- Name: TABLE ge_platform_design; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_platform_design IS 'gem.ge_platform_design is a linking table between gem.ge_platform table and biosource.sample table. This table is used to create relations between a platform and a sequence datatset (sequence dataset as sample_type used in the design of the gem platform';


--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_platform_design_platform_design_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_platform_design_platform_design_id_seq OWNER TO postgres;

--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_platform_design_platform_design_id_seq OWNED BY gem.ge_platform_design.platform_design_id;


--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_platform_platform_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_platform_platform_id_seq OWNER TO postgres;

--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_platform_platform_id_seq OWNED BY gem.ge_platform.platform_id;


--
-- Name: ge_platform_pub; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_platform_pub (
    platform_pub_id integer NOT NULL,
    platform_id integer,
    pub_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_platform_pub OWNER TO postgres;

--
-- Name: TABLE ge_platform_pub; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_platform_pub IS 'gem.ge_platform_pub is a linking table between gem.ge_platform table and pub table in the chado schema. It is used to store platform associations with publications';


--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_platform_pub_platform_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_platform_pub_platform_pub_id_seq OWNER TO postgres;

--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_platform_pub_platform_pub_id_seq OWNED BY gem.ge_platform_pub.platform_pub_id;


--
-- Name: ge_probe; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_probe (
    probe_id bigint NOT NULL,
    platform_id integer,
    probe_name character varying(250),
    probe_type character varying(250),
    sequence_file_id bigint,
    template_id bigint,
    template_start bigint,
    template_end bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_probe OWNER TO postgres;

--
-- Name: TABLE ge_probe; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_probe IS 'gem.ge_probe stores data about the sequence used in the hybridization or produced by the sequencing method. Also map these sequence with a reference (see ge_template table).';


--
-- Name: ge_probe_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_probe_expression (
    probe_expression_id bigint NOT NULL,
    target_element_id integer,
    probe_id bigint,
    signal real,
    signal_type character varying(25),
    background real,
    background_type character varying(25),
    flag character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_probe_expression OWNER TO postgres;

--
-- Name: TABLE ge_probe_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_probe_expression IS 'gem.ge_probe_expression stores the signal and the background associated with each probe for a target_element in a hybridization. The experiment data are associated in two ways: target_id (faster) and as a sample_id (dataset_id) that keeps the history of the process.';


--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_probe_expression_probe_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_probe_expression_probe_expression_id_seq OWNER TO postgres;

--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_probe_expression_probe_expression_id_seq OWNED BY gem.ge_probe_expression.probe_expression_id;


--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_probe_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_probe_probe_id_seq OWNER TO postgres;

--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_probe_probe_id_seq OWNED BY gem.ge_probe.probe_id;


--
-- Name: ge_probe_spot; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_probe_spot (
    probe_spot_id bigint NOT NULL,
    probe_id bigint,
    spot_name character varying(250),
    metadata_id bigint
);


ALTER TABLE gem.ge_probe_spot OWNER TO postgres;

--
-- Name: TABLE ge_probe_spot; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_probe_spot IS 'gem.ge_probe_spot store each spot (each point of the microarray) associated with a probe (one probe can have more than one spot).';


--
-- Name: ge_probe_spot_coordinate; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_probe_spot_coordinate (
    probe_spot_coordinate_id bigint NOT NULL,
    probe_spot_id bigint,
    coordinate_type character varying(50),
    coordinate_value integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_probe_spot_coordinate OWNER TO postgres;

--
-- Name: TABLE ge_probe_spot_coordinate; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_probe_spot_coordinate IS 'gem.ge_probe_spot_coordinate store each coordinate associated to a spot as combination of different coordination types, for example a spot can have the coordinates x=1, y=1 and grid=1. This will be translate in three rows in this table for the same spot_id';


--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq OWNER TO postgres;

--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq OWNED BY gem.ge_probe_spot_coordinate.probe_spot_coordinate_id;


--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_probe_spot_probe_spot_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_probe_spot_probe_spot_id_seq OWNER TO postgres;

--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_probe_spot_probe_spot_id_seq OWNED BY gem.ge_probe_spot.probe_spot_id;


--
-- Name: ge_profile_element; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_profile_element (
    profile_element_id integer NOT NULL,
    cluster_profile_id integer,
    experiment_id integer,
    experiment_predefined_position integer,
    element_mean_value real,
    element_median_value real,
    element_sd real,
    element_type character varying(25),
    previous_element_ratio real,
    metadata_id bigint
);


ALTER TABLE gem.ge_profile_element OWNER TO postgres;

--
-- Name: TABLE ge_profile_element; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_profile_element IS 'gem.ge_cluster_profile_element store data about each element of a profile, for example is a profile is done over a time course with 4 points, each element will be one of these points.';


--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_profile_element_profile_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_profile_element_profile_element_id_seq OWNER TO postgres;

--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_profile_element_profile_element_id_seq OWNED BY gem.ge_profile_element.profile_element_id;


--
-- Name: ge_target; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_target (
    target_id integer NOT NULL,
    target_name character varying(250),
    experiment_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_target OWNER TO postgres;

--
-- Name: TABLE ge_target; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_target IS 'gems.ge_target store data about the replicates for an experiment. Different biological replicates will have different sample_id. Technical replicated will have the same sample_id but different target_id.';


--
-- Name: ge_target_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_target_dbxref (
    target_dbxref_id integer NOT NULL,
    target_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_target_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_target_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_target_dbxref IS 'gem.ge_target_dbxref is a linking table between gem.ge_target table and dbxref table in the chado schema. It is used to store target associations with other databases.';


--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_target_dbxref_target_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_target_dbxref_target_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_target_dbxref_target_dbxref_id_seq OWNED BY gem.ge_target_dbxref.target_dbxref_id;


--
-- Name: ge_target_element; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_target_element (
    target_element_id integer NOT NULL,
    target_element_name character varying(250),
    target_id integer,
    sample_id integer,
    protocol_id integer,
    dye text,
    metadata_id bigint
);


ALTER TABLE gem.ge_target_element OWNER TO postgres;

--
-- Name: TABLE ge_target_element; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_target_element IS 'gems.ge_target_element store data about the association of different samples in the same hybridization as target_elements, for example a two colour experiment will have one experiment, as many target as replicates and two target elements per replicates. A dye swap technique will be represented as two different targets with two different element each with different combinations of sample_id and dye.';


--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_target_element_target_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_target_element_target_element_id_seq OWNER TO postgres;

--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_target_element_target_element_id_seq OWNED BY gem.ge_target_element.target_element_id;


--
-- Name: ge_target_target_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_target_target_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_target_target_id_seq OWNER TO postgres;

--
-- Name: ge_target_target_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_target_target_id_seq OWNED BY gem.ge_target.target_id;


--
-- Name: ge_technology_type; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_technology_type (
    technology_type_id integer NOT NULL,
    technology_name character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE gem.ge_technology_type OWNER TO postgres;

--
-- Name: TABLE ge_technology_type; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_technology_type IS 'gem.ge_technology_type stores information about gem technology used in the development of the expression platform, for example Affymetrix GeneChip or High-throughput pyrosequencing';


--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_technology_type_technology_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_technology_type_technology_type_id_seq OWNER TO postgres;

--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_technology_type_technology_type_id_seq OWNED BY gem.ge_technology_type.technology_type_id;


--
-- Name: ge_template; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_template (
    template_id bigint NOT NULL,
    template_name character varying(250),
    template_type text,
    platform_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_template OWNER TO postgres;

--
-- Name: TABLE ge_template; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_template IS 'gem.ge_template store data about the gem templates of a specific platform. A template is a reference sequence used in the microarrat probe design or in the high-throughput sequencing mapping.';


--
-- Name: ge_template_dbiref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_template_dbiref (
    template_dbiref_id bigint NOT NULL,
    template_id bigint,
    dbiref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_template_dbiref OWNER TO postgres;

--
-- Name: TABLE ge_template_dbiref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_template_dbiref IS 'gem.ge_template_dbiref is a linking table between gem.ge_template table and metadata.md_dbiref table in the metadata schema. It is used to store associations between a template and internal sequence accessions, such us unigenes or ests';


--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_template_dbiref_template_dbiref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_template_dbiref_template_dbiref_id_seq OWNER TO postgres;

--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_template_dbiref_template_dbiref_id_seq OWNED BY gem.ge_template_dbiref.template_dbiref_id;


--
-- Name: ge_template_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_template_dbxref (
    template_dbxref_id bigint NOT NULL,
    template_id bigint,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE gem.ge_template_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_template_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_template_dbxref IS 'gem.ge_template_dbxref is a linking table between gem.ge_template table and dbxref table in the chado schema. It is used to store associations between a template and external sequence accessions of other databases as genbank';


--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_template_dbxref_template_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_template_dbxref_template_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_template_dbxref_template_dbxref_id_seq OWNED BY gem.ge_template_dbxref.template_dbxref_id;


--
-- Name: ge_template_diff_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_template_diff_expression (
    template_diff_expression_id bigint NOT NULL,
    diff_expression_id integer,
    template_id bigint,
    stat_value double precision,
    stat_type character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_template_diff_expression OWNER TO postgres;

--
-- Name: TABLE ge_template_diff_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_template_diff_expression IS 'gem.ge_template_diff_expression store information about the differential expression analysis per template';


--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_template_diff_expression_template_diff_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_template_diff_expression_template_diff_expression_id_seq OWNER TO postgres;

--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_template_diff_expression_template_diff_expression_id_seq OWNED BY gem.ge_template_diff_expression.template_diff_expression_id;


--
-- Name: ge_template_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE gem.ge_template_expression (
    template_expression_id bigint NOT NULL,
    hybridization_id integer,
    template_id bigint,
    template_signal real,
    template_signal_type character varying(25),
    statistical_value double precision,
    statistical_value_type character varying(25),
    flag character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE gem.ge_template_expression OWNER TO postgres;

--
-- Name: TABLE ge_template_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE gem.ge_template_expression IS 'gem.ge_template_expression store the signal and its statitistical avlue associated to a template in a hybridization ( the average, median ... of the signal of the probes associated to the template). The experiment data are linked using two ways: hybrdization_id (faster) and as a sample_id (dataset_id) that keeps the history of the process';


--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_template_expression_template_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_template_expression_template_expression_id_seq OWNER TO postgres;

--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_template_expression_template_expression_id_seq OWNED BY gem.ge_template_expression.template_expression_id;


--
-- Name: ge_template_template_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE gem.ge_template_template_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gem.ge_template_template_id_seq OWNER TO postgres;

--
-- Name: ge_template_template_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE gem.ge_template_template_id_seq OWNED BY gem.ge_template.template_id;


SET default_with_oids = false;

--
-- Name: blast_defline; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.blast_defline (
    blast_defline_id integer NOT NULL,
    blast_db_id integer,
    identifier character varying(255),
    defline text,
    identifier_defline_fulltext tsvector
);


ALTER TABLE genomic.blast_defline OWNER TO postgres;

--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.blast_defline_blast_defline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.blast_defline_blast_defline_id_seq OWNER TO postgres;

--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.blast_defline_blast_defline_id_seq OWNED BY genomic.blast_defline.blast_defline_id;


--
-- Name: blast_hit; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.blast_hit (
    blast_hit_id integer NOT NULL,
    blast_query_id integer,
    identifier character varying(255),
    evalue double precision,
    score double precision,
    identity_percentage double precision,
    align_start bigint,
    align_end bigint,
    blast_defline_id integer
);


ALTER TABLE genomic.blast_hit OWNER TO postgres;

--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.blast_hit_blast_hit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.blast_hit_blast_hit_id_seq OWNER TO postgres;

--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.blast_hit_blast_hit_id_seq OWNED BY genomic.blast_hit.blast_hit_id;


--
-- Name: blast_query; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.blast_query (
    blast_query_id integer NOT NULL,
    source_id integer,
    query_source_type_id integer,
    blast_db_id integer,
    total_hits integer,
    stored_hits integer,
    last_updated timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE genomic.blast_query OWNER TO postgres;

--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.blast_query_blast_query_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.blast_query_blast_query_id_seq OWNER TO postgres;

--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.blast_query_blast_query_id_seq OWNED BY genomic.blast_query.blast_query_id;


--
-- Name: chromat; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.chromat (
    chromat_id bigint NOT NULL,
    clone_id bigint,
    primer character varying(50),
    direction character(1),
    filename character varying(50),
    subpath text,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    censor_id integer,
    read_class_id bigint
);


ALTER TABLE genomic.chromat OWNER TO postgres;

--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.chromat_chromat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.chromat_chromat_id_seq OWNER TO postgres;

--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.chromat_chromat_id_seq OWNED BY genomic.chromat.chromat_id;


--
-- Name: clone; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.clone (
    clone_id integer NOT NULL,
    library_id bigint,
    clone_type_id smallint DEFAULT (0)::smallint NOT NULL,
    platenum integer,
    wellrow character varying(2),
    wellcol smallint,
    genbank_accession character varying(32),
    bad_clone character varying(32),
    estimated_length bigint
);


ALTER TABLE genomic.clone OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.clone_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.clone_clone_id_seq OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.clone_clone_id_seq OWNED BY genomic.clone.clone_id;


--
-- Name: clone_feature; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.clone_feature (
    clone_feature_id integer NOT NULL,
    clone_id bigint,
    feature_id bigint
);


ALTER TABLE genomic.clone_feature OWNER TO postgres;

--
-- Name: TABLE clone_feature; Type: COMMENT; Schema: genomic; Owner: postgres
--

COMMENT ON TABLE genomic.clone_feature IS 'linking table between genomic.clone and the chado feature table, showing which features in the feature table are the sequences of clones in the clone table';


SET default_with_oids = false;

--
-- Name: clone_feature_backup; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.clone_feature_backup (
    clone_feature_id integer,
    clone_id bigint,
    feature_id bigint
);


ALTER TABLE genomic.clone_feature_backup OWNER TO postgres;

--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.clone_feature_clone_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.clone_feature_clone_feature_id_seq OWNER TO postgres;

--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.clone_feature_clone_feature_id_seq OWNED BY genomic.clone_feature.clone_feature_id;


SET default_with_oids = false;

--
-- Name: clone_type; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.clone_type (
    clone_type_id integer NOT NULL,
    name character varying(40),
    shortname character varying(12)
);


ALTER TABLE genomic.clone_type OWNER TO postgres;

--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.clone_type_clone_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.clone_type_clone_type_id_seq OWNER TO postgres;

--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.clone_type_clone_type_id_seq OWNED BY genomic.clone_type.clone_type_id;


--
-- Name: genbank_submission; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.genbank_submission (
    genbank_submission_id integer NOT NULL,
    date_generated timestamp without time zone,
    date_sent timestamp without time zone,
    submitted_by character varying(20),
    ncbi_reply_date timestamp without time zone
);


ALTER TABLE genomic.genbank_submission OWNER TO postgres;

--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.genbank_submission_genbank_submission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.genbank_submission_genbank_submission_id_seq OWNER TO postgres;

--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.genbank_submission_genbank_submission_id_seq OWNED BY genomic.genbank_submission.genbank_submission_id;


--
-- Name: gss; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.gss (
    gss_id integer NOT NULL,
    chromat_id bigint,
    version smallint DEFAULT 1 NOT NULL,
    basecaller character varying(32),
    seq text,
    qual text,
    call_positions text,
    status integer,
    flags integer,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE genomic.gss OWNER TO postgres;

--
-- Name: gss_gss_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.gss_gss_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.gss_gss_id_seq OWNER TO postgres;

--
-- Name: gss_gss_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.gss_gss_id_seq OWNED BY genomic.gss.gss_id;


--
-- Name: gss_submitted_to_genbank; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.gss_submitted_to_genbank (
    gss_submitted_to_genbank_id integer NOT NULL,
    genbank_submission_id integer DEFAULT 0 NOT NULL,
    gss_id integer DEFAULT 0 NOT NULL,
    genbank_identifier character varying(80),
    genbank_dbgss_id bigint
);


ALTER TABLE genomic.gss_submitted_to_genbank OWNER TO postgres;

--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq OWNER TO postgres;

--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq OWNED BY genomic.gss_submitted_to_genbank.gss_submitted_to_genbank_id;


--
-- Name: library; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.library (
    library_id integer NOT NULL,
    clone_type_id bigint DEFAULT (0)::bigint NOT NULL,
    name character varying(80),
    shortname character varying(16) DEFAULT ''::character varying NOT NULL,
    accession_id bigint,
    subclone_of bigint,
    cloning_host character varying(80) DEFAULT 'E. coli'::character varying,
    rs1 character varying(12),
    rs2 character varying(12),
    vector_ligation_1 integer,
    vector_ligation_2 integer,
    vector character varying(80) NOT NULL,
    left_primer_id bigint,
    right_primer_id bigint,
    organism_id bigint
);


ALTER TABLE genomic.library OWNER TO postgres;

--
-- Name: library_annotation_db; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.library_annotation_db (
    library_annotation_db_id integer NOT NULL,
    library_id bigint DEFAULT (0)::bigint NOT NULL,
    blast_db_id bigint DEFAULT (0)::bigint NOT NULL,
    is_contaminant smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE genomic.library_annotation_db OWNER TO postgres;

--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.library_annotation_db_library_annotation_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.library_annotation_db_library_annotation_db_id_seq OWNER TO postgres;

--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.library_annotation_db_library_annotation_db_id_seq OWNED BY genomic.library_annotation_db.library_annotation_db_id;


--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.library_library_id_seq OWNED BY genomic.library.library_id;


SET default_with_oids = false;

--
-- Name: library_shortname_abbreviation; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.library_shortname_abbreviation (
    library_shortname_abbreviation_id integer NOT NULL,
    library_id integer,
    abbreviation character varying(10)
);


ALTER TABLE genomic.library_shortname_abbreviation OWNER TO postgres;

--
-- Name: TABLE library_shortname_abbreviation; Type: COMMENT; Schema: genomic; Owner: postgres
--

COMMENT ON TABLE genomic.library_shortname_abbreviation IS 'stores known abbreviations for the shortnames of genomic libraries';


--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.library_shortname_abbreviatio_library_shortname_abbreviatio_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.library_shortname_abbreviatio_library_shortname_abbreviatio_seq OWNER TO postgres;

--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.library_shortname_abbreviatio_library_shortname_abbreviatio_seq OWNED BY genomic.library_shortname_abbreviation.library_shortname_abbreviation_id;


SET default_with_oids = false;

--
-- Name: qc_report; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.qc_report (
    qc_report_id integer NOT NULL,
    gss_id bigint DEFAULT (0)::bigint NOT NULL,
    vs_status smallint,
    qstart integer,
    qend integer,
    istart integer,
    iend integer,
    hqi_start integer,
    hqi_length integer,
    entropy real,
    expected_error real,
    qual_trim_threshold real,
    vector_tokens character varying(40)
);


ALTER TABLE genomic.qc_report OWNER TO postgres;

--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.qc_report_qc_report_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.qc_report_qc_report_id_seq OWNER TO postgres;

--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.qc_report_qc_report_id_seq OWNED BY genomic.qc_report.qc_report_id;


--
-- Name: query_source_type; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.query_source_type (
    query_source_type_id integer NOT NULL,
    name character varying(255),
    shortname character varying(15)
);


ALTER TABLE genomic.query_source_type OWNER TO postgres;

--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.query_source_type_query_source_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.query_source_type_query_source_type_id_seq OWNER TO postgres;

--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.query_source_type_query_source_type_id_seq OWNED BY genomic.query_source_type.query_source_type_id;


--
-- Name: read_class; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.read_class (
    read_class_id integer NOT NULL,
    class_name character varying(40)
);


ALTER TABLE genomic.read_class OWNER TO postgres;

--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.read_class_read_class_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.read_class_read_class_id_seq OWNER TO postgres;

--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.read_class_read_class_id_seq OWNED BY genomic.read_class.read_class_id;


SET default_with_oids = false;

--
-- Name: sequencing_primer; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genomic.sequencing_primer (
    sequencing_primer_id integer NOT NULL,
    name character varying(20) NOT NULL
);


ALTER TABLE genomic.sequencing_primer OWNER TO postgres;

--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genomic.sequencing_primer_sequencing_primer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genomic.sequencing_primer_sequencing_primer_id_seq OWNER TO postgres;

--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genomic.sequencing_primer_sequencing_primer_id_seq OWNED BY genomic.sequencing_primer.sequencing_primer_id;


SET default_with_oids = false;

--
-- Name: ex_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.ex_tag (
    experiment_id bigint DEFAULT (0)::bigint NOT NULL,
    tag_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE insitu.ex_tag OWNER TO postgres;

--
-- Name: experiment; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.experiment (
    experiment_id integer NOT NULL,
    name text,
    date date,
    is_organism_id bigint DEFAULT (0)::bigint NOT NULL,
    tissue text,
    stage text,
    probe_id bigint,
    description text,
    user_id bigint,
    obsolete boolean,
    type text
);


ALTER TABLE insitu.experiment OWNER TO postgres;

--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.experiment_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.experiment_experiment_id_seq OWNER TO postgres;

--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.experiment_experiment_id_seq OWNED BY insitu.experiment.experiment_id;


SET default_with_oids = false;

--
-- Name: experiment_image; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.experiment_image (
    experiment_image_id integer NOT NULL,
    image_id bigint,
    experiment_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE insitu.experiment_image OWNER TO postgres;

--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.experiment_image_experiment_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.experiment_image_experiment_image_id_seq OWNER TO postgres;

--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.experiment_image_experiment_image_id_seq OWNED BY insitu.experiment_image.experiment_image_id;


--
-- Name: experiment_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.experiment_tag (
    experiment_tag_id integer NOT NULL,
    tag_id bigint,
    experiment_id bigint,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE insitu.experiment_tag OWNER TO postgres;

--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.experiment_tag_experiment_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.experiment_tag_experiment_tag_id_seq OWNER TO postgres;

--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.experiment_tag_experiment_tag_id_seq OWNED BY insitu.experiment_tag.experiment_tag_id;


SET default_with_oids = false;

--
-- Name: image_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.image_tag (
    image_id bigint DEFAULT (0)::bigint NOT NULL,
    tag_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE insitu.image_tag OWNER TO postgres;

--
-- Name: is_organism; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.is_organism (
    is_organism_id integer NOT NULL,
    name text NOT NULL,
    common_name text,
    description text,
    user_id bigint
);


ALTER TABLE insitu.is_organism OWNER TO postgres;

--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.is_organism_is_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.is_organism_is_organism_id_seq OWNER TO postgres;

--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.is_organism_is_organism_id_seq OWNED BY insitu.is_organism.is_organism_id;


--
-- Name: probe; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.probe (
    probe_id bigint NOT NULL,
    name text NOT NULL,
    sequence text,
    clone text,
    link_desc text,
    link text,
    primer1 text,
    primer1_seq text,
    primer2 text,
    primer2_seq text,
    user_id bigint,
    obsolete boolean,
    dbxref_type_id bigint,
    antibody text,
    identifier text
);


ALTER TABLE insitu.probe OWNER TO postgres;

--
-- Name: probe_probe_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.probe_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.probe_probe_id_seq OWNER TO postgres;

--
-- Name: probe_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.probe_probe_id_seq OWNED BY insitu.probe.probe_id;


--
-- Name: tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.tag (
    tag_id bigint NOT NULL,
    name text,
    description text,
    user_id bigint
);


ALTER TABLE insitu.tag OWNER TO postgres;

--
-- Name: tag_implication; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE insitu.tag_implication (
    tag_id bigint,
    implied_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE insitu.tag_implication OWNER TO postgres;

--
-- Name: tag_tag_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE insitu.tag_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE insitu.tag_tag_id_seq OWNER TO postgres;

--
-- Name: tag_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE insitu.tag_tag_id_seq OWNED BY insitu.tag.tag_id;


--
-- Name: attribution; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.attribution (
    attribution_id bigint NOT NULL,
    database_name character varying(255),
    table_name character varying(255),
    primary_key_column_name character varying(255),
    row_id bigint
);


ALTER TABLE metadata.attribution OWNER TO postgres;

--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.attribution_attribution_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.attribution_attribution_id_seq OWNER TO postgres;

--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.attribution_attribution_id_seq OWNED BY metadata.attribution.attribution_id;


--
-- Name: attribution_to; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.attribution_to (
    attribution_to_id bigint NOT NULL,
    attribution_id bigint,
    person_id bigint,
    organization_id bigint,
    project_id bigint,
    role_id bigint
);


ALTER TABLE metadata.attribution_to OWNER TO postgres;

--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.attribution_to_attribution_to_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.attribution_to_attribution_to_id_seq OWNER TO postgres;

--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.attribution_to_attribution_to_id_seq OWNED BY metadata.attribution_to.attribution_to_id;


--
-- Name: comments; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.comments (
    comment_id bigint NOT NULL,
    attribution_id bigint,
    comment_text character varying(255)
);


ALTER TABLE metadata.comments OWNER TO postgres;

--
-- Name: comments_comment_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.comments_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.comments_comment_id_seq OWNER TO postgres;

--
-- Name: comments_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.comments_comment_id_seq OWNED BY metadata.comments.comment_id;


SET default_with_oids = false;

--
-- Name: md_dbipath; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_dbipath (
    dbipath_id integer NOT NULL,
    column_name text,
    table_name text,
    schema_name text,
    metadata_id bigint
);


ALTER TABLE metadata.md_dbipath OWNER TO postgres;

--
-- Name: TABLE md_dbipath; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_dbipath IS 'md_dbipath is a table that store the path to access to any internal data in the database as a combination of schema_name.table_name.column_name. See md_dbiref for more details about internal references.';


--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_dbipath_dbipath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_dbipath_dbipath_id_seq OWNER TO postgres;

--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_dbipath_dbipath_id_seq OWNED BY metadata.md_dbipath.dbipath_id;


--
-- Name: md_dbiref; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_dbiref (
    dbiref_id bigint NOT NULL,
    iref_accession text,
    dbipath_id integer,
    metadata_id bigint
);


ALTER TABLE metadata.md_dbiref OWNER TO postgres;

--
-- Name: TABLE md_dbiref; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_dbiref IS 'md_dbiref is a table that store internal database references. An internal database reference (dbiref) is an unique combination of schema_name + table_name + column_name (from md_dbipath table) and iref_accession that let access to any data in the database. The internal accession refered must be unique.';


--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_dbiref_dbiref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_dbiref_dbiref_id_seq OWNER TO postgres;

--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_dbiref_dbiref_id_seq OWNED BY metadata.md_dbiref.dbiref_id;


--
-- Name: md_dbversion; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_dbversion (
    dbversion_id integer NOT NULL,
    patch_name text,
    patch_description text,
    metadata_id bigint
);


ALTER TABLE metadata.md_dbversion OWNER TO postgres;

--
-- Name: TABLE md_dbversion; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_dbversion IS 'md_dbversion is a table that store the names of the patches that have been executed over the database.';


--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_dbversion_dbversion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_dbversion_dbversion_id_seq OWNER TO postgres;

--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_dbversion_dbversion_id_seq OWNED BY metadata.md_dbversion.dbversion_id;


--
-- Name: md_files; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_files (
    file_id integer NOT NULL,
    basename text,
    dirname text,
    filetype character varying(250),
    alt_filename text,
    comment text,
    md5checksum text,
    metadata_id bigint,
    urlsource text,
    urlsource_md5checksum text
);


ALTER TABLE metadata.md_files OWNER TO postgres;

--
-- Name: TABLE md_files; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_files IS 'md_files is a table that store the location and the name of any file. The location (dirname) should be relative and not absolute (example core/sgn/images and not /data/local/cxgn/core/sgn/images).';


--
-- Name: md_files_file_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_files_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_files_file_id_seq OWNER TO postgres;

--
-- Name: md_files_file_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_files_file_id_seq OWNED BY metadata.md_files.file_id;


--
-- Name: md_groupmembers; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_groupmembers (
    groupmember_id bigint NOT NULL,
    group_id integer,
    dbiref_id bigint,
    metadata_id bigint
);


ALTER TABLE metadata.md_groupmembers OWNER TO postgres;

--
-- Name: TABLE md_groupmembers; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_groupmembers IS 'md_groupmembers is a table that store the relations between a group and the members that compound this group as dbiref (see md_dbiref and md_groups comments).';


--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_groupmembers_groupmember_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_groupmembers_groupmember_id_seq OWNER TO postgres;

--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_groupmembers_groupmember_id_seq OWNED BY metadata.md_groupmembers.groupmember_id;


--
-- Name: md_groups; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_groups (
    group_id bigint NOT NULL,
    group_name character varying(250),
    group_type character varying(250),
    group_description text,
    metadata_id bigint
);


ALTER TABLE metadata.md_groups OWNER TO postgres;

--
-- Name: TABLE md_groups; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_groups IS 'md_groups is a table that store data about a group identity and a group type of a group of data. These groups are composed by dbirefs (see md_dbiref comment), so can be groups of any data in the database (from sample_id to organism_names).';


--
-- Name: md_groups_group_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_groups_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_groups_group_id_seq OWNER TO postgres;

--
-- Name: md_groups_group_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_groups_group_id_seq OWNED BY metadata.md_groups.group_id;


--
-- Name: md_image; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_image (
    image_id integer NOT NULL,
    name character varying(100),
    description text,
    original_filename character varying(100),
    file_ext character varying(20),
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    md5sum text
);


ALTER TABLE metadata.md_image OWNER TO postgres;

--
-- Name: md_image_cvterm; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_image_cvterm (
    md_image_cvterm_id integer NOT NULL,
    image_id bigint NOT NULL,
    cvterm_id bigint NOT NULL,
    sp_person_id bigint,
    obsolete boolean DEFAULT false
);


ALTER TABLE metadata.md_image_cvterm OWNER TO postgres;

--
-- Name: md_image_cvterm_md_image_cvterm_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_image_cvterm_md_image_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_image_cvterm_md_image_cvterm_id_seq OWNER TO postgres;

--
-- Name: md_image_cvterm_md_image_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_image_cvterm_md_image_cvterm_id_seq OWNED BY metadata.md_image_cvterm.md_image_cvterm_id;


--
-- Name: md_image_image_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_image_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_image_image_id_seq OWNER TO postgres;

--
-- Name: md_image_image_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_image_image_id_seq OWNED BY metadata.md_image.image_id;


--
-- Name: md_image_organism; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_image_organism (
    md_image_organism_id integer NOT NULL,
    image_id bigint NOT NULL,
    organism_id bigint NOT NULL,
    sp_person_id bigint,
    obsolete boolean DEFAULT false
);


ALTER TABLE metadata.md_image_organism OWNER TO postgres;

--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_image_organism_md_image_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_image_organism_md_image_organism_id_seq OWNER TO postgres;

--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_image_organism_md_image_organism_id_seq OWNED BY metadata.md_image_organism.md_image_organism_id;


--
-- Name: md_metadata; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_metadata (
    metadata_id bigint NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    create_person_id integer NOT NULL,
    modified_date timestamp with time zone,
    modified_person_id integer,
    modification_note text,
    previous_metadata_id integer,
    obsolete integer DEFAULT 0,
    obsolete_note text,
    permission_id integer
);


ALTER TABLE metadata.md_metadata OWNER TO postgres;

--
-- Name: TABLE md_metadata; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE metadata.md_metadata IS 'md_metadata is a table that store data about who and when insert or modify some data in the database. Also it can support obsolete features. It can not support permission features yet.';


--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_metadata_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_metadata_metadata_id_seq OWNER TO postgres;

--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_metadata_metadata_id_seq OWNED BY metadata.md_metadata.metadata_id;


--
-- Name: md_tag; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_tag (
    tag_id integer NOT NULL,
    name character varying(100),
    description text,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE metadata.md_tag OWNER TO postgres;

--
-- Name: md_tag_image; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.md_tag_image (
    tag_image_id integer NOT NULL,
    image_id bigint,
    tag_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone,
    modified_date timestamp with time zone
);


ALTER TABLE metadata.md_tag_image OWNER TO postgres;

--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_tag_image_tag_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_tag_image_tag_image_id_seq OWNER TO postgres;

--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_tag_image_tag_image_id_seq OWNED BY metadata.md_tag_image.tag_image_id;


--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.md_tag_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.md_tag_tag_id_seq OWNER TO postgres;

--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.md_tag_tag_id_seq OWNED BY metadata.md_tag.tag_id;


SET default_with_oids = false;

--
-- Name: roles; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE metadata.roles (
    role_id bigint NOT NULL,
    role_name character varying(255),
    role_description character varying(255)
);


ALTER TABLE metadata.roles OWNER TO postgres;

--
-- Name: roles_role_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE metadata.roles_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata.roles_role_id_seq OWNER TO postgres;

--
-- Name: roles_role_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE metadata.roles_role_id_seq OWNED BY metadata.roles.role_id;


--
-- Name: data_points; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.data_points (
    dp_id integer NOT NULL,
    sample_id bigint DEFAULT (0)::bigint NOT NULL,
    prop_id bigint DEFAULT (0)::bigint NOT NULL,
    source_id bigint,
    image_id bigint,
    value character varying(128)
);


ALTER TABLE pheno_population.data_points OWNER TO postgres;

--
-- Name: data_points_dp_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.data_points_dp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.data_points_dp_id_seq OWNER TO postgres;

--
-- Name: data_points_dp_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.data_points_dp_id_seq OWNED BY pheno_population.data_points.dp_id;


--
-- Name: genotypes; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.genotypes (
    gen_id integer NOT NULL,
    gen_name character varying(32),
    pop_id bigint,
    annotation character varying(128)
);


ALTER TABLE pheno_population.genotypes OWNER TO postgres;

--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.genotypes_gen_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.genotypes_gen_id_seq OWNER TO postgres;

--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.genotypes_gen_id_seq OWNED BY pheno_population.genotypes.gen_id;


--
-- Name: images; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.images (
    image_id integer NOT NULL,
    filepath character varying(128),
    sample_id bigint,
    source_id bigint,
    annotation character varying(128)
);


ALTER TABLE pheno_population.images OWNER TO postgres;

--
-- Name: images_image_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.images_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.images_image_id_seq OWNER TO postgres;

--
-- Name: images_image_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.images_image_id_seq OWNED BY pheno_population.images.image_id;


--
-- Name: locations; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.locations (
    loc_id integer NOT NULL,
    institution character varying(32),
    environment character varying(32),
    year bigint,
    annotation character varying(128)
);


ALTER TABLE pheno_population.locations OWNER TO postgres;

--
-- Name: locations_loc_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.locations_loc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.locations_loc_id_seq OWNER TO postgres;

--
-- Name: locations_loc_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.locations_loc_id_seq OWNED BY pheno_population.locations.loc_id;


--
-- Name: organs; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.organs (
    organ_id integer NOT NULL,
    organ_name character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE pheno_population.organs OWNER TO postgres;

--
-- Name: organs_organ_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.organs_organ_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.organs_organ_id_seq OWNER TO postgres;

--
-- Name: organs_organ_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.organs_organ_id_seq OWNED BY pheno_population.organs.organ_id;


--
-- Name: plants; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.plants (
    plant_id integer NOT NULL,
    plant_name character varying(32),
    gen_id bigint,
    loc_id bigint
);


ALTER TABLE pheno_population.plants OWNER TO postgres;

--
-- Name: plants_plant_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.plants_plant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.plants_plant_id_seq OWNER TO postgres;

--
-- Name: plants_plant_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.plants_plant_id_seq OWNED BY pheno_population.plants.plant_id;


--
-- Name: populations; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.populations (
    pop_id integer NOT NULL,
    pedigree character varying(32),
    annotation character varying(128)
);


ALTER TABLE pheno_population.populations OWNER TO postgres;

--
-- Name: populations_pop_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.populations_pop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.populations_pop_id_seq OWNER TO postgres;

--
-- Name: populations_pop_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.populations_pop_id_seq OWNED BY pheno_population.populations.pop_id;


--
-- Name: properties; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.properties (
    prop_id integer NOT NULL,
    prop_name character varying(64) DEFAULT ''::character varying NOT NULL,
    organ_id bigint DEFAULT (0)::bigint NOT NULL,
    unit_name character varying(16) DEFAULT ''::character varying NOT NULL,
    unit_precision bigint DEFAULT (0)::bigint NOT NULL,
    annotation character varying(200)
);


ALTER TABLE pheno_population.properties OWNER TO postgres;

--
-- Name: properties_prop_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.properties_prop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.properties_prop_id_seq OWNER TO postgres;

--
-- Name: properties_prop_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.properties_prop_id_seq OWNED BY pheno_population.properties.prop_id;


--
-- Name: samples; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.samples (
    sample_id integer NOT NULL,
    sample_name character varying(32),
    sample_group character varying(32),
    organ_id bigint DEFAULT (0)::bigint NOT NULL,
    plant_id bigint DEFAULT (0)::bigint NOT NULL,
    annotation character varying(128)
);


ALTER TABLE pheno_population.samples OWNER TO postgres;

--
-- Name: samples_sample_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.samples_sample_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.samples_sample_id_seq OWNER TO postgres;

--
-- Name: samples_sample_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.samples_sample_id_seq OWNED BY pheno_population.samples.sample_id;


--
-- Name: sources; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE pheno_population.sources (
    source_id integer NOT NULL,
    author character varying(32),
    location character varying(32),
    source_date character varying(32)
);


ALTER TABLE pheno_population.sources OWNER TO postgres;

--
-- Name: sources_source_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE pheno_population.sources_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pheno_population.sources_source_id_seq OWNER TO postgres;

--
-- Name: sources_source_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE pheno_population.sources_source_id_seq OWNED BY pheno_population.sources.source_id;


--
-- Name: allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.allele (
    allele_id integer NOT NULL,
    locus_id integer,
    allele_symbol character varying(32),
    allele_name character varying(255),
    mode_of_inheritance character varying(18),
    allele_synonym character varying(255)[],
    allele_phenotype text,
    allele_notes text,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    updated_by integer,
    is_default boolean DEFAULT true,
    sequence text,
    CONSTRAINT chk_allele_mode_of_inheritance CHECK ((((mode_of_inheritance)::text = 'recessive'::text) OR ((mode_of_inheritance)::text = 'partially dominant'::text) OR ((mode_of_inheritance)::text = 'dominant'::text) OR ((mode_of_inheritance)::text = ''::text)))
);


ALTER TABLE phenome.allele OWNER TO postgres;

--
-- Name: allele_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.allele_alias (
    allele_alias_id integer NOT NULL,
    alias text NOT NULL,
    allele_id integer NOT NULL,
    preferred boolean,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.allele_alias OWNER TO postgres;

--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.allele_alias_allele_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.allele_alias_allele_alias_id_seq OWNER TO postgres;

--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.allele_alias_allele_alias_id_seq OWNED BY phenome.allele_alias.allele_alias_id;


--
-- Name: allele_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.allele_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.allele_allele_id_seq OWNER TO postgres;

--
-- Name: allele_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.allele_allele_id_seq OWNED BY phenome.allele.allele_id;


--
-- Name: allele_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.allele_dbxref (
    allele_dbxref_id integer NOT NULL,
    allele_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.allele_dbxref OWNER TO postgres;

--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.allele_dbxref_allele_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.allele_dbxref_allele_dbxref_id_seq OWNER TO postgres;

--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.allele_dbxref_allele_dbxref_id_seq OWNED BY phenome.allele_dbxref.allele_dbxref_id;


SET default_with_oids = false;

--
-- Name: allele_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.allele_history (
    allele_history_id integer NOT NULL,
    allele_id integer NOT NULL,
    locus_id integer NOT NULL,
    allele_symbol character varying(32),
    allele_name character varying(32),
    mode_of_inheritance character varying(18),
    allele_phenotype text,
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    sequence text,
    CONSTRAINT allele_history_mode_of_inheritance_check CHECK ((((mode_of_inheritance)::text = 'dominant'::text) OR ((mode_of_inheritance)::text = 'partially dominant'::text) OR ((mode_of_inheritance)::text = 'recessive'::text) OR ((mode_of_inheritance)::text = ''::text)))
);


ALTER TABLE phenome.allele_history OWNER TO postgres;

--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.allele_history_allele_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.allele_history_allele_history_id_seq OWNER TO postgres;

--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.allele_history_allele_history_id_seq OWNED BY phenome.allele_history.allele_history_id;


--
-- Name: cross_type; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.cross_type (
    cross_type_id integer NOT NULL,
    cross_type character varying NOT NULL
);


ALTER TABLE phenome.cross_type OWNER TO postgres;

--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.cross_type_cross_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.cross_type_cross_type_id_seq OWNER TO postgres;

--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.cross_type_cross_type_id_seq OWNED BY phenome.cross_type.cross_type_id;


--
-- Name: cvterm_pub_ranking; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.cvterm_pub_ranking (
    cvterm_id integer,
    pub_id integer,
    rank real,
    match_type text,
    headline text
);


ALTER TABLE phenome.cvterm_pub_ranking OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: dbxref_type; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.dbxref_type (
    dbxref_type_id integer NOT NULL,
    dbxref_type_name character varying(32),
    dbxref_type_definition character varying(255),
    dbxref_type_url character varying(255)
);


ALTER TABLE phenome.dbxref_type OWNER TO postgres;

--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.dbxref_type_dbxref_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.dbxref_type_dbxref_type_id_seq OWNER TO postgres;

--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.dbxref_type_dbxref_type_id_seq OWNED BY phenome.dbxref_type.dbxref_type_id;


--
-- Name: genotype; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.genotype (
    genotype_id integer NOT NULL,
    individual_id bigint,
    experiment_name character varying(100),
    reference_map_id bigint,
    background_accession_id bigint,
    preferred boolean,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    genotype_experiment_id bigint,
    stock_id integer
);


ALTER TABLE phenome.genotype OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: genotype_experiment; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.genotype_experiment (
    genotype_experiment_id integer NOT NULL,
    experiment_name character varying(100),
    reference_map_id bigint,
    background_accession_id bigint,
    preferred boolean,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.genotype_experiment OWNER TO postgres;

--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.genotype_experiment_genotype_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.genotype_experiment_genotype_experiment_id_seq OWNER TO postgres;

--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.genotype_experiment_genotype_experiment_id_seq OWNED BY phenome.genotype_experiment.genotype_experiment_id;


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.genotype_genotype_id_seq OWNER TO postgres;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.genotype_genotype_id_seq OWNED BY phenome.genotype.genotype_id;


SET default_with_oids = false;

--
-- Name: genotype_region; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.genotype_region (
    genotype_region_id integer NOT NULL,
    genotype_id integer,
    marker_id_nn bigint,
    marker_id_ns bigint NOT NULL,
    marker_id_sn bigint NOT NULL,
    marker_id_ss bigint,
    zygocity_code character varying(1),
    lg_id integer,
    type character varying(32) NOT NULL,
    name character varying(32),
    sp_person_id integer,
    modified_date timestamp with time zone DEFAULT now() NOT NULL,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    obsolete boolean DEFAULT false NOT NULL,
    CONSTRAINT genotype_region_type_check CHECK ((((type)::text = 'bin'::text) OR ((type)::text = 'map'::text) OR ((type)::text = 'inbred'::text))),
    CONSTRAINT genotype_region_zygocity_code_check CHECK ((((zygocity_code)::text = 'a'::text) OR ((zygocity_code)::text = 'b'::text) OR ((zygocity_code)::text = 'c'::text) OR ((zygocity_code)::text = 'd'::text) OR ((zygocity_code)::text = 'h'::text)))
);


ALTER TABLE phenome.genotype_region OWNER TO postgres;

--
-- Name: TABLE genotype_region; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON TABLE phenome.genotype_region IS 'polymorphic regions from a genotype, delineated by markers in a certain linkage group on a certain map';


--
-- Name: COLUMN genotype_region.genotype_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.genotype_id IS 'optional genotype this region belongs to.  some regions are artificial, arising from combinations of other regions, and thus do not have an associated genotype';


--
-- Name: COLUMN genotype_region.marker_id_nn; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.marker_id_nn IS 'the north marker in the pair of markers bracketing the north end of this region. this may be null for regions at the north end of a linkage group';


--
-- Name: COLUMN genotype_region.marker_id_ns; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.marker_id_ns IS 'the south marker in the pair of markers bracketing the north end of this region';


--
-- Name: COLUMN genotype_region.marker_id_sn; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.marker_id_sn IS 'the north marker in the pair of markers bracketing the south end of this region';


--
-- Name: COLUMN genotype_region.marker_id_ss; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.marker_id_ss IS 'the south marker in the pair of markers bracketing the south end of this region. this may be null for regions at the south end of a linkage group.';


--
-- Name: COLUMN genotype_region.lg_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.lg_id IS 'the linkage group in a specific version of a specific map where this region is located';


--
-- Name: COLUMN genotype_region.type; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.type IS 'the type of polymorphic region this is.  map is mapping experiment data, inbred is IL lines segments, and bin is a derived region based on a boolean combination of inbred fragments.  For bin regions, the specific boolean combination of fragments that make the bin is not stored.';


--
-- Name: COLUMN genotype_region.name; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.name IS 'special name for this region, if any.  optional';


--
-- Name: COLUMN genotype_region.sp_person_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN phenome.genotype_region.sp_person_id IS 'the person who loaded this datum.  optional';


--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.genotype_region_genotype_region_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.genotype_region_genotype_region_id_seq OWNER TO postgres;

--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.genotype_region_genotype_region_id_seq OWNED BY phenome.genotype_region.genotype_region_id;


--
-- Name: germplasm; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.germplasm (
    germplasm_id integer NOT NULL,
    germplasm_type character varying(10),
    individual_id bigint NOT NULL,
    description text,
    dbxref_id bigint,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    CONSTRAINT chk_germplasm_germplasm_type CHECK ((((germplasm_type)::text = 'seed'::text) OR ((germplasm_type)::text = 'vegetative'::text)))
);


ALTER TABLE phenome.germplasm OWNER TO postgres;

--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.germplasm_germplasm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.germplasm_germplasm_id_seq OWNER TO postgres;

--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.germplasm_germplasm_id_seq OWNED BY phenome.germplasm.germplasm_id;


--
-- Name: individual; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual (
    individual_id integer NOT NULL,
    name character varying(100),
    description text,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    population_id bigint,
    updated_by integer,
    common_name_id bigint,
    accession_id integer,
    stock_id integer
);


ALTER TABLE phenome.individual OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: individual_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_alias (
    individual_alias_id integer NOT NULL,
    alias text NOT NULL,
    individual_id integer NOT NULL,
    preferred boolean DEFAULT false,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.individual_alias OWNER TO postgres;

--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_alias_individual_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_alias_individual_alias_id_seq OWNER TO postgres;

--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_alias_individual_alias_id_seq OWNED BY phenome.individual_alias.individual_alias_id;


SET default_with_oids = false;

--
-- Name: individual_allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_allele (
    individual_allele_id integer NOT NULL,
    individual_id bigint NOT NULL,
    allele_id bigint NOT NULL,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.individual_allele OWNER TO postgres;

--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_allele_individual_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_allele_individual_allele_id_seq OWNER TO postgres;

--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_allele_individual_allele_id_seq OWNED BY phenome.individual_allele.individual_allele_id;


--
-- Name: individual_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_dbxref (
    individual_dbxref_id integer NOT NULL,
    individual_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.individual_dbxref OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: individual_dbxref_evidence; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_dbxref_evidence (
    individual_dbxref_evidence_id integer NOT NULL,
    individual_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.individual_dbxref_evidence OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_dbxref_evidence_history (
    individual_dbxref_evidence_history_id integer NOT NULL,
    individual_dbxref_evidence_id integer,
    individual_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.individual_dbxref_evidence_history OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq OWNED BY phenome.individual_dbxref_evidence_history.individual_dbxref_evidence_history_id;


--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq OWNED BY phenome.individual_dbxref_evidence.individual_dbxref_evidence_id;


--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_dbxref_individual_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_dbxref_individual_dbxref_id_seq OWNER TO postgres;

--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_dbxref_individual_dbxref_id_seq OWNED BY phenome.individual_dbxref.individual_dbxref_id;


SET default_with_oids = false;

--
-- Name: individual_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_history (
    individual_history_id integer NOT NULL,
    individual_id integer NOT NULL,
    name character varying(255),
    description text,
    population_id integer,
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now()
);


ALTER TABLE phenome.individual_history OWNER TO postgres;

--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_history_individual_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_history_individual_history_id_seq OWNER TO postgres;

--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_history_individual_history_id_seq OWNED BY phenome.individual_history.individual_history_id;


SET default_with_oids = false;

--
-- Name: individual_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_image (
    individual_image_id integer NOT NULL,
    image_id bigint,
    individual_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.individual_image OWNER TO postgres;

--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_image_individual_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_image_individual_image_id_seq OWNER TO postgres;

--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_image_individual_image_id_seq OWNED BY phenome.individual_image.individual_image_id;


--
-- Name: individual_individual_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_individual_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_individual_id_seq OWNER TO postgres;

--
-- Name: individual_individual_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_individual_id_seq OWNED BY phenome.individual.individual_id;


SET default_with_oids = false;

--
-- Name: individual_locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.individual_locus (
    individual_locus_id integer NOT NULL,
    individual_id bigint NOT NULL,
    locus_id bigint NOT NULL,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.individual_locus OWNER TO postgres;

--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.individual_locus_individual_locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.individual_locus_individual_locus_id_seq OWNER TO postgres;

--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.individual_locus_individual_locus_id_seq OWNED BY phenome.individual_locus.individual_locus_id;


SET default_with_oids = false;

--
-- Name: is_public; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.is_public (
    is_public_id integer NOT NULL,
    population_id integer NOT NULL,
    is_public boolean DEFAULT true,
    owner_id integer NOT NULL
);


ALTER TABLE phenome.is_public OWNER TO postgres;

--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.is_public_is_public_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.is_public_is_public_id_seq OWNER TO postgres;

--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.is_public_is_public_id_seq OWNED BY phenome.is_public.is_public_id;


SET default_with_oids = false;

--
-- Name: locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus (
    locus_id integer NOT NULL,
    locus_name character varying(255) NOT NULL,
    locus_symbol character varying(32) NOT NULL,
    original_symbol character varying(32),
    gene_activity text,
    locus_notes text,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    description text,
    linkage_group character varying(16),
    lg_arm character varying(16),
    common_name_id integer NOT NULL,
    updated_by integer,
    locus character varying(24) DEFAULT NULL::character varying,
    organism_id integer,
    CONSTRAINT chk_lg_arm CHECK ((((lg_arm)::text = 'short'::text) OR ((lg_arm)::text = 'long'::text) OR ((lg_arm)::text = ''::text)))
);


ALTER TABLE phenome.locus OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: locus2locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus2locus (
    locus2locus_id integer NOT NULL,
    subject_id bigint,
    object_id bigint,
    relationship_id bigint,
    evidence_id bigint,
    reference_id bigint,
    sp_person_id bigint,
    obsolete boolean DEFAULT false,
    modified_date timestamp with time zone,
    create_date timestamp with time zone DEFAULT now()
);


ALTER TABLE phenome.locus2locus OWNER TO postgres;

--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus2locus_locus2locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus2locus_locus2locus_id_seq OWNER TO postgres;

--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus2locus_locus2locus_id_seq OWNED BY phenome.locus2locus.locus2locus_id;


SET default_with_oids = false;

--
-- Name: locus_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_alias (
    locus_alias_id integer NOT NULL,
    alias text NOT NULL,
    locus_id integer NOT NULL,
    preferred boolean DEFAULT false,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.locus_alias OWNER TO postgres;

--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_alias_locus_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_alias_locus_alias_id_seq OWNER TO postgres;

--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_alias_locus_alias_id_seq OWNED BY phenome.locus_alias.locus_alias_id;


--
-- Name: locus_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_dbxref (
    locus_dbxref_id integer NOT NULL,
    locus_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.locus_dbxref OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: locus_dbxref_evidence; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_dbxref_evidence (
    locus_dbxref_evidence_id integer NOT NULL,
    locus_dbxref_id integer,
    relationship_type_id integer,
    evidence_code_id integer,
    evidence_description_id integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.locus_dbxref_evidence OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_dbxref_evidence_history (
    locus_dbxref_evidence_history_id integer NOT NULL,
    locus_dbxref_evidence_id integer,
    locus_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.locus_dbxref_evidence_history OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq OWNED BY phenome.locus_dbxref_evidence_history.locus_dbxref_evidence_history_id;


--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq OWNED BY phenome.locus_dbxref_evidence.locus_dbxref_evidence_id;


--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_dbxref_locus_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_dbxref_locus_dbxref_id_seq OWNER TO postgres;

--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_dbxref_locus_dbxref_id_seq OWNED BY phenome.locus_dbxref.locus_dbxref_id;


SET default_with_oids = false;

--
-- Name: locus_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_history (
    locus_history_id integer NOT NULL,
    locus_id integer NOT NULL,
    locus_name character varying(255),
    locus_symbol character varying(32),
    original_symbol character varying(32),
    gene_activity text,
    locus_description text,
    locus_notes text,
    linkage_group character varying(16),
    lg_arm character varying(16),
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    CONSTRAINT locus_history_lg_arm_check CHECK ((((lg_arm)::text = 'short'::text) OR ((lg_arm)::text = 'long'::text) OR ((lg_arm)::text = ''::text)))
);


ALTER TABLE phenome.locus_history OWNER TO postgres;

--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_history_locus_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_history_locus_history_id_seq OWNER TO postgres;

--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_history_locus_history_id_seq OWNED BY phenome.locus_history.locus_history_id;


SET default_with_oids = false;

--
-- Name: locus_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_image (
    locus_image_id integer NOT NULL,
    image_id bigint,
    locus_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    display_order integer DEFAULT 50
);


ALTER TABLE phenome.locus_image OWNER TO postgres;

--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_image_locus_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_image_locus_image_id_seq OWNER TO postgres;

--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_image_locus_image_id_seq OWNED BY phenome.locus_image.locus_image_id;


--
-- Name: locus_locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_locus_id_seq OWNER TO postgres;

--
-- Name: locus_locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_locus_id_seq OWNED BY phenome.locus.locus_id;


SET default_with_oids = false;

--
-- Name: locus_marker; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_marker (
    locus_marker_id integer NOT NULL,
    locus_id integer NOT NULL,
    marker_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.locus_marker OWNER TO postgres;

--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_marker_locus_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_marker_locus_marker_id_seq OWNER TO postgres;

--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_marker_locus_marker_id_seq OWNED BY phenome.locus_marker.locus_marker_id;


SET default_with_oids = false;

--
-- Name: locus_owner; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_owner (
    locus_owner_id integer NOT NULL,
    locus_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    granted_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.locus_owner OWNER TO postgres;

--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_owner_locus_owner_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_owner_locus_owner_id_seq OWNER TO postgres;

--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_owner_locus_owner_id_seq OWNED BY phenome.locus_owner.locus_owner_id;


--
-- Name: locus_pub_ranking; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_pub_ranking (
    locus_id integer,
    pub_id integer,
    rank real,
    match_type text,
    headline text
);


ALTER TABLE phenome.locus_pub_ranking OWNER TO postgres;

--
-- Name: locus_pub_ranking_validate; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_pub_ranking_validate (
    locus_id integer,
    pub_id integer,
    validate character varying(18)
);


ALTER TABLE phenome.locus_pub_ranking_validate OWNER TO postgres;

--
-- Name: locus_registry; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_registry (
    locus_registry_id integer NOT NULL,
    locus_id integer,
    registry_id integer,
    sp_person_id integer NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.locus_registry OWNER TO postgres;

--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_registry_locus_registry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_registry_locus_registry_id_seq OWNER TO postgres;

--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_registry_locus_registry_id_seq OWNED BY phenome.locus_registry.locus_registry_id;


SET default_with_oids = false;

--
-- Name: locus_unigene; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locus_unigene (
    locus_unigene_id integer NOT NULL,
    locus_id integer NOT NULL,
    unigene_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.locus_unigene OWNER TO postgres;

--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locus_unigene_locus_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locus_unigene_locus_unigene_id_seq OWNER TO postgres;

--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locus_unigene_locus_unigene_id_seq OWNED BY phenome.locus_unigene.locus_unigene_id;


SET default_with_oids = false;

--
-- Name: locusgroup; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locusgroup (
    locusgroup_id integer NOT NULL,
    locusgroup_name character varying(255),
    relationship_id integer,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.locusgroup OWNER TO postgres;

--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locusgroup_locusgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locusgroup_locusgroup_id_seq OWNER TO postgres;

--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locusgroup_locusgroup_id_seq OWNED BY phenome.locusgroup.locusgroup_id;


--
-- Name: locusgroup_member; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.locusgroup_member (
    locusgroup_member_id integer NOT NULL,
    locusgroup_id integer,
    locus_id integer,
    direction character varying(16),
    evidence_id integer,
    reference_id integer,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    CONSTRAINT locusgroup_member_direction_check CHECK ((((direction)::text = 'subject'::text) OR ((direction)::text = 'object'::text) OR ((direction)::text = ''::text)))
);


ALTER TABLE phenome.locusgroup_member OWNER TO postgres;

--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.locusgroup_member_locusgroup_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.locusgroup_member_locusgroup_member_id_seq OWNER TO postgres;

--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.locusgroup_member_locusgroup_member_id_seq OWNED BY phenome.locusgroup_member.locusgroup_member_id;


--
-- Name: nd_experiment_md_files; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.nd_experiment_md_files (
    nd_experiment_md_files_id integer NOT NULL,
    nd_experiment_id bigint,
    file_id bigint
);


ALTER TABLE phenome.nd_experiment_md_files OWNER TO postgres;

--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq OWNED BY phenome.nd_experiment_md_files.nd_experiment_md_files_id;


--
-- Name: phenotype_user_trait; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.phenotype_user_trait (
    phenotype_user_trait_id integer NOT NULL,
    user_trait_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE phenome.phenotype_user_trait OWNER TO postgres;

--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.phenotype_user_trait_phenotype_user_trait_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.phenotype_user_trait_phenotype_user_trait_id_seq OWNER TO postgres;

--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.phenotype_user_trait_phenotype_user_trait_id_seq OWNED BY phenome.phenotype_user_trait.phenotype_user_trait_id;


SET default_with_oids = false;

--
-- Name: polymorphic_fragment; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.polymorphic_fragment (
    polymorphic_fragment_id integer NOT NULL,
    genotype_id bigint,
    flanking_marker1_id bigint,
    flanking_marker2_id bigint,
    zygocity character varying(15),
    linkage_group text,
    type text,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE phenome.polymorphic_fragment OWNER TO postgres;

--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.polymorphic_fragment_polymorphic_fragment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.polymorphic_fragment_polymorphic_fragment_id_seq OWNER TO postgres;

--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.polymorphic_fragment_polymorphic_fragment_id_seq OWNED BY phenome.polymorphic_fragment.polymorphic_fragment_id;


--
-- Name: population; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.population (
    population_id integer NOT NULL,
    name character varying(100),
    description text,
    person_id integer,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    background_accession_id bigint,
    obsolete boolean DEFAULT false,
    cross_type_id integer,
    female_parent_id integer,
    male_parent_id integer,
    recurrent_parent_id integer,
    donor_parent_id integer,
    comment text,
    web_uploaded boolean,
    common_name_id integer,
    stock_id integer
);


ALTER TABLE phenome.population OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: population_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.population_dbxref (
    population_dbxref_id integer NOT NULL,
    population_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE phenome.population_dbxref OWNER TO postgres;

--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.population_dbxref_population_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.population_dbxref_population_dbxref_id_seq OWNER TO postgres;

--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.population_dbxref_population_dbxref_id_seq OWNED BY phenome.population_dbxref.population_dbxref_id;


--
-- Name: population_population_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.population_population_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.population_population_id_seq OWNER TO postgres;

--
-- Name: population_population_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.population_population_id_seq OWNED BY phenome.population.population_id;


--
-- Name: pub_curator; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.pub_curator (
    pub_curator_id integer NOT NULL,
    pub_id integer,
    sp_person_id integer,
    status character varying(32),
    date_stored timestamp with time zone DEFAULT now(),
    date_curated timestamp with time zone,
    curated_by integer,
    assigned_to integer
);


ALTER TABLE phenome.pub_curator OWNER TO postgres;

--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.pub_curator_pub_curator_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.pub_curator_pub_curator_id_seq OWNER TO postgres;

--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.pub_curator_pub_curator_id_seq OWNED BY phenome.pub_curator.pub_curator_id;


--
-- Name: registry; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.registry (
    registry_id integer NOT NULL,
    symbol character varying(32) NOT NULL,
    name character varying(255) NOT NULL,
    description text NOT NULL,
    origin character varying(32),
    sp_person_id integer NOT NULL,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    status character varying(32),
    CONSTRAINT registry_status_check CHECK ((((status)::text = 'registered'::text) OR ((status)::text = 'active'::text) OR ((status)::text = 'inactive'::text) OR ((status)::text = 'deleted'::text) OR ((status)::text = 'obsolete'::text)))
);


ALTER TABLE phenome.registry OWNER TO postgres;

--
-- Name: registry_registry_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.registry_registry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.registry_registry_id_seq OWNER TO postgres;

--
-- Name: registry_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.registry_registry_id_seq OWNED BY phenome.registry.registry_id;


--
-- Name: stock_allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.stock_allele (
    stock_allele_id integer NOT NULL,
    stock_id integer NOT NULL,
    allele_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE phenome.stock_allele OWNER TO postgres;

--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.stock_allele_stock_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.stock_allele_stock_allele_id_seq OWNER TO postgres;

--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.stock_allele_stock_allele_id_seq OWNED BY phenome.stock_allele.stock_allele_id;


--
-- Name: stock_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.stock_image (
    stock_image_id integer NOT NULL,
    stock_id integer NOT NULL,
    image_id integer NOT NULL,
    metadata_id integer,
    display_order integer DEFAULT 50
);


ALTER TABLE phenome.stock_image OWNER TO postgres;

--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.stock_image_stock_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.stock_image_stock_image_id_seq OWNER TO postgres;

--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.stock_image_stock_image_id_seq OWNED BY phenome.stock_image.stock_image_id;


--
-- Name: stock_owner; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.stock_owner (
    stock_owner_id integer NOT NULL,
    stock_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE phenome.stock_owner OWNER TO postgres;

--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.stock_owner_stock_owner_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.stock_owner_stock_owner_id_seq OWNER TO postgres;

--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.stock_owner_stock_owner_id_seq OWNED BY phenome.stock_owner.stock_owner_id;


SET default_with_oids = false;

--
-- Name: tomato_il_bin; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.tomato_il_bin (
    il_bin_id integer NOT NULL,
    chromosome integer NOT NULL,
    name character varying(32) NOT NULL,
    n_marker_n integer,
    n_marker_s integer,
    s_marker_n integer,
    s_marker_s integer,
    CONSTRAINT tomato_il_bin_chromosome_check CHECK (((chromosome >= 1) AND (chromosome <= 12)))
);


ALTER TABLE phenome.tomato_il_bin OWNER TO postgres;

--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.tomato_il_bin_il_bin_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.tomato_il_bin_il_bin_id_seq OWNER TO postgres;

--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.tomato_il_bin_il_bin_id_seq OWNED BY phenome.tomato_il_bin.il_bin_id;


--
-- Name: tomato_term; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.tomato_term (
    tomato_term_id integer NOT NULL,
    tomato_term_name character varying(255) DEFAULT ''::character varying NOT NULL,
    tomato_term_type character varying(55) DEFAULT ''::character varying NOT NULL,
    tomato_term_acc character varying(255) DEFAULT ''::character varying NOT NULL,
    is_obsolete bigint DEFAULT (0)::bigint NOT NULL,
    is_root bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE phenome.tomato_term OWNER TO postgres;

--
-- Name: tomato_term2term; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.tomato_term2term (
    tomato_term2term_id integer NOT NULL,
    relationship_type_id bigint DEFAULT (0)::bigint NOT NULL,
    term1_id bigint DEFAULT (0)::bigint NOT NULL,
    term2_id bigint DEFAULT (0)::bigint NOT NULL,
    complete bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE phenome.tomato_term2term OWNER TO postgres;

--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.tomato_term2term_tomato_term2term_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.tomato_term2term_tomato_term2term_id_seq OWNER TO postgres;

--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.tomato_term2term_tomato_term2term_id_seq OWNED BY phenome.tomato_term2term.tomato_term2term_id;


--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.tomato_term_tomato_term_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.tomato_term_tomato_term_id_seq OWNER TO postgres;

--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.tomato_term_tomato_term_id_seq OWNED BY phenome.tomato_term.tomato_term_id;


SET default_with_oids = false;

--
-- Name: unit; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.unit (
    unit_id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE phenome.unit OWNER TO postgres;

--
-- Name: unit_unit_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.unit_unit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.unit_unit_id_seq OWNER TO postgres;

--
-- Name: unit_unit_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.unit_unit_id_seq OWNED BY phenome.unit.unit_id;


--
-- Name: user_trait; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.user_trait (
    user_trait_id integer NOT NULL,
    cv_id integer,
    name character varying NOT NULL,
    definition text,
    dbxref_id integer,
    sp_person_id integer
);


ALTER TABLE phenome.user_trait OWNER TO postgres;

--
-- Name: user_trait_unit; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.user_trait_unit (
    user_trait_unit_id integer NOT NULL,
    user_trait_id integer NOT NULL,
    unit_id integer,
    population_id integer NOT NULL
);


ALTER TABLE phenome.user_trait_unit OWNER TO postgres;

--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.user_trait_unit_user_trait_unit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.user_trait_unit_user_trait_unit_id_seq OWNER TO postgres;

--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.user_trait_unit_user_trait_unit_id_seq OWNED BY phenome.user_trait_unit.user_trait_unit_id;


--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.user_trait_user_trait_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.user_trait_user_trait_id_seq OWNER TO postgres;

--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.user_trait_user_trait_id_seq OWNED BY phenome.user_trait.user_trait_id;


SET default_with_oids = false;

--
-- Name: variant; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenome.variant (
    variant_id integer NOT NULL,
    locus_id integer NOT NULL,
    variant_name character varying(255),
    variant_gi integer,
    variant_notes text
);


ALTER TABLE phenome.variant OWNER TO postgres;

--
-- Name: variant_variant_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenome.variant_variant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenome.variant_variant_id_seq OWNER TO postgres;

--
-- Name: variant_variant_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenome.variant_variant_id_seq OWNED BY phenome.variant.variant_id;


--
-- Name: ba_plausibility; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.ba_plausibility (
    bap_id bigint NOT NULL,
    bac_assoc_id bigint,
    map_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE physical.ba_plausibility OWNER TO postgres;

--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.ba_plausibility_bap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.ba_plausibility_bap_id_seq OWNER TO postgres;

--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.ba_plausibility_bap_id_seq OWNED BY physical.ba_plausibility.bap_id;


--
-- Name: bac_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bac_associations (
    bac_assoc_id integer NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    bac_contig_id bigint DEFAULT (0)::bigint NOT NULL,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE physical.bac_associations OWNER TO postgres;

--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.bac_associations_bac_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.bac_associations_bac_assoc_id_seq OWNER TO postgres;

--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.bac_associations_bac_assoc_id_seq OWNED BY physical.bac_associations.bac_assoc_id;


--
-- Name: bac_consensus_sequences; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bac_consensus_sequences (
    consensus_seq_id integer NOT NULL,
    fasta_sequence text NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    tracefile character varying(64) DEFAULT ''::character varying NOT NULL,
    consensus_seq_name character varying(32),
    length bigint DEFAULT (0)::bigint NOT NULL,
    includes_sp6_end smallint,
    includes_t7_end smallint
);


ALTER TABLE physical.bac_consensus_sequences OWNER TO postgres;

--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.bac_consensus_sequences_consensus_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.bac_consensus_sequences_consensus_seq_id_seq OWNER TO postgres;

--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.bac_consensus_sequences_consensus_seq_id_seq OWNED BY physical.bac_consensus_sequences.consensus_seq_id;


--
-- Name: bac_contigs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bac_contigs (
    bac_contig_id integer NOT NULL,
    contig_name character varying(16) DEFAULT ''::character varying NOT NULL,
    fpc_version bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE physical.bac_contigs OWNER TO postgres;

--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.bac_contigs_bac_contig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.bac_contigs_bac_contig_id_seq OWNER TO postgres;

--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.bac_contigs_bac_contig_id_seq OWNED BY physical.bac_contigs.bac_contig_id;


--
-- Name: bac_end_sequences; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bac_end_sequences (
    end_seq_id integer NOT NULL,
    end_id smallint DEFAULT (0)::smallint NOT NULL,
    fasta_sequence text NOT NULL,
    tracefile character varying(64) DEFAULT ''::character varying NOT NULL,
    length bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE physical.bac_end_sequences OWNER TO postgres;

--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.bac_end_sequences_end_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.bac_end_sequences_end_seq_id_seq OWNER TO postgres;

--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.bac_end_sequences_end_seq_id_seq OWNED BY physical.bac_end_sequences.end_seq_id;


--
-- Name: bac_marker_matches; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bac_marker_matches (
    marker_id integer,
    alias text,
    confidence_id integer,
    lg_id integer,
    lg_name text,
    lg_order integer,
    "position" numeric(8,5),
    bac_id integer,
    arizona_clone_name character varying(32),
    cornell_clone_name character varying(16),
    estimated_length bigint,
    number_of_bacs bigint,
    contig_name character varying(16),
    fpc_version bigint,
    association_type text,
    CONSTRAINT bac_marker_matches_association_type_check CHECK (((association_type = 'computational'::text) OR (association_type = 'overgo'::text) OR (association_type = 'manual'::text)))
);


ALTER TABLE physical.bac_marker_matches OWNER TO postgres;

--
-- Name: bacs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.bacs (
    bac_id integer NOT NULL,
    cornell_clone_name character varying(16) DEFAULT ''::character varying NOT NULL,
    arizona_clone_name character varying(32) DEFAULT ''::character varying NOT NULL,
    species_id bigint DEFAULT (0)::bigint NOT NULL,
    sp6_end_seq_id bigint,
    t7_end_seq_id bigint,
    genbank_accession character varying(32),
    bad_clone smallint DEFAULT (0)::smallint NOT NULL,
    estimated_length bigint,
    library_id integer
);


ALTER TABLE physical.bacs OWNER TO postgres;

--
-- Name: bacs_bac_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.bacs_bac_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.bacs_bac_id_seq OWNER TO postgres;

--
-- Name: bacs_bac_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.bacs_bac_id_seq OWNED BY physical.bacs.bac_id;


--
-- Name: computational_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.computational_associations (
    computational_assoc_id integer NOT NULL,
    marker_id integer NOT NULL,
    clone_id integer NOT NULL,
    e_value double precision,
    q_start bigint,
    q_end bigint,
    s_start bigint,
    s_end bigint,
    identity double precision,
    score double precision,
    parameters text
);


ALTER TABLE physical.computational_associations OWNER TO postgres;

--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.computational_associations_computational_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.computational_associations_computational_assoc_id_seq OWNER TO postgres;

--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.computational_associations_computational_assoc_id_seq OWNED BY physical.computational_associations.computational_assoc_id;


--
-- Name: contig_sizes; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.contig_sizes (
    contig_size_id bigint NOT NULL,
    bac_contig_id bigint,
    contig_size double precision
);


ALTER TABLE physical.contig_sizes OWNER TO postgres;

--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.contig_sizes_contig_size_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.contig_sizes_contig_size_id_seq OWNER TO postgres;

--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.contig_sizes_contig_size_id_seq OWNED BY physical.contig_sizes.contig_size_id;


--
-- Name: deprecated_probes; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.deprecated_probes (
    dp_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint
);


ALTER TABLE physical.deprecated_probes OWNER TO postgres;

--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.deprecated_probes_dp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.deprecated_probes_dp_id_seq OWNER TO postgres;

--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.deprecated_probes_dp_id_seq OWNED BY physical.deprecated_probes.dp_id;


--
-- Name: fpc_data; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.fpc_data (
    fpc_datum_id integer NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    bac_name character varying(32) DEFAULT ''::character varying NOT NULL,
    gel_number character varying(16),
    map_ctg_left character varying(16),
    map_ctg_right character varying(16),
    map_ends_left double precision,
    map_ends_right double precision,
    creation_date date,
    modification_date date,
    bac_contig_id_left integer,
    bac_contig_id_right integer
);


ALTER TABLE physical.fpc_data OWNER TO postgres;

--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.fpc_data_fpc_datum_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.fpc_data_fpc_datum_id_seq OWNER TO postgres;

--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.fpc_data_fpc_datum_id_seq OWNED BY physical.fpc_data.fpc_datum_id;


--
-- Name: fpc_version; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.fpc_version (
    fpc_version integer NOT NULL,
    updated_on date DEFAULT ('now'::text)::date NOT NULL,
    updated_by bigint DEFAULT (0)::bigint NOT NULL,
    fpcfile character varying(32),
    current smallint,
    comments text
);


ALTER TABLE physical.fpc_version OWNER TO postgres;

--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.fpc_version_fpc_version_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.fpc_version_fpc_version_seq OWNER TO postgres;

--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.fpc_version_fpc_version_seq OWNED BY physical.fpc_version.fpc_version;


--
-- Name: manual_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.manual_associations (
    manual_assoc_id integer NOT NULL,
    marker_id integer NOT NULL,
    clone_id integer NOT NULL,
    pubmed_id integer,
    sp_person_id integer,
    comment text
);


ALTER TABLE physical.manual_associations OWNER TO postgres;

--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.manual_associations_manual_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.manual_associations_manual_assoc_id_seq OWNER TO postgres;

--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.manual_associations_manual_assoc_id_seq OWNED BY physical.manual_associations.manual_assoc_id;


--
-- Name: oa_plausibility; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.oa_plausibility (
    oap_id bigint NOT NULL,
    overgo_assoc_id bigint,
    map_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE physical.oa_plausibility OWNER TO postgres;

--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.oa_plausibility_oap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.oa_plausibility_oap_id_seq OWNER TO postgres;

--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.oa_plausibility_oap_id_seq OWNED BY physical.oa_plausibility.oap_id;


--
-- Name: overgo_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.overgo_associations (
    overgo_assoc_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE physical.overgo_associations OWNER TO postgres;

--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.overgo_associations_overgo_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.overgo_associations_overgo_assoc_id_seq OWNER TO postgres;

--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.overgo_associations_overgo_assoc_id_seq OWNED BY physical.overgo_associations.overgo_assoc_id;


--
-- Name: overgo_plates; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.overgo_plates (
    plate_id integer NOT NULL,
    plate_number bigint DEFAULT (0)::bigint NOT NULL,
    row_max character varying(4) DEFAULT ''::character varying NOT NULL,
    col_max bigint DEFAULT (0)::bigint NOT NULL,
    plate_size bigint,
    empty_wells bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE physical.overgo_plates OWNER TO postgres;

--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.overgo_plates_plate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.overgo_plates_plate_id_seq OWNER TO postgres;

--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.overgo_plates_plate_id_seq OWNED BY physical.overgo_plates.plate_id;


--
-- Name: overgo_results; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.overgo_results (
    result_id integer NOT NULL,
    overgo_plate_id bigint,
    overgo_pool character(2),
    bac_id bigint
);


ALTER TABLE physical.overgo_results OWNER TO postgres;

--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.overgo_results_result_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.overgo_results_result_id_seq OWNER TO postgres;

--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.overgo_results_result_id_seq OWNED BY physical.overgo_results.result_id;


--
-- Name: overgo_version; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.overgo_version (
    overgo_version integer NOT NULL,
    updated_on timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    updated_by bigint,
    current smallint,
    comments text
);


ALTER TABLE physical.overgo_version OWNER TO postgres;

--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.overgo_version_overgo_version_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.overgo_version_overgo_version_seq OWNER TO postgres;

--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.overgo_version_overgo_version_seq OWNED BY physical.overgo_version.overgo_version;


--
-- Name: plausible_bacs_in_all_contigs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.plausible_bacs_in_all_contigs (
    overgo_assoc_id integer,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint,
    overgo_plausible smallint,
    overgo_map bigint,
    bac_assoc_id integer,
    bac_contig_id integer,
    contig_name character varying(16),
    fpc_version bigint,
    bac_plausible smallint,
    bac_map bigint
);


ALTER TABLE physical.plausible_bacs_in_all_contigs OWNER TO postgres;

--
-- Name: probe_markers; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.probe_markers (
    overgo_probe_id integer NOT NULL,
    overgo_plate_id bigint,
    overgo_plate_row character varying(4),
    overgo_plate_col bigint,
    marker_id bigint,
    overgo_seq_a character varying(30),
    overgo_seq_b character varying(30),
    overgo_seq_ab character varying(30),
    marker_seq text
);


ALTER TABLE physical.probe_markers OWNER TO postgres;

--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.probe_markers_overgo_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.probe_markers_overgo_probe_id_seq OWNER TO postgres;

--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.probe_markers_overgo_probe_id_seq OWNED BY physical.probe_markers.overgo_probe_id;


--
-- Name: species; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.species (
    species_id integer NOT NULL,
    short_name character varying(32),
    long_name character varying(64)
);


ALTER TABLE physical.species OWNER TO postgres;

--
-- Name: species_species_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.species_species_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.species_species_id_seq OWNER TO postgres;

--
-- Name: species_species_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.species_species_id_seq OWNED BY physical.species.species_id;


--
-- Name: tentative_association_conflict_groups; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.tentative_association_conflict_groups (
    tacg_id integer NOT NULL,
    conflict_group_id bigint,
    tentative_assoc_id bigint
);


ALTER TABLE physical.tentative_association_conflict_groups OWNER TO postgres;

--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.tentative_association_conflict_groups_tacg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.tentative_association_conflict_groups_tacg_id_seq OWNER TO postgres;

--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.tentative_association_conflict_groups_tacg_id_seq OWNED BY physical.tentative_association_conflict_groups.tacg_id;


--
-- Name: tentative_overgo_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.tentative_overgo_associations (
    tentative_assoc_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint
);


ALTER TABLE physical.tentative_overgo_associations OWNER TO postgres;

--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.tentative_overgo_associations_tentative_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.tentative_overgo_associations_tentative_assoc_id_seq OWNER TO postgres;

--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.tentative_overgo_associations_tentative_assoc_id_seq OWNED BY physical.tentative_overgo_associations.tentative_assoc_id;


--
-- Name: users; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE physical.users (
    user_id integer NOT NULL,
    full_name character varying(64) DEFAULT ''::character varying NOT NULL,
    net_id character varying(16) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE physical.users OWNER TO postgres;

--
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE physical.users_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE physical.users_user_id_seq OWNER TO postgres;

--
-- Name: users_user_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE physical.users_user_id_seq OWNED BY physical.users.user_id;


SET default_with_oids = false;

--
-- Name: stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock (
    stock_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer,
    name character varying(255),
    uniquename text NOT NULL,
    description text,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.stock OWNER TO postgres;

--
-- Name: TABLE stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock IS 'Any stock can be globally identified by the
combination of organism, uniquename and stock type. A stock is the physical entities, either living or preserved, held by collections. Stocks belong to a collection; they have IDs, type, organism, description and may have a genotype.';


--
-- Name: COLUMN stock.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock.dbxref_id IS 'The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.';


--
-- Name: COLUMN stock.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock.organism_id IS 'The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.';


--
-- Name: COLUMN stock.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock.name IS 'The name is a human-readable local name for a stock.';


--
-- Name: COLUMN stock.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock.description IS 'The description is the genetic description provided in the stock list.';


--
-- Name: COLUMN stock.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock.type_id IS 'The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic DNA, preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.';


--
-- Name: accessions; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessions AS
 SELECT stock.stock_id AS accession_id,
    stock.uniquename AS accession_name
   FROM public.stock
  WHERE ((stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'accession'::text))) AND (stock.is_obsolete = false))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE public.accessions OWNER TO postgres;

--
-- Name: nd_experiment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment (
    nd_experiment_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.nd_experiment OWNER TO postgres;

--
-- Name: nd_experiment_phenotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_phenotype (
    nd_experiment_phenotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_phenotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_phenotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_phenotype IS 'Linking table: experiments to the phenotypes they produce. There is a one-to-one relationship between an experiment and a phenotype since each phenotype record should point to one experiment. Add a new experiment_id for each phenotype record.';


--
-- Name: nd_experiment_project; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_project (
    nd_experiment_project_id integer NOT NULL,
    project_id integer NOT NULL,
    nd_experiment_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_project OWNER TO postgres;

--
-- Name: nd_experiment_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_stock (
    nd_experiment_stock_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_stock IS 'Part of a stock or a clone of a stock that is used in an experiment';


--
-- Name: COLUMN nd_experiment_stock.stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_experiment_stock.stock_id IS 'stock used in the extraction or the corresponding stock for the clone';


--
-- Name: nd_geolocation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_geolocation (
    nd_geolocation_id integer NOT NULL,
    description character varying(255),
    latitude real,
    longitude real,
    geodetic_datum character varying(32),
    altitude real
);


ALTER TABLE public.nd_geolocation OWNER TO postgres;

--
-- Name: TABLE nd_geolocation; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_geolocation IS 'The geo-referencable location of the stock. NOTE: This entity is subject to change as a more general and possibly more OpenGIS-compliant geolocation module may be introduced into Chado.';


--
-- Name: COLUMN nd_geolocation.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocation.description IS 'A textual representation of the location, if this is the original georeference. Optional if the original georeference is available in lat/long coordinates.';


--
-- Name: COLUMN nd_geolocation.latitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocation.latitude IS 'The decimal latitude coordinate of the georeference, using positive and negative sign to indicate N and S, respectively.';


--
-- Name: COLUMN nd_geolocation.longitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocation.longitude IS 'The decimal longitude coordinate of the georeference, using positive and negative sign to indicate E and W, respectively.';


--
-- Name: COLUMN nd_geolocation.geodetic_datum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocation.geodetic_datum IS 'The geodetic system on which the geo-reference coordinates are based. For geo-references measured between 1984 and 2010, this will typically be WGS84.';


--
-- Name: COLUMN nd_geolocation.altitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocation.altitude IS 'The altitude (elevation) of the location in meters. If the altitude is only known as a range, this is the average, and altitude_dev will hold half of the width of the range.';


--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenotype (
    phenotype_id integer NOT NULL,
    uniquename text NOT NULL,
    observable_id integer,
    attr_id integer,
    value character varying,
    cvalue_id integer,
    assay_id integer,
    individual_id integer,
    sp_person_id integer,
    name text,
    create_date timestamp without time zone DEFAULT now(),
    collect_date timestamp without time zone,
    operator character varying(128)
);


ALTER TABLE public.phenotype OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: project; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project (
    project_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.project OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: project_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project_relationship (
    project_relationship_id integer NOT NULL,
    subject_project_id integer NOT NULL,
    object_project_id integer NOT NULL,
    type_id integer NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.project_relationship OWNER TO postgres;

--
-- Name: TABLE project_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.project_relationship IS 'A project can be composed of several smaller scale projects';


--
-- Name: COLUMN project_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.project_relationship.type_id IS 'The type of relationship being stated, such as "is part of".';


--
-- Name: projectprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.projectprop (
    projectprop_id integer NOT NULL,
    project_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.projectprop OWNER TO postgres;

--
-- Name: stock_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_relationship (
    stock_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.stock_relationship OWNER TO postgres;

--
-- Name: COLUMN stock_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_relationship.subject_id IS 'stock_relationship.subject_id is the subject of the subj-predicate-obj sentence. This is typically the substock.';


--
-- Name: COLUMN stock_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_relationship.object_id IS 'stock_relationship.object_id is the object of the subj-predicate-obj sentence. This is typically the container stock.';


--
-- Name: COLUMN stock_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_relationship.type_id IS 'stock_relationship.type_id is relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN stock_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_relationship.value IS 'stock_relationship.value is for additional notes or comments.';


--
-- Name: COLUMN stock_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_relationship.rank IS 'stock_relationship.rank is the ordering of subject stocks with respect to the object stock may be important where rank is used to order these; starts from zero.';


--
-- Name: materialized_phenoview; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.materialized_phenoview AS
 SELECT breeding_program.project_id AS breeding_program_id,
    nd_experiment.nd_geolocation_id AS location_id,
    projectprop.value AS year_id,
    trial.project_id AS trial_id,
    accession.stock_id AS accession_id,
    seedlot.stock_id AS seedlot_id,
    stock.stock_id,
    phenotype.phenotype_id,
    phenotype.cvalue_id AS trait_id
   FROM ((((((((((((((public.stock accession
     LEFT JOIN public.stock_relationship ON (((accession.stock_id = stock_relationship.object_id) AND (stock_relationship.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE (((cvterm.name)::text = 'plot_of'::text) OR ((cvterm.name)::text = 'plant_of'::text)))))))
     LEFT JOIN public.stock ON (((stock_relationship.subject_id = stock.stock_id) AND (stock.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE (((cvterm.name)::text = 'plot'::text) OR ((cvterm.name)::text = 'plant'::text)))))))
     LEFT JOIN public.stock_relationship seedlot_relationship ON (((stock.stock_id = seedlot_relationship.subject_id) AND (seedlot_relationship.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seed transaction'::text))))))
     LEFT JOIN public.stock seedlot ON (((seedlot_relationship.object_id = seedlot.stock_id) AND (seedlot.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot'::text))))))
     LEFT JOIN public.nd_experiment_stock ON (((stock.stock_id = nd_experiment_stock.stock_id) AND (nd_experiment_stock.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = ANY ((ARRAY['phenotyping_experiment'::character varying, 'field_layout'::character varying])::text[])))))))
     LEFT JOIN public.nd_experiment ON (((nd_experiment_stock.nd_experiment_id = nd_experiment.nd_experiment_id) AND (nd_experiment.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = ANY ((ARRAY['phenotyping_experiment'::character varying, 'field_layout'::character varying])::text[])))))))
     FULL JOIN public.nd_geolocation ON ((nd_experiment.nd_geolocation_id = nd_geolocation.nd_geolocation_id)))
     LEFT JOIN public.nd_experiment_project ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_project.nd_experiment_id)))
     FULL JOIN public.project trial ON ((nd_experiment_project.project_id = trial.project_id)))
     LEFT JOIN public.project_relationship ON (((trial.project_id = project_relationship.subject_project_id) AND (project_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'breeding_program_trial_relationship'::text))))))
     FULL JOIN public.project breeding_program ON ((project_relationship.object_project_id = breeding_program.project_id)))
     LEFT JOIN public.projectprop ON (((trial.project_id = projectprop.project_id) AND (projectprop.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'project year'::text))))))
     LEFT JOIN public.nd_experiment_phenotype ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_phenotype.nd_experiment_id)))
     LEFT JOIN public.phenotype ON ((nd_experiment_phenotype.phenotype_id = phenotype.phenotype_id)))
  WHERE (accession.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'accession'::text)))
  ORDER BY breeding_program.project_id, nd_experiment.nd_geolocation_id, trial.project_id, accession.stock_id, seedlot.stock_id, stock.stock_id, phenotype.phenotype_id, phenotype.cvalue_id
  WITH NO DATA;


ALTER TABLE public.materialized_phenoview OWNER TO postgres;

--
-- Name: accessionsxbreeding_programs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxbreeding_programs AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.breeding_program_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.breeding_program_id
  WITH NO DATA;


ALTER TABLE public.accessionsxbreeding_programs OWNER TO postgres;

--
-- Name: nd_experiment_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_genotype (
    nd_experiment_genotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_genotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_genotype IS 'Linking table: experiments to the genotypes they produce. There is a one-to-one relationship between an experiment and a genotype since each genotype record should point to one experiment. Add a new experiment_id for each genotype record.';


--
-- Name: nd_experiment_protocol; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_protocol (
    nd_experiment_protocol_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    nd_protocol_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_protocol OWNER TO postgres;

--
-- Name: TABLE nd_experiment_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_protocol IS 'Linking table: experiments to the protocols they involve.';


--
-- Name: nd_protocol; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_protocol (
    nd_protocol_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    description character varying(255) DEFAULT NULL::character varying,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.nd_protocol OWNER TO postgres;

--
-- Name: TABLE nd_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_protocol IS 'A protocol can be anything that is done as part of the experiment.';


--
-- Name: COLUMN nd_protocol.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_protocol.name IS 'The protocol name.';


--
-- Name: materialized_genoview; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.materialized_genoview AS
 SELECT stock.stock_id AS accession_id,
    nd_experiment_protocol.nd_protocol_id AS genotyping_protocol_id,
    nd_experiment_genotype.genotype_id
   FROM ((((public.stock
     LEFT JOIN public.nd_experiment_stock ON ((stock.stock_id = nd_experiment_stock.stock_id)))
     LEFT JOIN public.nd_experiment_protocol ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_protocol.nd_experiment_id)))
     LEFT JOIN public.nd_protocol ON ((nd_experiment_protocol.nd_protocol_id = nd_protocol.nd_protocol_id)))
     LEFT JOIN public.nd_experiment_genotype ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_genotype.nd_experiment_id)))
  WHERE (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'accession'::text)))
  GROUP BY stock.stock_id, nd_experiment_protocol.nd_protocol_id, nd_experiment_genotype.genotype_id
  WITH NO DATA;


ALTER TABLE public.materialized_genoview OWNER TO postgres;

--
-- Name: accessionsxgenotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxgenotyping_protocols AS
 SELECT materialized_genoview.accession_id,
    materialized_genoview.genotyping_protocol_id
   FROM public.materialized_genoview
  GROUP BY materialized_genoview.accession_id, materialized_genoview.genotyping_protocol_id
  WITH NO DATA;


ALTER TABLE public.accessionsxgenotyping_protocols OWNER TO postgres;

--
-- Name: accessionsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxlocations AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.location_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE public.accessionsxlocations OWNER TO postgres;

--
-- Name: accessionsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxplants AS
 SELECT materialized_phenoview.accession_id,
    stock.stock_id AS plant_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY materialized_phenoview.accession_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.accessionsxplants OWNER TO postgres;

--
-- Name: accessionsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxplots AS
 SELECT materialized_phenoview.accession_id,
    stock.stock_id AS plot_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY materialized_phenoview.accession_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.accessionsxplots OWNER TO postgres;

--
-- Name: accessionsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxseedlots AS
 SELECT materialized_phenoview.accession_id,
    stock.stock_id AS seedlot_id
   FROM ((public.materialized_phenoview
     LEFT JOIN public.stock_relationship seedlot_relationship ON (((materialized_phenoview.accession_id = seedlot_relationship.subject_id) AND (seedlot_relationship.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'collection_of'::text))))))
     LEFT JOIN public.stock ON (((seedlot_relationship.object_id = stock.stock_id) AND (stock.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot'::text))))))
  GROUP BY materialized_phenoview.accession_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.accessionsxseedlots OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvterm_relationship (
    cvterm_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.cvterm_relationship OWNER TO postgres;

--
-- Name: TABLE cvterm_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvterm_relationship IS 'A relationship linking two
cvterms. Each cvterm_relationship constitutes an edge in the graph
defined by the collection of cvterms and cvterm_relationships. The
meaning of the cvterm_relationship depends on the definition of the
cvterm R refered to by type_id. However, in general the definitions
are such that the statement all SUBJs REL some OBJ is true. The
cvterm_relationship statement is about the subject, not the
object. For example "insect wing part_of thorax"';


--
-- Name: COLUMN cvterm_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm_relationship.type_id IS 'The nature of the
relationship between subject and object. Note that relations are also
housed in the cvterm table, typically from the OBO relationship
ontology, although other relationship types are allowed';


--
-- Name: COLUMN cvterm_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm_relationship.subject_id IS 'the subject of
the subj-predicate-obj sentence. The cvterm_relationship is about the
subject. In a graph, this typically corresponds to the child node';


--
-- Name: COLUMN cvterm_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm_relationship.object_id IS 'the object of the
subj-predicate-obj sentence. The cvterm_relationship refers to the
object. In a graph, this typically corresponds to the parent node';


--
-- Name: accessionsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxtrait_components AS
 SELECT materialized_phenoview.accession_id,
    trait_component.cvterm_id AS trait_component_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY materialized_phenoview.accession_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.accessionsxtrait_components OWNER TO postgres;

--
-- Name: accessionsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxtraits AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trait_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.accessionsxtraits OWNER TO postgres;

--
-- Name: accessionsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxtrial_designs AS
 SELECT materialized_phenoview.accession_id,
    trialdesign.value AS trial_design_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_phenoview.accession_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.accessionsxtrial_designs OWNER TO postgres;

--
-- Name: cv; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cv (
    cv_id integer NOT NULL,
    name character varying(255) NOT NULL,
    definition text
);


ALTER TABLE public.cv OWNER TO postgres;

--
-- Name: TABLE cv; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cv IS 'A controlled vocabulary or ontology. A cv is
composed of cvterms (aka terms, classes, types, universals - relations
and properties are also stored in cvterm)) and the relationships
between them';


--
-- Name: COLUMN cv.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cv.name IS 'The name of the ontology. This
corresponds to the obo-format -namespace-. cv names uniquely identify
the cv. In obo file format, the cv.name is known as the namespace';


--
-- Name: COLUMN cv.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cv.definition IS 'A text description of the criteria for
membership of this ontology';


--
-- Name: accessionsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxtrial_types AS
 SELECT materialized_phenoview.accession_id,
    trialterm.cvterm_id AS trial_type_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_phenoview.accession_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.accessionsxtrial_types OWNER TO postgres;

--
-- Name: accessionsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxtrials AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trial_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.accessionsxtrials OWNER TO postgres;

--
-- Name: accessionsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.accessionsxyears AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.accessionsxyears OWNER TO postgres;

--
-- Name: all_gs_traits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.all_gs_traits AS
 SELECT observable.cvterm_id,
    observable.name
   FROM (public.phenotype me
     JOIN public.cvterm observable ON ((observable.cvterm_id = me.observable_id)))
  GROUP BY observable.cvterm_id, observable.name
  WITH NO DATA;


ALTER TABLE public.all_gs_traits OWNER TO postgres;

--
-- Name: analysis; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analysis (
    analysis_id integer NOT NULL,
    name character varying(255),
    description text,
    program character varying(255) NOT NULL,
    programversion character varying(255) NOT NULL,
    algorithm character varying(255),
    sourcename character varying(255),
    sourceversion character varying(255),
    sourceuri text,
    timeexecuted timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE public.analysis OWNER TO postgres;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.analysis_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysis_analysis_id_seq OWNER TO postgres;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.analysis_analysis_id_seq OWNED BY public.analysis.analysis_id;


--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analysisfeature (
    analysisfeature_id integer NOT NULL,
    feature_id integer NOT NULL,
    analysis_id integer NOT NULL,
    rawscore double precision,
    normscore double precision,
    significance double precision,
    identity double precision
);


ALTER TABLE public.analysisfeature OWNER TO postgres;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.analysisfeature_analysisfeature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisfeature_analysisfeature_id_seq OWNER TO postgres;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.analysisfeature_analysisfeature_id_seq OWNED BY public.analysisfeature.analysisfeature_id;


--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analysisprop (
    analysisprop_id integer NOT NULL,
    analysis_id integer NOT NULL,
    type_id integer NOT NULL,
    value text
);


ALTER TABLE public.analysisprop OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.analysisprop_analysisprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisprop_analysisprop_id_seq OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.analysisprop_analysisprop_id_seq OWNED BY public.analysisprop.analysisprop_id;


--
-- Name: ara_annotation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_annotation (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    genbank_gi bigint,
    gb_prot_id character varying(16),
    gb_mrna_id character varying(16),
    uniprot_id character varying(128),
    tair_annotation text,
    symbol character varying(256),
    aliases text,
    localization text,
    process text,
    function text,
    localization_evidence text,
    process_evidence text,
    function_evidence text,
    fulltext tsvector
);


ALTER TABLE public.ara_annotation OWNER TO postgres;

--
-- Name: ara_domain; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_domain (
    agi character varying(16),
    locus character varying(16),
    prot_length integer,
    app_name character varying(32),
    dom_id character varying(12),
    dom_desc character varying(32),
    dom_start integer,
    dom_end integer,
    e_value character varying(16),
    interpro_id character varying(12),
    interpro_dom text,
    run_date date
);


ALTER TABLE public.ara_domain OWNER TO postgres;

--
-- Name: ara_evidef; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_evidef (
    code character varying(10),
    description text,
    longdescription text
);


ALTER TABLE public.ara_evidef OWNER TO postgres;

--
-- Name: ara_family; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_family (
    locus character varying(128),
    super_gene_family character varying(128),
    gene_family character varying(128),
    gene_name character varying(128),
    gene_alias character varying(128),
    bac_locus character varying(128),
    gbi character varying(64),
    gb_locus character varying(128),
    tigr_annotation text,
    expert_annotation text,
    criteria text,
    people_id character varying(128),
    org_id character varying(128),
    pmid character varying(128),
    url text,
    url_name text
);


ALTER TABLE public.ara_family OWNER TO postgres;

--
-- Name: ara_gfp_ms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_gfp_ms (
    agi character varying(16),
    locus character varying(16),
    gfp_all text,
    ms_all text
);


ALTER TABLE public.ara_gfp_ms OWNER TO postgres;

--
-- Name: ara_go_term; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_go_term (
    go_id character varying(12) NOT NULL,
    alt_id character varying(12),
    num_child integer,
    num_desc integer,
    namespace character varying(32),
    name text,
    is_a text,
    children text,
    path text,
    definition text
);


ALTER TABLE public.ara_go_term OWNER TO postgres;

--
-- Name: ara_interactome_all; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_interactome_all (
    locus character varying(16),
    locus_interact character varying(16),
    source character varying(32),
    database character varying(32),
    type character varying(32),
    author character varying(32),
    pmid character varying(64)
);


ALTER TABLE public.ara_interactome_all OWNER TO postgres;

--
-- Name: ara_interactome_unique; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_interactome_unique (
    locus character varying(16),
    locus_interact character varying(16)
);


ALTER TABLE public.ara_interactome_unique OWNER TO postgres;

--
-- Name: ara_intron; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_intron (
    agi character varying(16),
    locus character varying(16),
    intron_num smallint,
    lbound integer,
    rbound integer,
    sequence text
);


ALTER TABLE public.ara_intron OWNER TO postgres;

--
-- Name: ara_map; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_map (
    locus character varying(16),
    chromosome character(1),
    direction character(1),
    startpos integer,
    endpos integer
);


ALTER TABLE public.ara_map OWNER TO postgres;

--
-- Name: ara_myristoylation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_myristoylation (
    locus character varying(12),
    evidence character varying(8)
);


ALTER TABLE public.ara_myristoylation OWNER TO postgres;

--
-- Name: ara_pmidlink; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_pmidlink (
    pmid bigint,
    url text
);


ALTER TABLE public.ara_pmidlink OWNER TO postgres;

--
-- Name: ara_prefix_info; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_prefix_info (
    prefix character varying(12),
    genecount integer
);


ALTER TABLE public.ara_prefix_info OWNER TO postgres;

--
-- Name: ara_properties; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_properties (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    weight integer,
    isoelectric real,
    transmemcount smallint,
    transmempos text,
    genomepos character varying(64),
    interactioncount integer,
    introncount smallint
);


ALTER TABLE public.ara_properties OWNER TO postgres;

--
-- Name: ara_scop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_scop (
    agi character varying(16),
    locus character varying(16),
    lbound integer,
    rbound integer,
    e_value character varying(32),
    scop_id integer,
    description text,
    structure_type character varying(16)
);


ALTER TABLE public.ara_scop OWNER TO postgres;

--
-- Name: ara_sequence; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_sequence (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    protein text,
    cds text,
    cdna text,
    genomic text,
    utr5 text,
    utr3 text
);


ALTER TABLE public.ara_sequence OWNER TO postgres;

--
-- Name: ara_signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_signalp (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    nn_cmax real,
    nn_cpos integer,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos integer,
    nn_yd character(1),
    nn_smax real,
    nn_spos integer,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos integer,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1)
);


ALTER TABLE public.ara_signalp OWNER TO postgres;

--
-- Name: ara_targetp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_targetp (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    location character(1),
    rc integer,
    c_score real,
    m_score real,
    s_score real,
    o_score real
);


ALTER TABLE public.ara_targetp OWNER TO postgres;

--
-- Name: ara_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ara_users (
    id integer NOT NULL,
    username character varying(32),
    password character varying(32),
    hotlist text,
    lists text,
    email character varying(32),
    confirm_email boolean
);


ALTER TABLE public.ara_users OWNER TO postgres;

--
-- Name: ara_users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ara_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ara_users_id_seq OWNER TO postgres;

--
-- Name: ara_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ara_users_id_seq OWNED BY public.ara_users.id;


SET default_with_oids = false;

--
-- Name: blastwatch_queries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blastwatch_queries (
    blastwatch_queries_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    sequence text NOT NULL,
    program character varying(10) NOT NULL,
    database character varying(50) NOT NULL,
    matrix character varying(10) NOT NULL,
    evalue double precision NOT NULL,
    num_results integer DEFAULT 0 NOT NULL,
    new_results boolean DEFAULT false NOT NULL
);


ALTER TABLE public.blastwatch_queries OWNER TO postgres;

--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.blastwatch_queries_blastwatch_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blastwatch_queries_blastwatch_queries_id_seq OWNER TO postgres;

--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.blastwatch_queries_blastwatch_queries_id_seq OWNED BY public.blastwatch_queries.blastwatch_queries_id;


--
-- Name: blastwatch_results; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blastwatch_results (
    blastwatch_results_id integer NOT NULL,
    blastwatch_queries_id integer NOT NULL,
    query_id character varying(50) NOT NULL,
    subject_id character varying(50) NOT NULL,
    subject_start integer NOT NULL,
    subject_end integer NOT NULL,
    evalue double precision NOT NULL,
    score numeric NOT NULL
);


ALTER TABLE public.blastwatch_results OWNER TO postgres;

--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.blastwatch_results_blastwatch_results_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blastwatch_results_blastwatch_results_id_seq OWNER TO postgres;

--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.blastwatch_results_blastwatch_results_id_seq OWNED BY public.blastwatch_results.blastwatch_results_id;


--
-- Name: breeding_programs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programs AS
 SELECT project.project_id AS breeding_program_id,
    project.name AS breeding_program_name
   FROM (public.project
     JOIN public.projectprop USING (project_id))
  WHERE (projectprop.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'breeding_program'::text)))
  GROUP BY project.project_id, project.name
  WITH NO DATA;


ALTER TABLE public.breeding_programs OWNER TO postgres;

--
-- Name: breeding_programsxgenotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxgenotyping_protocols AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_genoview.genotyping_protocol_id
   FROM (public.materialized_phenoview
     JOIN public.materialized_genoview USING (accession_id))
  GROUP BY materialized_phenoview.breeding_program_id, materialized_genoview.genotyping_protocol_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxgenotyping_protocols OWNER TO postgres;

--
-- Name: breeding_programsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxlocations AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.location_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxlocations OWNER TO postgres;

--
-- Name: breeding_programsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxplants AS
 SELECT materialized_phenoview.breeding_program_id,
    stock.stock_id AS plant_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY materialized_phenoview.breeding_program_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxplants OWNER TO postgres;

--
-- Name: breeding_programsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxplots AS
 SELECT materialized_phenoview.breeding_program_id,
    stock.stock_id AS plot_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY materialized_phenoview.breeding_program_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxplots OWNER TO postgres;

--
-- Name: breeding_programsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxseedlots AS
 SELECT materialized_phenoview.breeding_program_id,
    nd_experiment_stock.stock_id AS seedlot_id
   FROM (((public.materialized_phenoview
     LEFT JOIN public.nd_experiment_project ON ((materialized_phenoview.breeding_program_id = nd_experiment_project.project_id)))
     LEFT JOIN public.nd_experiment ON (((nd_experiment_project.nd_experiment_id = nd_experiment.nd_experiment_id) AND (nd_experiment.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot_experiment'::text))))))
     LEFT JOIN public.nd_experiment_stock ON ((nd_experiment.nd_experiment_id = nd_experiment_stock.nd_experiment_id)))
  GROUP BY materialized_phenoview.breeding_program_id, nd_experiment_stock.stock_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxseedlots OWNER TO postgres;

--
-- Name: breeding_programsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxtrait_components AS
 SELECT materialized_phenoview.breeding_program_id,
    trait_component.cvterm_id AS trait_component_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY materialized_phenoview.breeding_program_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxtrait_components OWNER TO postgres;

--
-- Name: breeding_programsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxtraits AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trait_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxtraits OWNER TO postgres;

--
-- Name: breeding_programsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxtrial_designs AS
 SELECT materialized_phenoview.breeding_program_id,
    trialdesign.value AS trial_design_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_phenoview.breeding_program_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.breeding_programsxtrial_designs OWNER TO postgres;

--
-- Name: breeding_programsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxtrial_types AS
 SELECT materialized_phenoview.breeding_program_id,
    trialterm.cvterm_id AS trial_type_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_phenoview.breeding_program_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxtrial_types OWNER TO postgres;

--
-- Name: breeding_programsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxtrials AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trial_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxtrials OWNER TO postgres;

--
-- Name: breeding_programsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.breeding_programsxyears AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.breeding_programsxyears OWNER TO postgres;

--
-- Name: bug; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bug (
    bug_id integer NOT NULL,
    sp_person_id bigint,
    obsolete boolean,
    create_date timestamp with time zone,
    created_by bigint,
    modified_date timestamp with time zone,
    updated_by bigint,
    description text,
    status character varying(20),
    severity character varying(20),
    affected_page text,
    action text
);


ALTER TABLE public.bug OWNER TO postgres;

--
-- Name: bug_bug_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.bug_bug_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bug_bug_id_seq OWNER TO postgres;

--
-- Name: bug_bug_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.bug_bug_id_seq OWNED BY public.bug.bug_id;


--
-- Name: contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contact (
    contact_id integer NOT NULL,
    type_id integer,
    name character varying(255) NOT NULL,
    description character varying(255)
);


ALTER TABLE public.contact OWNER TO postgres;

--
-- Name: TABLE contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.contact IS 'Model persons, institutes, groups, organizations, etc.';


--
-- Name: COLUMN contact.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.contact.type_id IS 'What type of contact is this?  E.g. "person", "lab".';


--
-- Name: contact_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.contact_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_contact_id_seq OWNER TO postgres;

--
-- Name: contact_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.contact_contact_id_seq OWNED BY public.contact.contact_id;


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contact_relationship (
    contact_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.contact_relationship OWNER TO postgres;

--
-- Name: TABLE contact_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.contact_relationship IS 'Model relationships between contacts';


--
-- Name: COLUMN contact_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.contact_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node.';


--
-- Name: COLUMN contact_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.contact_relationship.object_id IS 'The object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node.';


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.contact_relationship_contact_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_relationship_contact_relationship_id_seq OWNER TO postgres;

--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.contact_relationship_contact_relationship_id_seq OWNED BY public.contact_relationship.contact_relationship_id;


--
-- Name: cv_cv_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cv_cv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cv_cv_id_seq OWNER TO postgres;

--
-- Name: cv_cv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cv_cv_id_seq OWNED BY public.cv.cv_id;


--
-- Name: cvalue_ids; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvalue_ids (
    cvalue_id integer,
    phenotype_id integer
);


ALTER TABLE public.cvalue_ids OWNER TO postgres;

--
-- Name: cvprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvprop (
    cvprop_id integer NOT NULL,
    cv_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvprop OWNER TO postgres;

--
-- Name: TABLE cvprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvprop IS 'Additional extensible properties can be attached to a cv using this table.  A notable example would be the cv version';


--
-- Name: COLUMN cvprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvprop_cvprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvprop_cvprop_id_seq OWNER TO postgres;

--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvprop_cvprop_id_seq OWNED BY public.cvprop.cvprop_id;


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvterm_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_cvterm_id_seq OWNER TO postgres;

--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvterm_cvterm_id_seq OWNED BY public.cvterm.cvterm_id;


SET default_with_oids = false;

--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvterm_dbxref (
    cvterm_dbxref_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_for_definition integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvterm_dbxref IS 'In addition to the primary
identifier (cvterm.dbxref_id) a cvterm can have zero or more secondary
identifiers/dbxrefs, which may refer to records in external
databases. The exact semantics of cvterm_dbxref are not fixed. For
example: the dbxref could be a pubmed ID that is pertinent to the
cvterm, or it could be an equivalent or similar term in another
ontology. For example, GO cvterms are typically linked to InterPro
IDs, even though the nature of the relationship between them is
largely one of statistical association. The dbxref may be have data
records attached in the same database instance, or it could be a
"hanging" dbxref pointing to some external database. NOTE: If the
desired objective is to link two cvterms together, and the nature of
the relation is known and holds for all instances of the subject
cvterm then consider instead using cvterm_relationship together with a
well-defined relation.';


--
-- Name: COLUMN cvterm_dbxref.is_for_definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvterm_dbxref.is_for_definition IS 'A
cvterm.definition should be supported by one or more references. If
this column is true, the dbxref is not for a term in an external db -
it is a dbxref for provenance information for the definition';


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvterm_dbxref_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_dbxref_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvterm_dbxref_cvterm_dbxref_id_seq OWNED BY public.cvterm_dbxref.cvterm_dbxref_id;


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvterm_relationship_cvterm_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_relationship_cvterm_relationship_id_seq OWNER TO postgres;

--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvterm_relationship_cvterm_relationship_id_seq OWNED BY public.cvterm_relationship.cvterm_relationship_id;


--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvtermpath (
    cvtermpath_id integer NOT NULL,
    type_id integer,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    cv_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE public.cvtermpath OWNER TO postgres;

--
-- Name: TABLE cvtermpath; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvtermpath IS 'The reflexive transitive closure of
the cvterm_relationship relation. For a full discussion, see the file
populating-cvtermpath.txt in this directory';


--
-- Name: COLUMN cvtermpath.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermpath.type_id IS 'The relationship type that
this is a closure over. If null, then this is a closure over ALL
relationship types. If non-null, then this references a relationship
cvterm - note that the closure will apply to both this relationship
AND the OBO_REL:is_a (subclass) relationship';


--
-- Name: COLUMN cvtermpath.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermpath.cv_id IS 'Closures will mostly be within
one cv. If the closure of a relationship traverses a cv, then this
refers to the cv of the object_id cvterm';


--
-- Name: COLUMN cvtermpath.pathdistance; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermpath.pathdistance IS 'The number of steps
required to get from the subject cvterm to the object cvterm, counting
from zero (reflexive relationship)';


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvtermpath_cvtermpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermpath_cvtermpath_id_seq OWNER TO postgres;

--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvtermpath_cvtermpath_id_seq OWNED BY public.cvtermpath.cvtermpath_id;


--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvtermprop (
    cvtermprop_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvtermprop OWNER TO postgres;

--
-- Name: TABLE cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvtermprop IS 'Additional extensible properties can be attached to a cvterm using this table. Corresponds to -AnnotationProperty- in W3C OWL format';


--
-- Name: COLUMN cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermprop.type_id IS 'The name of the property/slot is a cvterm. The meaning of the property is defined in that cvterm';


--
-- Name: COLUMN cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation';


--
-- Name: COLUMN cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermprop.rank IS 'Property-Value ordering. Any
cvterm can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvtermprop_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermprop_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvtermprop_cvtermprop_id_seq OWNED BY public.cvtermprop.cvtermprop_id;


--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cvtermsynonym (
    cvtermsynonym_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    synonym character varying(1024) NOT NULL,
    type_id integer
);


ALTER TABLE public.cvtermsynonym OWNER TO postgres;

--
-- Name: TABLE cvtermsynonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cvtermsynonym IS 'A cvterm actually represents a
distinct class or concept. A concept can be refered to by different
phrases or names. In addition to the primary name (cvterm.name) there
can be a number of alternative aliases or synonyms. For example, -T
cell- as a synonym for -T lymphocyte-';


--
-- Name: COLUMN cvtermsynonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cvtermsynonym.type_id IS 'A synonym can be exact,
narrow or borader than';


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cvtermsynonym_cvtermsynonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermsynonym_cvtermsynonym_id_seq OWNER TO postgres;

--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cvtermsynonym_cvtermsynonym_id_seq OWNED BY public.cvtermsynonym.cvtermsynonym_id;


SET default_with_oids = false;

--
-- Name: cxgn_bac_pipeline_genbank_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cxgn_bac_pipeline_genbank_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE public.cxgn_bac_pipeline_genbank_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cxgn_bac_pipeline_genbank_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cxgn_bac_pipeline_genbank_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cxgn_bac_pipeline_genbank_log_id_seq OWNED BY public.cxgn_bac_pipeline_genbank_log.id;


--
-- Name: cxgn_bac_pipeline_loading_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cxgn_bac_pipeline_loading_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE public.cxgn_bac_pipeline_loading_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cxgn_bac_pipeline_loading_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cxgn_bac_pipeline_loading_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cxgn_bac_pipeline_loading_log_id_seq OWNED BY public.cxgn_bac_pipeline_loading_log.id;


--
-- Name: cxgn_bac_pipeline_processing_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cxgn_bac_pipeline_processing_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE public.cxgn_bac_pipeline_processing_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cxgn_bac_pipeline_processing_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cxgn_bac_pipeline_processing_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cxgn_bac_pipeline_processing_log_id_seq OWNED BY public.cxgn_bac_pipeline_processing_log.id;


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cxgn_indexedlog_test_feel_free_to_delete_me (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80),
    pid integer NOT NULL,
    search_key character varying(80),
    message text
);


ALTER TABLE public.cxgn_indexedlog_test_feel_free_to_delete_me OWNER TO postgres;

--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cxgn_indexedlog_test_feel_free_to_delete_me_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cxgn_indexedlog_test_feel_free_to_delete_me_id_seq OWNER TO postgres;

--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cxgn_indexedlog_test_feel_free_to_delete_me_id_seq OWNED BY public.cxgn_indexedlog_test_feel_free_to_delete_me.id;


--
-- Name: db_db_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.db_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.db_db_id_seq OWNER TO postgres;

--
-- Name: db_db_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.db_db_id_seq OWNED BY public.db.db_id;


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxref_dbxref_id_seq OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.dbxref_dbxref_id_seq OWNED BY public.dbxref.dbxref_id;


SET default_with_oids = false;

--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dbxrefprop (
    dbxrefprop_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.dbxrefprop OWNER TO postgres;

--
-- Name: TABLE dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.dbxrefprop IS 'Metadata about a dbxref. Note that this is not defined in the dbxref module, as it depends on the cvterm table. This table has a structure analagous to cvtermprop';


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.dbxrefprop_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxrefprop_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.dbxrefprop_dbxrefprop_id_seq OWNED BY public.dbxrefprop.dbxrefprop_id;


SET default_with_oids = false;

--
-- Name: environment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.environment (
    environment_id integer NOT NULL,
    uniquename text NOT NULL,
    description text
);


ALTER TABLE public.environment OWNER TO postgres;

--
-- Name: TABLE environment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.environment IS 'The environmental component of a phenotype description.';


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.environment_cvterm (
    environment_cvterm_id integer NOT NULL,
    environment_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.environment_cvterm OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.environment_cvterm_environment_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_cvterm_environment_cvterm_id_seq OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.environment_cvterm_environment_cvterm_id_seq OWNED BY public.environment_cvterm.environment_cvterm_id;


--
-- Name: environment_environment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.environment_environment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_environment_id_seq OWNER TO postgres;

--
-- Name: environment_environment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.environment_environment_id_seq OWNED BY public.environment.environment_id;


SET default_with_oids = false;

--
-- Name: enzyme_restriction_sites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.enzyme_restriction_sites (
    enzyme_restriction_sites_id integer NOT NULL,
    restriction_site text,
    enzyme_id integer
);


ALTER TABLE public.enzyme_restriction_sites OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.enzyme_restriction_sites_enzyme_restriction_sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNED BY public.enzyme_restriction_sites.enzyme_restriction_sites_id;


--
-- Name: family; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.family (
    family_id bigint NOT NULL,
    family_build_id bigint,
    family_annotation text,
    tree_log_file_location character varying,
    tree_file_location character varying,
    tree_taxa_number integer,
    tree_overlap_length integer,
    family_nr integer,
    member_count integer
);


ALTER TABLE sgn.family OWNER TO postgres;

--
-- Name: family; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.family AS
 SELECT family.family_id,
    family.family_build_id,
    family.family_annotation,
    family.tree_log_file_location,
    family.tree_file_location,
    family.tree_taxa_number,
    family.tree_overlap_length,
    family.family_nr,
    family.member_count
   FROM sgn.family;


ALTER TABLE public.family OWNER TO postgres;

--
-- Name: family_build; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.family_build (
    family_build_id bigint NOT NULL,
    group_id bigint,
    build_nr bigint,
    i_value double precision,
    build_date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    status character(1) DEFAULT 'C'::bpchar
);


ALTER TABLE sgn.family_build OWNER TO postgres;

--
-- Name: family_build; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.family_build AS
 SELECT family_build.family_build_id,
    family_build.group_id,
    family_build.build_nr,
    family_build.i_value,
    family_build.build_date,
    family_build.status
   FROM sgn.family_build;


ALTER TABLE public.family_build OWNER TO postgres;

--
-- Name: family_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.family_member (
    family_member_id bigint NOT NULL,
    cds_id bigint,
    organism_group_id bigint,
    family_id bigint,
    database_name character varying(20),
    sequence_name character varying(50),
    alignment_seq text
);


ALTER TABLE sgn.family_member OWNER TO postgres;

--
-- Name: family_member; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.family_member AS
 SELECT family_member.family_member_id,
    family_member.cds_id,
    family_member.organism_group_id,
    family_member.family_id,
    family_member.database_name,
    family_member.sequence_name,
    family_member.alignment_seq
   FROM sgn.family_member;


ALTER TABLE public.family_member OWNER TO postgres;

--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_cvterm_dbxref (
    feature_cvterm_dbxref_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_cvterm_dbxref IS 'Additional dbxrefs for an association. Rows in the feature_cvterm table may be backed up by dbxrefs. For example, a feature_cvterm association that was inferred via a protein-protein interaction may be backed by by refering to the dbxref for the alternate protein. Corresponds to the WITH column in a GO gene association file (but can also be used for other analagous associations). See http://www.geneontology.org/doc/GO.annotation.shtml#file for more details';


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNED BY public.feature_cvterm_dbxref.feature_cvterm_dbxref_id;


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_cvterm_feature_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_feature_cvterm_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_cvterm_feature_cvterm_id_seq OWNED BY public.feature_cvterm.feature_cvterm_id;


--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_cvterm_pub (
    feature_cvterm_pub_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_pub OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_cvterm_pub IS 'Secondary pubs for an
association. Each feature_cvterm association is supported by a single
primary publication. Additional secondary pubs can be added using this
linking table (in a GO gene association file, these corresponding to
any IDs after the pipe symbol in the publications column';


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_cvterm_pub_feature_cvterm_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_pub_feature_cvterm_pub_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_cvterm_pub_feature_cvterm_pub_id_seq OWNED BY public.feature_cvterm_pub.feature_cvterm_pub_id;


--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_cvtermprop (
    feature_cvtermprop_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvtermprop OWNER TO postgres;

--
-- Name: TABLE feature_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_cvtermprop IS 'Extensible properties for
feature to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the featureprop table for
meanings of type_id, value and rank';


--
-- Name: COLUMN feature_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv';


--
-- Name: COLUMN feature_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_cvtermprop.rank IS 'Property-Value
ordering. Any feature_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_cvtermprop_feature_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvtermprop_feature_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_cvtermprop_feature_cvtermprop_id_seq OWNED BY public.feature_cvtermprop.feature_cvtermprop_id;


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_dbxref_feature_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_dbxref_feature_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_dbxref_feature_dbxref_id_seq OWNED BY public.feature_dbxref.feature_dbxref_id;


--
-- Name: feature_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_feature_id_seq OWNER TO postgres;

--
-- Name: feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_feature_id_seq OWNED BY public.feature.feature_id;


SET default_with_oids = false;

--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_genotype (
    feature_genotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    genotype_id integer NOT NULL,
    chromosome_id integer,
    rank integer NOT NULL,
    cgroup integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.feature_genotype OWNER TO postgres;

--
-- Name: COLUMN feature_genotype.chromosome_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_genotype.chromosome_id IS 'A feature of SO type "chromosome".';


--
-- Name: COLUMN feature_genotype.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_genotype.rank IS 'rank can be used for
n-ploid organisms or to preserve order.';


--
-- Name: COLUMN feature_genotype.cgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_genotype.cgroup IS 'Spatially distinguishable
group. group can be used for distinguishing the chromosomal groups,
for example (RNAi products and so on can be treated as different
groups, as they do not fall on a particular chromosome).';


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_genotype_feature_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_genotype_feature_genotype_id_seq OWNER TO postgres;

--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_genotype_feature_genotype_id_seq OWNED BY public.feature_genotype.feature_genotype_id;


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_pub_feature_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_pub_feature_pub_id_seq OWNER TO postgres;

--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_pub_feature_pub_id_seq OWNED BY public.feature_pub.feature_pub_id;


SET default_with_oids = false;

--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_relationship (
    feature_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationship OWNER TO postgres;

--
-- Name: TABLE feature_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_relationship IS 'features can be arranged in
graphs, eg exon part_of transcript part_of gene; translation madeby
transcript if type is thought of as a verb, each arc makes a statement
[SUBJECT VERB OBJECT] object can also be thought of as parent
(containing feature), and subject as child (contained feature or
subfeature) -- we include the relationship rank/order, because even
though most of the time we can order things implicitly by sequence
coordinates, we cant always do this - eg transpliced genes.  its also
useful for quickly getting implicit introns';


--
-- Name: COLUMN feature_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationship.subject_id IS 'the subject of the subj-predicate-obj sentence. This is typically the subfeature';


--
-- Name: COLUMN feature_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationship.object_id IS 'the object of the subj-predicate-obj sentence. This is typically the container feature';


--
-- Name: COLUMN feature_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationship.type_id IS 'relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed. The most common relationship type is OBO_REL:part_of. Valid relationship types are constrained by the Sequence Ontology';


--
-- Name: COLUMN feature_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationship.value IS 'Additional notes/comments';


--
-- Name: COLUMN feature_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationship.rank IS 'The ordering of subject features with respect to the object feature may be important (for example, exon ordering on a transcript - not always derivable if you take trans spliced genes into consideration). rank is used to order these; starts from zero';


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_relationship_feature_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_feature_relationship_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_relationship_feature_relationship_id_seq OWNED BY public.feature_relationship.feature_relationship_id;


--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_relationship_pub (
    feature_relationship_pub_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationship_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_relationship_pub IS 'Provenance. Attach optional evidence to a feature_relationship in the form of a publication';


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_relationship_pub_feature_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_pub_feature_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_relationship_pub_feature_relationship_pub_id_seq OWNED BY public.feature_relationship_pub.feature_relationship_pub_id;


--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_relationshipprop (
    feature_relationshipprop_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationshipprop OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_relationshipprop IS 'Extensible properties
for feature_relationships. Analagous structure to featureprop. This
table is largely optional and not used with a high frequency. Typical
scenarios may be if one wishes to attach additional data to a
feature_relationship - for example to say that the
feature_relationship is only true in certain contexts';


--
-- Name: COLUMN feature_relationshipprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationshipprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Currently there is no standard ontology for
feature_relationship property types';


--
-- Name: COLUMN feature_relationshipprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationshipprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_relationshipprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.feature_relationshipprop.rank IS 'Property-Value
ordering. Any feature_relationship can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_relationshipprop_feature_relationshipprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_feature_relationshipprop_id_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_relationshipprop_feature_relationshipprop_id_seq OWNED BY public.feature_relationshipprop.feature_relationshipprop_id;


--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature_relationshipprop_pub (
    feature_relationshipprop_pub_id integer NOT NULL,
    feature_relationshipprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationshipprop_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.feature_relationshipprop_pub IS 'Provenance for feature_relationshipprop';


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNED BY public.feature_relationshipprop_pub.feature_relationshipprop_pub_id;


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_synonym_feature_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_synonym_feature_synonym_id_seq OWNER TO postgres;

--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feature_synonym_feature_synonym_id_seq OWNED BY public.feature_synonym.feature_synonym_id;


--
-- Name: feature_uniquename_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feature_uniquename_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_uniquename_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.featureloc_featureloc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_featureloc_id_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.featureloc_featureloc_id_seq OWNED BY public.featureloc.featureloc_id;


--
-- Name: featureloc_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.featureloc_pub (
    featureloc_pub_id integer NOT NULL,
    featureloc_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureloc_pub OWNER TO postgres;

--
-- Name: TABLE featureloc_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.featureloc_pub IS 'Provenance of featureloc. Linking table between featurelocs and publications that mention them';


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.featureloc_pub_featureloc_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_pub_featureloc_pub_id_seq OWNER TO postgres;

--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.featureloc_pub_featureloc_pub_id_seq OWNED BY public.featureloc_pub.featureloc_pub_id;


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.featureprop_featureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_featureprop_id_seq OWNER TO postgres;

--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.featureprop_featureprop_id_seq OWNED BY public.featureprop.featureprop_id;


--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.featureprop_pub (
    featureprop_pub_id integer NOT NULL,
    featureprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureprop_pub OWNER TO postgres;

--
-- Name: TABLE featureprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.featureprop_pub IS 'Provenance. Any featureprop assignment can optionally be supported by a publication';


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.featureprop_pub_featureprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_pub_featureprop_pub_id_seq OWNER TO postgres;

--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.featureprop_pub_featureprop_pub_id_seq OWNED BY public.featureprop_pub.featureprop_pub_id;


--
-- Name: forward_amplicon_sequence_information; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.forward_amplicon_sequence_information (
    organism_name text,
    accession_id text,
    plant_number integer,
    ending text,
    cxgn_production_visible boolean,
    forward_amplicon_sequence_information_id integer NOT NULL
);


ALTER TABLE public.forward_amplicon_sequence_information OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq OWNED BY public.forward_amplicon_sequence_information.forward_amplicon_sequence_information_id;


--
-- Name: forward_amplicon_sequence_markers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.forward_amplicon_sequence_markers (
    marker_name text,
    ending text,
    cxgn_production_visible boolean,
    forward_amplicon_sequence_markers_id integer NOT NULL
);


ALTER TABLE public.forward_amplicon_sequence_markers OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq OWNED BY public.forward_amplicon_sequence_markers.forward_amplicon_sequence_markers_id;


--
-- Name: fpc_band; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_band (
    fpc_band_id integer NOT NULL,
    fpc_fingerprint_id integer NOT NULL,
    fragment_size integer,
    band_position integer,
    CONSTRAINT bandcheck CHECK (((band_position IS NULL) OR (band_position > 0))),
    CONSTRAINT datacheck CHECK (((fragment_size IS NOT NULL) OR (band_position IS NOT NULL))),
    CONSTRAINT fragcheck CHECK (((fragment_size IS NULL) OR (fragment_size > 0)))
);


ALTER TABLE public.fpc_band OWNER TO postgres;

--
-- Name: TABLE fpc_band; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_band IS 'each row is a band in a gel lane or capillary run';


--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_band_fpc_band_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_band_fpc_band_id_seq OWNER TO postgres;

--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_band_fpc_band_id_seq OWNED BY public.fpc_band.fpc_band_id;


SET default_with_oids = false;

--
-- Name: fpc_build; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_build (
    fpc_build_id integer NOT NULL,
    date date NOT NULL,
    file_base text NOT NULL,
    comment text,
    fpc_series_id integer NOT NULL
);


ALTER TABLE public.fpc_build OWNER TO postgres;

--
-- Name: TABLE fpc_build; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_build IS 'each row represents a run of the fpc contig building program, with a result file, linked to a bunch of fingerprints that it uses, and containing a bunch of fpc contigs';


--
-- Name: COLUMN fpc_build.file_base; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.fpc_build.file_base IS 'file basename relative to the base path for keeping fpc data.  the actual filenames are file_base.cor and file_base.fpc';


--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_build_fpc_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_build_fpc_build_id_seq OWNER TO postgres;

--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_build_fpc_build_id_seq OWNED BY public.fpc_build.fpc_build_id;


--
-- Name: fpc_build_fpc_fingerprint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_build_fpc_fingerprint (
    fpc_build_fpc_fingerprint_id bigint NOT NULL,
    fpc_build_id integer,
    fpc_fingerprint_id bigint
);


ALTER TABLE public.fpc_build_fpc_fingerprint OWNER TO postgres;

--
-- Name: TABLE fpc_build_fpc_fingerprint; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_build_fpc_fingerprint IS 'links fpc fingerprints to the builds that use them';


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq OWNER TO postgres;

--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq OWNED BY public.fpc_build_fpc_fingerprint.fpc_build_fpc_fingerprint_id;


--
-- Name: fpc_contig; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_contig (
    fpc_contig_id bigint NOT NULL,
    fpc_build_id integer NOT NULL,
    name character varying(20) NOT NULL
);


ALTER TABLE public.fpc_contig OWNER TO postgres;

--
-- Name: TABLE fpc_contig; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_contig IS 'each row is an contig in an fpc build, linked to clones it contains via  fpc_contig_clone table';


--
-- Name: fpc_contig_clone; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_contig_clone (
    fpc_contig_clone_id bigint NOT NULL,
    fpc_contig_id bigint NOT NULL,
    clone_id bigint NOT NULL,
    plausible boolean DEFAULT true NOT NULL
);


ALTER TABLE public.fpc_contig_clone OWNER TO postgres;

--
-- Name: TABLE fpc_contig_clone; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_contig_clone IS 'links fpc contigs with the clones that are a part of them';


--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_contig_clone_fpc_contig_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_contig_clone_fpc_contig_clone_id_seq OWNER TO postgres;

--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_contig_clone_fpc_contig_clone_id_seq OWNED BY public.fpc_contig_clone.fpc_contig_clone_id;


--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_contig_fpc_contig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_contig_fpc_contig_id_seq OWNER TO postgres;

--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_contig_fpc_contig_id_seq OWNED BY public.fpc_contig.fpc_contig_id;


SET default_with_oids = false;

--
-- Name: fpc_fingerprint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_fingerprint (
    fpc_fingerprint_id integer NOT NULL,
    clone_id integer NOT NULL,
    gel_name character varying(30),
    enzyme_id integer NOT NULL
);


ALTER TABLE public.fpc_fingerprint OWNER TO postgres;

--
-- Name: TABLE fpc_fingerprint; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_fingerprint IS 'each row is a lane in a gel or a single capillary run of a single clone';


--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_fingerprint_fpc_fingerprint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_fingerprint_fpc_fingerprint_id_seq OWNER TO postgres;

--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_fingerprint_fpc_fingerprint_id_seq OWNED BY public.fpc_fingerprint.fpc_fingerprint_id;


--
-- Name: fpc_series; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fpc_series (
    fpc_series_id integer NOT NULL,
    name character varying(50)
);


ALTER TABLE public.fpc_series OWNER TO postgres;

--
-- Name: TABLE fpc_series; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.fpc_series IS 'each row here is one fpc build series, like "China FPC builds".  captures when different fpc builds are different versions of the same build';


--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.fpc_series_fpc_series_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fpc_series_fpc_series_id_seq OWNER TO postgres;

--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.fpc_series_fpc_series_id_seq OWNED BY public.fpc_series.fpc_series_id;


SET default_with_oids = false;

--
-- Name: genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.genotype (
    genotype_id integer NOT NULL,
    name text,
    uniquename text NOT NULL,
    description character varying(255),
    type_id integer NOT NULL,
    create_date timestamp without time zone DEFAULT now()
);


ALTER TABLE public.genotype OWNER TO postgres;

--
-- Name: TABLE genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.genotype IS 'Genetic context. A genotype is defined by a collection of features, mutations, balancers, deficiencies, haplotype blocks, or engineered constructs.';


--
-- Name: COLUMN genotype.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.genotype.name IS 'Optional alternative name for a genotype, 
for display purposes.';


--
-- Name: COLUMN genotype.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.genotype.uniquename IS 'The unique name for a genotype; 
typically derived from the features making up the genotype.';


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotype_genotype_id_seq OWNER TO postgres;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.genotype_genotype_id_seq OWNED BY public.genotype.genotype_id;


--
-- Name: genotypeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.genotypeprop (
    genotypeprop_id integer NOT NULL,
    genotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value jsonb,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.genotypeprop OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.genotypeprop_genotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotypeprop_genotypeprop_id_seq OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.genotypeprop_genotypeprop_id_seq OWNED BY public.genotypeprop.genotypeprop_id;


--
-- Name: genotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocols AS
 SELECT nd_protocol.nd_protocol_id AS genotyping_protocol_id,
    nd_protocol.name AS genotyping_protocol_name
   FROM public.nd_protocol
  GROUP BY nd_protocol.nd_protocol_id, nd_protocol.name
  WITH NO DATA;


ALTER TABLE public.genotyping_protocols OWNER TO postgres;

--
-- Name: genotyping_protocolsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxlocations AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.location_id
   FROM (public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxlocations OWNER TO postgres;

--
-- Name: genotyping_protocolsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxplants AS
 SELECT materialized_genoview.genotyping_protocol_id,
    stock.stock_id AS plant_id
   FROM ((public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY materialized_genoview.genotyping_protocol_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxplants OWNER TO postgres;

--
-- Name: genotyping_protocolsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxplots AS
 SELECT materialized_genoview.genotyping_protocol_id,
    stock.stock_id AS plot_id
   FROM ((public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY materialized_genoview.genotyping_protocol_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxplots OWNER TO postgres;

--
-- Name: genotyping_protocolsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxseedlots AS
 SELECT materialized_genoview.genotyping_protocol_id,
    stock.stock_id AS seedlot_id
   FROM ((public.materialized_genoview
     LEFT JOIN public.stock_relationship seedlot_relationship ON (((materialized_genoview.accession_id = seedlot_relationship.subject_id) AND (seedlot_relationship.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'collection_of'::text))))))
     LEFT JOIN public.stock ON (((seedlot_relationship.object_id = stock.stock_id) AND (stock.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot'::text))))))
  GROUP BY materialized_genoview.genotyping_protocol_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxseedlots OWNER TO postgres;

--
-- Name: genotyping_protocolsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxtrait_components AS
 SELECT materialized_genoview.genotyping_protocol_id,
    trait_component.cvterm_id AS trait_component_id
   FROM ((((public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY materialized_genoview.genotyping_protocol_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxtrait_components OWNER TO postgres;

--
-- Name: genotyping_protocolsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxtraits AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trait_id
   FROM (public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxtraits OWNER TO postgres;

--
-- Name: genotyping_protocolsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxtrial_designs AS
 SELECT materialized_genoview.genotyping_protocol_id,
    trialdesign.value AS trial_design_id
   FROM ((public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_genoview.genotyping_protocol_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxtrial_designs OWNER TO postgres;

--
-- Name: genotyping_protocolsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxtrial_types AS
 SELECT materialized_genoview.genotyping_protocol_id,
    trialterm.cvterm_id AS trial_type_id
   FROM (((public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_genoview.genotyping_protocol_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxtrial_types OWNER TO postgres;

--
-- Name: genotyping_protocolsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxtrials AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trial_id
   FROM (public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxtrials OWNER TO postgres;

--
-- Name: genotyping_protocolsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.genotyping_protocolsxyears AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.year_id
   FROM (public.materialized_genoview
     JOIN public.materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.genotyping_protocolsxyears OWNER TO postgres;

--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.gff3atts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
        CASE
            WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying
            WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying
            ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying
        END AS attribute
   FROM public.cvterm s,
    public.dbxref dbx,
    public.feature_cvterm fs,
    public.db
  WHERE ((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id) AND (db.db_id = dbx.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM public.dbxref s,
    public.feature_dbxref fs,
    public.db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id) AND ((d.name)::text <> 'GFF_source'::text))
UNION ALL
 SELECT f.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM public.synonym s,
    public.feature_synonym fs,
    public.feature f
  WHERE ((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id) AND ((f.name)::text <> (s.name)::text) AND (f.uniquename <> (s.name)::text))
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM public.featureprop fp,
    public.cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM public.pub s,
    public.feature_pub fs
  WHERE (fs.pub_id = s.pub_id)
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Parent'::text AS type,
    parent.uniquename AS attribute
   FROM public.feature_relationship fr,
    public.feature parent
  WHERE (fr.object_id = parent.feature_id)
UNION ALL
 SELECT feature.feature_id,
    'ID'::text AS type,
    feature.uniquename AS attribute
   FROM public.feature
  WHERE (NOT (feature.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'CDS'::text))))
UNION ALL
 SELECT feature.feature_id,
    'chado_feature_id'::text AS type,
    (feature.feature_id)::character varying AS attribute
   FROM public.feature
UNION ALL
 SELECT feature.feature_id,
    'Name'::text AS type,
    feature.name AS attribute
   FROM public.feature;


ALTER TABLE public.gff3atts OWNER TO postgres;

--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.gff3view AS
 SELECT f.feature_id,
    sf.name AS ref,
    gffdbx.accession AS source,
    cv.name AS type,
    (fl.fmin + 1) AS fstart,
    fl.fmax AS fend,
    af.significance AS score,
    fl.strand,
    fl.phase,
    f.seqlen,
    f.name,
    f.organism_id
   FROM (((((public.feature f
     LEFT JOIN public.featureloc fl ON ((f.feature_id = fl.feature_id)))
     LEFT JOIN public.feature sf ON ((fl.srcfeature_id = sf.feature_id)))
     LEFT JOIN ( SELECT fd.feature_id,
            d.accession
           FROM ((public.feature_dbxref fd
             JOIN public.dbxref d USING (dbxref_id))
             JOIN public.db USING (db_id))
          WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id)))
     LEFT JOIN public.cvterm cv ON ((f.type_id = cv.cvterm_id)))
     LEFT JOIN public.analysisfeature af ON ((f.feature_id = af.feature_id)));


ALTER TABLE public.gff3view OWNER TO postgres;

--
-- Name: gff_meta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gff_meta (
    name character varying(100),
    hostname character varying(100),
    starttime timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.gff_meta OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: glossary; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.glossary (
    glossary_id integer NOT NULL,
    term text NOT NULL,
    definition text NOT NULL
);


ALTER TABLE public.glossary OWNER TO postgres;

--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.glossary_glossary_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.glossary_glossary_id_seq OWNER TO postgres;

--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.glossary_glossary_id_seq OWNED BY public.glossary.glossary_id;


SET default_with_oids = false;

--
-- Name: itag_loading_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.itag_loading_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE public.itag_loading_log OWNER TO postgres;

--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.itag_loading_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.itag_loading_log_id_seq OWNER TO postgres;

--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.itag_loading_log_id_seq OWNED BY public.itag_loading_log.id;


--
-- Name: locations; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locations AS
 SELECT nd_geolocation.nd_geolocation_id AS location_id,
    nd_geolocation.description AS location_name
   FROM public.nd_geolocation
  GROUP BY nd_geolocation.nd_geolocation_id, nd_geolocation.description
  WITH NO DATA;


ALTER TABLE public.locations OWNER TO postgres;

--
-- Name: locationsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxplants AS
 SELECT materialized_phenoview.location_id,
    stock.stock_id AS plant_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY materialized_phenoview.location_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.locationsxplants OWNER TO postgres;

--
-- Name: locationsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxplots AS
 SELECT materialized_phenoview.location_id,
    stock.stock_id AS plot_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY materialized_phenoview.location_id, stock.stock_id
  WITH NO DATA;


ALTER TABLE public.locationsxplots OWNER TO postgres;

--
-- Name: locationsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxseedlots AS
 SELECT nd_experiment.nd_geolocation_id AS location_id,
    nd_experiment_stock.stock_id AS seedlot_id
   FROM (public.nd_experiment
     LEFT JOIN public.nd_experiment_stock ON ((nd_experiment.nd_experiment_id = nd_experiment_stock.nd_experiment_id)))
  WHERE (nd_experiment.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot_experiment'::text)))
  GROUP BY nd_experiment.nd_geolocation_id, nd_experiment_stock.stock_id
  WITH NO DATA;


ALTER TABLE public.locationsxseedlots OWNER TO postgres;

--
-- Name: locationsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxtrait_components AS
 SELECT materialized_phenoview.location_id,
    trait_component.cvterm_id AS trait_component_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY materialized_phenoview.location_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.locationsxtrait_components OWNER TO postgres;

--
-- Name: locationsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxtraits AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trait_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.locationsxtraits OWNER TO postgres;

--
-- Name: locationsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxtrial_designs AS
 SELECT materialized_phenoview.location_id,
    trialdesign.value AS trial_design_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_phenoview.location_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.locationsxtrial_designs OWNER TO postgres;

--
-- Name: locationsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxtrial_types AS
 SELECT materialized_phenoview.location_id,
    trialterm.cvterm_id AS trial_type_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_phenoview.location_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.locationsxtrial_types OWNER TO postgres;

--
-- Name: locationsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxtrials AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trial_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.locationsxtrials OWNER TO postgres;

--
-- Name: locationsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.locationsxyears AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.locationsxyears OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: marker_names; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.marker_names (
    marker_id integer,
    name text
);


ALTER TABLE public.marker_names OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: phenotypeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenotypeprop (
    phenotypeprop_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotypeprop OWNER TO postgres;

--
-- Name: TABLE phenotypeprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phenotypeprop IS 'A phenotype can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, phenotypeprop_c1, for
the combination of phenotype_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stockprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stockprop (
    stockprop_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockprop OWNER TO postgres;

--
-- Name: TABLE stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stockprop IS 'A stock can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: materialized_phenotype_jsonb_table; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.materialized_phenotype_jsonb_table AS
 SELECT observationunit.stock_id AS observationunit_stock_id,
    observationunit.uniquename AS observationunit_uniquename,
    observationunit_cvterm.name AS observationunit_type_name,
    germplasm.uniquename AS germplasm_uniquename,
    germplasm.stock_id AS germplasm_stock_id,
    rep.value AS rep,
    block_number.value AS block,
    plot_number.value AS plot_number,
    row_number.value AS row_number,
    col_number.value AS col_number,
    plant_number.value AS plant_number,
    is_a_control.value AS is_a_control,
    string_agg(DISTINCT notes.value, ', '::text) AS notes,
    project.project_id AS trial_id,
    project.name AS trial_name,
    project.description AS trial_description,
    plot_width.value AS plot_width,
    plot_length.value AS plot_length,
    field_size.value AS field_size,
    field_trial_is_planned_to_be_genotyped.value AS field_trial_is_planned_to_be_genotyped,
    field_trial_is_planned_to_cross.value AS field_trial_is_planned_to_cross,
    breeding_program.project_id AS breeding_program_id,
    breeding_program.name AS breeding_program_name,
    breeding_program.description AS breeding_program_description,
    year.value AS year,
    design.value AS design,
    location_id.value AS location_id,
    planting_date.value AS planting_date,
    harvest_date.value AS harvest_date,
    folder.project_id AS folder_id,
    folder.name AS folder_name,
    folder.description AS folder_description,
    seedplot_planted.value AS seedlot_transaction,
    seedlot.stock_id AS seedlot_stock_id,
    seedlot.uniquename AS seedlot_uniquename,
    seedlot_current_weight.value AS seedlot_current_weight_gram,
    seedlot_current_count.value AS seedlot_current_count,
    seedlot_seedlot_box.value AS seedlot_box_name,
    jsonb_object_agg(COALESCE(
        CASE
            WHEN (treatment.name IS NULL) THEN NULL::character varying
            ELSE treatment.name
        END, 'No ManagementFactor'::character varying), treatment.description) AS treatments,
    COALESCE(jsonb_agg(jsonb_build_object('trait_id', phenotype.cvalue_id, 'trait_name', (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text), 'value', phenotype.value, 'phenotype_id', phenotype.phenotype_id, 'outlier', outlier.value, 'create_date', phenotype.create_date, 'uniquename', phenotype.uniquename, 'phenotype_location_id', nd_geolocation.nd_geolocation_id, 'phenotype_location_name', nd_geolocation.description, 'collect_date', phenotype.collect_date, 'operator', phenotype.operator)) FILTER (WHERE (phenotype.value IS NOT NULL)), '[]'::jsonb) AS observations,
    COALESCE(jsonb_agg(jsonb_build_object('stock_id', available_seelot.stock_id, 'stock_uniquename', available_seelot.uniquename, 'current_weight_gram', current_weight.value, 'current_count', current_count.value, 'box_name', seedlot_box.value)) FILTER (WHERE (available_seelot.stock_id IS NOT NULL)), '[]'::jsonb) AS available_germplasm_seedlots
   FROM ((((((((((((((((((((((((((((((((((((((((((((((((public.stock observationunit
     JOIN public.nd_experiment_stock ON ((observationunit.stock_id = nd_experiment_stock.stock_id)))
     JOIN public.nd_experiment USING (nd_experiment_id))
     JOIN public.nd_geolocation USING (nd_geolocation_id))
     LEFT JOIN public.stock_relationship seedplot_planted ON (((seedplot_planted.subject_id = observationunit.stock_id) AND (seedplot_planted.type_id = 76619))))
     LEFT JOIN public.stock seedlot ON (((seedplot_planted.object_id = seedlot.stock_id) AND (seedlot.type_id = 76620))))
     LEFT JOIN public.stockprop seedlot_current_count ON (((seedlot.stock_id = seedlot_current_count.stock_id) AND (seedlot_current_count.type_id = 76647))))
     LEFT JOIN public.stockprop seedlot_current_weight ON (((seedlot.stock_id = seedlot_current_weight.stock_id) AND (seedlot_current_weight.type_id = 76679))))
     LEFT JOIN public.stockprop seedlot_seedlot_box ON (((seedlot.stock_id = seedlot_seedlot_box.stock_id) AND (seedlot_seedlot_box.type_id = 76494))))
     LEFT JOIN public.nd_experiment_phenotype USING (nd_experiment_id))
     LEFT JOIN public.phenotype USING (phenotype_id))
     JOIN public.cvterm observationunit_cvterm ON ((observationunit.type_id = observationunit_cvterm.cvterm_id)))
     JOIN public.stock_relationship ON ((observationunit.stock_id = stock_relationship.subject_id)))
     JOIN public.stock germplasm ON (((stock_relationship.object_id = germplasm.stock_id) AND (germplasm.type_id = 76392))))
     LEFT JOIN public.stock_relationship available_seedlot_rel ON (((available_seedlot_rel.subject_id = germplasm.stock_id) AND (available_seedlot_rel.type_id = 76618))))
     LEFT JOIN public.stock available_seelot ON (((available_seedlot_rel.object_id = available_seelot.stock_id) AND (seedlot.type_id = 76620))))
     LEFT JOIN public.stockprop current_count ON (((available_seelot.stock_id = current_count.stock_id) AND (current_count.type_id = 76647))))
     LEFT JOIN public.stockprop current_weight ON (((available_seelot.stock_id = current_weight.stock_id) AND (current_weight.type_id = 76679))))
     LEFT JOIN public.stockprop seedlot_box ON (((available_seelot.stock_id = seedlot_box.stock_id) AND (seedlot_box.type_id = 76494))))
     LEFT JOIN public.stockprop rep ON (((observationunit.stock_id = rep.stock_id) AND (rep.type_id = 76536))))
     LEFT JOIN public.stockprop block_number ON (((observationunit.stock_id = block_number.stock_id) AND (block_number.type_id = 76530))))
     LEFT JOIN public.stockprop plot_number ON (((observationunit.stock_id = plot_number.stock_id) AND (plot_number.type_id = 76534))))
     LEFT JOIN public.stockprop row_number ON (((observationunit.stock_id = row_number.stock_id) AND (row_number.type_id = 76537))))
     LEFT JOIN public.stockprop col_number ON (((observationunit.stock_id = col_number.stock_id) AND (col_number.type_id = 76531))))
     LEFT JOIN public.stockprop plant_number ON (((observationunit.stock_id = plant_number.stock_id) AND (plant_number.type_id = 76551))))
     LEFT JOIN public.stockprop is_a_control ON (((observationunit.stock_id = is_a_control.stock_id) AND (is_a_control.type_id = 76533))))
     LEFT JOIN public.stockprop notes ON (((observationunit.stock_id = notes.stock_id) AND (notes.type_id = 76658))))
     LEFT JOIN public.phenotypeprop outlier ON (((phenotype.phenotype_id = outlier.phenotype_id) AND (outlier.type_id = 76663))))
     LEFT JOIN public.cvterm ON ((phenotype.cvalue_id = cvterm.cvterm_id)))
     LEFT JOIN public.dbxref ON ((cvterm.dbxref_id = dbxref.dbxref_id)))
     LEFT JOIN public.db USING (db_id))
     JOIN public.nd_experiment_project USING (nd_experiment_id))
     JOIN public.project USING (project_id))
     JOIN public.project_relationship ON (((project.project_id = project_relationship.subject_project_id) AND (project_relationship.type_id = 76464))))
     JOIN public.project breeding_program ON ((breeding_program.project_id = project_relationship.object_project_id)))
     LEFT JOIN public.projectprop year ON (((project.project_id = year.project_id) AND (year.type_id = 76395))))
     LEFT JOIN public.projectprop design ON (((project.project_id = design.project_id) AND (design.type_id = 76549))))
     LEFT JOIN public.projectprop location_id ON (((project.project_id = location_id.project_id) AND (location_id.type_id = 76444))))
     LEFT JOIN public.projectprop planting_date ON (((project.project_id = planting_date.project_id) AND (planting_date.type_id = 76498))))
     LEFT JOIN public.projectprop harvest_date ON (((project.project_id = harvest_date.project_id) AND (harvest_date.type_id = 76497))))
     LEFT JOIN public.projectprop plot_width ON (((project.project_id = plot_width.project_id) AND (plot_width.type_id = 76682))))
     LEFT JOIN public.projectprop plot_length ON (((project.project_id = plot_length.project_id) AND (plot_length.type_id = 76683))))
     LEFT JOIN public.projectprop field_size ON (((project.project_id = field_size.project_id) AND (field_size.type_id = 76684))))
     LEFT JOIN public.projectprop field_trial_is_planned_to_be_genotyped ON (((project.project_id = field_trial_is_planned_to_be_genotyped.project_id) AND (field_trial_is_planned_to_be_genotyped.type_id = 76685))))
     LEFT JOIN public.projectprop field_trial_is_planned_to_cross ON (((project.project_id = field_trial_is_planned_to_cross.project_id) AND (field_trial_is_planned_to_cross.type_id = 76686))))
     LEFT JOIN public.project_relationship treatment_rel ON (((project.project_id = treatment_rel.object_project_id) AND (treatment_rel.type_id = 76646))))
     LEFT JOIN public.project treatment ON ((treatment.project_id = treatment_rel.subject_project_id)))
     LEFT JOIN public.project_relationship folder_rel ON (((project.project_id = folder_rel.subject_project_id) AND (folder_rel.type_id = 76517))))
     LEFT JOIN public.project folder ON ((folder.project_id = folder_rel.object_project_id)))
  WHERE ((nd_experiment.type_id = ANY (ARRAY[76443, 76544, 76391])) AND (design.value <> 'genotype_data_project'::text) AND (design.value <> 'treatment'::text))
  GROUP BY observationunit.stock_id, observationunit.uniquename, observationunit_cvterm.name, germplasm.uniquename, germplasm.stock_id, rep.value, block_number.value, plot_number.value, row_number.value, col_number.value, plant_number.value, is_a_control.value, project.project_id, project.name, project.description, breeding_program.project_id, breeding_program.name, breeding_program.description, year.value, design.value, location_id.value, planting_date.value, harvest_date.value, plot_width.value, plot_length.value, field_size.value, field_trial_is_planned_to_be_genotyped.value, field_trial_is_planned_to_cross.value, folder.project_id, folder.name, folder.description, seedplot_planted.value, seedlot.stock_id, seedlot.uniquename, seedlot_current_weight.value, seedlot_current_count.value, seedlot_seedlot_box.value
  ORDER BY project.project_id, observationunit.uniquename
  WITH NO DATA;


ALTER TABLE public.materialized_phenotype_jsonb_table OWNER TO postgres;

--
-- Name: materialized_stockprop; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.materialized_stockprop AS
 SELECT crosstab.stock_id,
    crosstab.uniquename,
    crosstab.stock_type_id,
    crosstab.stock_type_name,
    crosstab.organism_id,
    crosstab.block,
    crosstab.col_number,
    crosstab.igd_synonym,
    crosstab."is a control",
    crosstab.location_code,
    crosstab.organization,
    crosstab.plant_index_number,
    crosstab.subplot_index_number,
    crosstab.tissue_sample_index_number,
    crosstab."plot number",
    crosstab.plot_geo_json,
    crosstab.range,
    crosstab.replicate,
    crosstab.row_number,
    crosstab.stock_synonym,
    crosstab."T1",
    crosstab."T2",
    crosstab.transgenic,
    crosstab.variety,
    crosstab.notes,
    crosstab.state,
    crosstab."accession number",
    crosstab."PUI",
    crosstab.donor,
    crosstab."donor institute",
    crosstab."donor PUI",
    crosstab."seed source",
    crosstab."institute code",
    crosstab."institute name",
    crosstab."biological status of accession code",
    crosstab."country of origin",
    crosstab."type of germplasm storage code",
    crosstab."entry number",
    crosstab."acquisition date",
    crosstab.current_count,
    crosstab.current_weight_gram,
    crosstab.crossing_metadata_jsonb,
    crosstab.ploidy_level,
    crosstab.genome_structure,
    crosstab.introgression_parent,
    crosstab.introgression_backcross_parent,
    crosstab.introgression_map_version,
    crosstab.introgression_chromosome,
    crosstab.introgression_start_position_bp,
    crosstab.introgression_end_position_bp,
    crosstab.is_blank,
    crosstab.concentration,
    crosstab.volume,
    crosstab.extraction,
    crosstab.dna_person,
    crosstab.tissue_type,
    crosstab.ncbi_taxonomy_id
   FROM sgn.crosstab('SELECT stockprop.stock_id, stock.uniquename, stock.type_id, stock_cvterm.name, stock.organism_id, stockprop.type_id, jsonb_object_agg(stockprop.value, ''RANK'' || stockprop.rank) FROM public.stockprop JOIN public.stock USING(stock_id) JOIN public.cvterm as stock_cvterm ON (stock_cvterm.cvterm_id=stock.type_id) GROUP BY (stockprop.stock_id, stock.uniquename, stock.type_id, stock_cvterm.name, stock.organism_id, stockprop.type_id) ORDER by stockprop.stock_id ASC'::text, 'SELECT type_id FROM (VALUES
    (''76530''),
    (''76531''),
    (''76532''),
    (''76533''),
    (''76494''),
    (''76493''),
    (''76551''),
    (''76639''),
    (''76665''),
    (''76534''),
    (''76662''),
    (''76535''),
    (''76536''),
    (''76537''),
    (''76506''),
    (''76509''),
    (''76510''),
    (''76508''),
    (''76659''),
    (''76658''),
    (''76660''),
    (''76588''),
    (''76589''),
    (''76590''),
    (''76591''),
    (''76592''),
    (''76593''),
    (''76594''),
    (''76595''),
    (''76596''),
    (''76597''),
    (''76598''),
    (''76599''),
    (''76600''),
    (''76647''),
    (''76679''),
    (''76650''),
    (''76495''),
    (''76496''),
    (''76652''),
    (''76653''),
    (''76654''),
    (''76655''),
    (''76656''),
    (''76657''),
    (''76666''),
    (''76667''),
    (''76668''),
    (''76670''),
    (''76669''),
    (''76671''),
    (''76672'')) AS t (type_id);'::text) crosstab(stock_id integer, uniquename text, stock_type_id integer, stock_type_name text, organism_id integer, block json, col_number jsonb, igd_synonym jsonb, "is a control" jsonb, location_code jsonb, organization jsonb, plant_index_number jsonb, subplot_index_number jsonb, tissue_sample_index_number jsonb, "plot number" jsonb, plot_geo_json jsonb, range jsonb, replicate jsonb, row_number jsonb, stock_synonym jsonb, "T1" jsonb, "T2" jsonb, transgenic jsonb, variety jsonb, notes jsonb, state jsonb, "accession number" jsonb, "PUI" jsonb, donor jsonb, "donor institute" jsonb, "donor PUI" jsonb, "seed source" jsonb, "institute code" jsonb, "institute name" jsonb, "biological status of accession code" jsonb, "country of origin" jsonb, "type of germplasm storage code" jsonb, "entry number" jsonb, "acquisition date" jsonb, current_count jsonb, current_weight_gram jsonb, crossing_metadata_jsonb jsonb, ploidy_level jsonb, genome_structure jsonb, introgression_parent jsonb, introgression_backcross_parent jsonb, introgression_map_version jsonb, introgression_chromosome jsonb, introgression_start_position_bp jsonb, introgression_end_position_bp jsonb, is_blank jsonb, concentration jsonb, volume jsonb, extraction jsonb, dna_person jsonb, tissue_type jsonb, ncbi_taxonomy_id jsonb)
  WITH NO DATA;


ALTER TABLE public.materialized_stockprop OWNER TO postgres;

--
-- Name: materialized_traits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.materialized_traits (
    cvterm_id integer,
    name text
);


ALTER TABLE public.materialized_traits OWNER TO postgres;

--
-- Name: materialized_view; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.materialized_view (
    materialized_view_id integer NOT NULL,
    last_update timestamp without time zone,
    refresh_time integer,
    name character varying(64),
    mv_schema character varying(64),
    mv_table character varying(128),
    mv_specs text,
    indexed text,
    query text
);


ALTER TABLE public.materialized_view OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.materialized_view_materialized_view_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.materialized_view_materialized_view_id_seq OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.materialized_view_materialized_view_id_seq OWNED BY public.materialized_view.materialized_view_id;


--
-- Name: matviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.matviews (
    mv_id integer NOT NULL,
    mv_name name NOT NULL,
    mv_dependents name[],
    currently_refreshing boolean,
    last_refresh timestamp with time zone
);


ALTER TABLE public.matviews OWNER TO postgres;

--
-- Name: matviews_mv_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.matviews_mv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.matviews_mv_id_seq OWNER TO postgres;

--
-- Name: matviews_mv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.matviews_mv_id_seq OWNED BY public.matviews.mv_id;


--
-- Name: nd_experiment_contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_contact (
    nd_experiment_contact_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_contact OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_contact_nd_experiment_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_contact_nd_experiment_contact_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_contact_nd_experiment_contact_id_seq OWNED BY public.nd_experiment_contact.nd_experiment_contact_id;


--
-- Name: nd_experiment_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_dbxref (
    nd_experiment_dbxref_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_dbxref IS 'Cross-reference experiment to accessions, images, etc';


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNED BY public.nd_experiment_dbxref.nd_experiment_dbxref_id;


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_genotype_nd_experiment_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_genotype_nd_experiment_genotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_genotype_nd_experiment_genotype_id_seq OWNED BY public.nd_experiment_genotype.nd_experiment_genotype_id;


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_nd_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_nd_experiment_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_nd_experiment_id_seq OWNED BY public.nd_experiment.nd_experiment_id;


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNED BY public.nd_experiment_phenotype.nd_experiment_phenotype_id;


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_project_nd_experiment_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_project_nd_experiment_project_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_project_nd_experiment_project_id_seq OWNED BY public.nd_experiment_project.nd_experiment_project_id;


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_protocol_nd_experiment_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_protocol_nd_experiment_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_protocol_nd_experiment_protocol_id_seq OWNED BY public.nd_experiment_protocol.nd_experiment_protocol_id;


--
-- Name: nd_experiment_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_pub (
    nd_experiment_pub_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_pub OWNER TO postgres;

--
-- Name: TABLE nd_experiment_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_pub IS 'Linking nd_experiment(s) to publication(s)';


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_pub_nd_experiment_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_pub_nd_experiment_pub_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_pub_nd_experiment_pub_id_seq OWNED BY public.nd_experiment_pub.nd_experiment_pub_id;


--
-- Name: nd_experiment_stock_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_stock_dbxref (
    nd_experiment_stock_dbxref_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_stock_dbxref IS 'Cross-reference experiment_stock to accessions, images, etc';


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNED BY public.nd_experiment_stock_dbxref.nd_experiment_stock_dbxref_id;


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_stock_nd_experiment_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_nd_experiment_stock_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_stock_nd_experiment_stock_id_seq OWNED BY public.nd_experiment_stock.nd_experiment_stock_id;


--
-- Name: nd_experiment_stockprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experiment_stockprop (
    nd_experiment_stockprop_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experiment_stockprop OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_experiment_stockprop IS 'Property/value associations for experiment_stocks. This table can store the properties such as treatment';


--
-- Name: COLUMN nd_experiment_stockprop.nd_experiment_stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_experiment_stockprop.nd_experiment_stock_id IS 'The experiment_stock to which the property applies.';


--
-- Name: COLUMN nd_experiment_stockprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_experiment_stockprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_experiment_stockprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_experiment_stockprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_experiment_stockprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_experiment_stockprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNED BY public.nd_experiment_stockprop.nd_experiment_stockprop_id;


--
-- Name: nd_experimentprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_experimentprop (
    nd_experimentprop_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experimentprop OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_experimentprop_nd_experimentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experimentprop_nd_experimentprop_id_seq OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_experimentprop_nd_experimentprop_id_seq OWNED BY public.nd_experimentprop.nd_experimentprop_id;


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_geolocation_nd_geolocation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocation_nd_geolocation_id_seq OWNER TO postgres;

--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_geolocation_nd_geolocation_id_seq OWNED BY public.nd_geolocation.nd_geolocation_id;


--
-- Name: nd_geolocationprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_geolocationprop (
    nd_geolocationprop_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_geolocationprop OWNER TO postgres;

--
-- Name: TABLE nd_geolocationprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_geolocationprop IS 'Property/value associations for geolocations. This table can store the properties such as location and environment';


--
-- Name: COLUMN nd_geolocationprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocationprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_geolocationprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocationprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_geolocationprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_geolocationprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_geolocationprop_nd_geolocationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocationprop_nd_geolocationprop_id_seq OWNER TO postgres;

--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_geolocationprop_nd_geolocationprop_id_seq OWNED BY public.nd_geolocationprop.nd_geolocationprop_id;


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_protocol_nd_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_nd_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_protocol_nd_protocol_id_seq OWNED BY public.nd_protocol.nd_protocol_id;


--
-- Name: nd_protocol_reagent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_protocol_reagent (
    nd_protocol_reagent_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_protocol_reagent OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_protocol_reagent_nd_protocol_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_reagent_nd_protocol_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_protocol_reagent_nd_protocol_reagent_id_seq OWNED BY public.nd_protocol_reagent.nd_protocol_reagent_id;


--
-- Name: nd_protocolprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_protocolprop (
    nd_protocolprop_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    value jsonb,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_protocolprop OWNER TO postgres;

--
-- Name: TABLE nd_protocolprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_protocolprop IS 'Property/value associations for protocol.';


--
-- Name: COLUMN nd_protocolprop.nd_protocol_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_protocolprop.nd_protocol_id IS 'The protocol to which the property applies.';


--
-- Name: COLUMN nd_protocolprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_protocolprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_protocolprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_protocolprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_protocolprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_protocolprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_protocolprop_nd_protocolprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocolprop_nd_protocolprop_id_seq OWNER TO postgres;

--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_protocolprop_nd_protocolprop_id_seq OWNED BY public.nd_protocolprop.nd_protocolprop_id;


--
-- Name: nd_reagent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_reagent (
    nd_reagent_id integer NOT NULL,
    name character varying(80) NOT NULL,
    type_id integer NOT NULL,
    feature_id integer
);


ALTER TABLE public.nd_reagent OWNER TO postgres;

--
-- Name: TABLE nd_reagent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_reagent IS 'A reagent such as a primer, an enzyme, an adapter oligo, a linker oligo. Reagents are used in genotyping experiments, or in any other kind of experiment.';


--
-- Name: COLUMN nd_reagent.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent.name IS 'The name of the reagent. The name should be unique for a given type.';


--
-- Name: COLUMN nd_reagent.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent.type_id IS 'The type of the reagent, for example linker oligomer, or forward primer.';


--
-- Name: COLUMN nd_reagent.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent.feature_id IS 'If the reagent is a primer, the feature that it corresponds to. More generally, the corresponding feature for any reagent that has a sequence that maps to another sequence.';


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_reagent_nd_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_nd_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_reagent_nd_reagent_id_seq OWNED BY public.nd_reagent.nd_reagent_id;


--
-- Name: nd_reagent_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_reagent_relationship (
    nd_reagent_relationship_id integer NOT NULL,
    subject_reagent_id integer NOT NULL,
    object_reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_reagent_relationship OWNER TO postgres;

--
-- Name: TABLE nd_reagent_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.nd_reagent_relationship IS 'Relationships between reagents. Some reagents form a group. i.e., they are used all together or not at all. Examples are adapter/linker/enzyme experiment reagents.';


--
-- Name: COLUMN nd_reagent_relationship.subject_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent_relationship.subject_reagent_id IS 'The subject reagent in the relationship. In parent/child terminology, the subject is the child. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.object_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent_relationship.object_reagent_id IS 'The object reagent in the relationship. In parent/child terminology, the object is the parent. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.nd_reagent_relationship.type_id IS 'The type (or predicate) of the relationship. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_reagent_relationship_nd_reagent_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_relationship_nd_reagent_relationship_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_reagent_relationship_nd_reagent_relationship_id_seq OWNED BY public.nd_reagent_relationship.nd_reagent_relationship_id;


--
-- Name: nd_reagentprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nd_reagentprop (
    nd_reagentprop_id integer NOT NULL,
    nd_reagent_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_reagentprop OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.nd_reagentprop_nd_reagentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagentprop_nd_reagentprop_id_seq OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.nd_reagentprop_nd_reagentprop_id_seq OWNED BY public.nd_reagentprop.nd_reagentprop_id;


SET default_with_oids = false;

--
-- Name: organism; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organism (
    organism_id integer NOT NULL,
    abbreviation character varying(255),
    genus character varying(255) NOT NULL,
    species character varying(255) NOT NULL,
    common_name character varying(255),
    comment text,
    genbank_taxon_id integer,
    sgn_organism_id integer,
    obsolete integer
);


ALTER TABLE public.organism OWNER TO postgres;

--
-- Name: TABLE organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.organism IS 'The organismal taxonomic
classification. Note that phylogenies are represented using the
phylogeny module, and taxonomies can be represented using the cvterm
module or the phylogeny module';


--
-- Name: COLUMN organism.species; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.organism.species IS 'A type of organism is always
uniquely identified by genus+species. When mapping from the NCBI
taxonomy names.dmp file, the unique-name column must be used where it
is present, as the name column is not always unique (eg environmental
samples). If a particular strain or subspecies is to be represented,
this is appended onto the species name. Follows standard NCBI taxonomy
pattern';


--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organism_dbxref (
    organism_dbxref_id integer NOT NULL,
    organism_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.organism_dbxref OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organism_dbxref_organism_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_dbxref_organism_dbxref_id_seq OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organism_dbxref_organism_dbxref_id_seq OWNED BY public.organism_dbxref.organism_dbxref_id;


--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organism_organism_id_seq OWNED BY public.organism.organism_id;


--
-- Name: organism_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organism_relationship (
    organism_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.organism_relationship OWNER TO postgres;

--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organism_relationship_organism_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_relationship_organism_relationship_id_seq OWNER TO postgres;

--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organism_relationship_organism_relationship_id_seq OWNED BY public.organism_relationship.organism_relationship_id;


--
-- Name: organismpath; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organismpath (
    organismpath_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE public.organismpath OWNER TO postgres;

--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organismpath_organismpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organismpath_organismpath_id_seq OWNER TO postgres;

--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organismpath_organismpath_id_seq OWNED BY public.organismpath.organismpath_id;


--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organismprop (
    organismprop_id integer NOT NULL,
    organism_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.organismprop OWNER TO postgres;

--
-- Name: TABLE organismprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.organismprop IS 'tag-value properties - follows standard chado model';


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organismprop_organismprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organismprop_organismprop_id_seq OWNER TO postgres;

--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organismprop_organismprop_id_seq OWNED BY public.organismprop.organismprop_id;


SET default_with_oids = false;

--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phendesc (
    phendesc_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    description text NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phendesc OWNER TO postgres;

--
-- Name: TABLE phendesc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phendesc IS 'A summary of a _set_ of phenotypic statements for any one gcontext made in any one publication.';


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phendesc_phendesc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phendesc_phendesc_id_seq OWNER TO postgres;

--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phendesc_phendesc_id_seq OWNED BY public.phendesc.phendesc_id;


--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenotype_comparison (
    phenotype_comparison_id integer NOT NULL,
    genotype1_id integer NOT NULL,
    environment1_id integer NOT NULL,
    genotype2_id integer NOT NULL,
    environment2_id integer NOT NULL,
    phenotype1_id integer NOT NULL,
    phenotype2_id integer,
    pub_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phenotype_comparison OWNER TO postgres;

--
-- Name: TABLE phenotype_comparison; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phenotype_comparison IS 'Comparison of phenotypes e.g., genotype1/environment1/phenotype1 "non-suppressible" with respect to genotype2/environment2/phenotype2.';


--
-- Name: phenotype_comparison_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenotype_comparison_cvterm (
    phenotype_comparison_cvterm_id integer NOT NULL,
    phenotype_comparison_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_comparison_cvterm OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNED BY public.phenotype_comparison_cvterm.phenotype_comparison_cvterm_id;


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenotype_comparison_phenotype_comparison_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_phenotype_comparison_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenotype_comparison_phenotype_comparison_id_seq OWNED BY public.phenotype_comparison.phenotype_comparison_id;


--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenotype_cvterm (
    phenotype_cvterm_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_cvterm OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenotype_cvterm_phenotype_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_cvterm_phenotype_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenotype_cvterm_phenotype_cvterm_id_seq OWNED BY public.phenotype_cvterm.phenotype_cvterm_id;


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenotype_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_phenotype_id_seq OWNER TO postgres;

--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenotype_phenotype_id_seq OWNED BY public.phenotype.phenotype_id;


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenotypeprop_phenotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotypeprop_phenotypeprop_id_seq OWNER TO postgres;

--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenotypeprop_phenotypeprop_id_seq OWNED BY public.phenotypeprop.phenotypeprop_id;


--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phenstatement (
    phenstatement_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phenstatement OWNER TO postgres;

--
-- Name: TABLE phenstatement; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phenstatement IS 'Phenotypes are things like "larval lethal".  Phenstatements are things like "dpp-1 is recessive larval lethal". So essentially phenstatement is a linking table expressing the relationship between genotype, environment, and phenotype.';


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phenstatement_phenstatement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenstatement_phenstatement_id_seq OWNER TO postgres;

--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phenstatement_phenstatement_id_seq OWNED BY public.phenstatement.phenstatement_id;


--
-- Name: phylonode; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonode (
    phylonode_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    parent_phylonode_id integer,
    left_idx integer NOT NULL,
    right_idx integer NOT NULL,
    type_id integer,
    feature_id integer,
    label character varying(255),
    distance double precision
);


ALTER TABLE public.phylonode OWNER TO postgres;

--
-- Name: TABLE phylonode; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylonode IS 'This is the most pervasive
       element in the phylogeny module, cataloging the "phylonodes" of
       tree graphs. Edges are implied by the parent_phylonode_id
       reflexive closure. For all nodes in a nested set implementation the left and right index will be *between* the parents left and right indexes.';


--
-- Name: COLUMN phylonode.parent_phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylonode.parent_phylonode_id IS 'Root phylonode can have null parent_phylonode_id value.';


--
-- Name: COLUMN phylonode.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylonode.type_id IS 'Type: e.g. root, interior, leaf.';


--
-- Name: COLUMN phylonode.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylonode.feature_id IS 'Phylonodes can have optional features attached to them e.g. a protein or nucleotide sequence usually attached to a leaf of the phylotree for non-leaf nodes, the feature may be a feature that is an instance of SO:match; this feature is the alignment of all leaf features beneath it.';


--
-- Name: phylonode_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonode_dbxref (
    phylonode_dbxref_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.phylonode_dbxref OWNER TO postgres;

--
-- Name: TABLE phylonode_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylonode_dbxref IS 'For example, for orthology, paralogy group identifiers; could also be used for NCBI taxonomy; for sequences, refer to phylonode_feature, feature associated dbxrefs.';


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonode_dbxref_phylonode_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_dbxref_phylonode_dbxref_id_seq OWNER TO postgres;

--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonode_dbxref_phylonode_dbxref_id_seq OWNED BY public.phylonode_dbxref.phylonode_dbxref_id;


--
-- Name: phylonode_organism; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonode_organism (
    phylonode_organism_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phylonode_organism OWNER TO postgres;

--
-- Name: TABLE phylonode_organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylonode_organism IS 'This linking table should only be used for nodes in taxonomy trees; it provides a mapping between the node and an organism. One node can have zero or one organisms, one organism can have zero or more nodes (although typically it should only have one in the standard NCBI taxonomy tree).';


--
-- Name: COLUMN phylonode_organism.phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylonode_organism.phylonode_id IS 'One phylonode cannot refer to >1 organism.';


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonode_organism_phylonode_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_organism_phylonode_organism_id_seq OWNER TO postgres;

--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonode_organism_phylonode_organism_id_seq OWNED BY public.phylonode_organism.phylonode_organism_id;


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonode_phylonode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_phylonode_id_seq OWNER TO postgres;

--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonode_phylonode_id_seq OWNED BY public.phylonode.phylonode_id;


--
-- Name: phylonode_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonode_pub (
    phylonode_pub_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylonode_pub OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonode_pub_phylonode_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_pub_phylonode_pub_id_seq OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonode_pub_phylonode_pub_id_seq OWNED BY public.phylonode_pub.phylonode_pub_id;


--
-- Name: phylonode_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonode_relationship (
    phylonode_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    rank integer,
    phylotree_id integer NOT NULL
);


ALTER TABLE public.phylonode_relationship OWNER TO postgres;

--
-- Name: TABLE phylonode_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylonode_relationship IS 'This is for 
relationships that are not strictly hierarchical; for example,
horizontal gene transfer. Most phylogenetic trees are strictly
hierarchical, nevertheless it is here for completeness.';


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonode_relationship_phylonode_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_relationship_phylonode_relationship_id_seq OWNER TO postgres;

--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonode_relationship_phylonode_relationship_id_seq OWNED BY public.phylonode_relationship.phylonode_relationship_id;


--
-- Name: phylonodeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylonodeprop (
    phylonodeprop_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phylonodeprop OWNER TO postgres;

--
-- Name: COLUMN phylonodeprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylonodeprop.type_id IS 'type_id could designate phylonode hierarchy relationships, for example: species taxonomy (kingdom, order, family, genus, species), "ortholog/paralog", "fold/superfold", etc.';


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylonodeprop_phylonodeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonodeprop_phylonodeprop_id_seq OWNER TO postgres;

--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylonodeprop_phylonodeprop_id_seq OWNED BY public.phylonodeprop.phylonodeprop_id;


--
-- Name: phylotree; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylotree (
    phylotree_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    name character varying(255),
    type_id integer,
    analysis_id integer,
    comment text
);


ALTER TABLE public.phylotree OWNER TO postgres;

--
-- Name: TABLE phylotree; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylotree IS 'Global anchor for phylogenetic tree.';


--
-- Name: COLUMN phylotree.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.phylotree.type_id IS 'Type: protein, nucleotide, taxonomy, for example. The type should be any SO type, or "taxonomy".';


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylotree_phylotree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_phylotree_id_seq OWNER TO postgres;

--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylotree_phylotree_id_seq OWNED BY public.phylotree.phylotree_id;


--
-- Name: phylotree_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.phylotree_pub (
    phylotree_pub_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylotree_pub OWNER TO postgres;

--
-- Name: TABLE phylotree_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.phylotree_pub IS 'Tracks citations global to the tree e.g. multiple sequence alignment supporting tree construction.';


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.phylotree_pub_phylotree_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_pub_phylotree_pub_id_seq OWNER TO postgres;

--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.phylotree_pub_phylotree_pub_id_seq OWNED BY public.phylotree_pub.phylotree_pub_id;


--
-- Name: plants; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plants AS
 SELECT stock.stock_id AS plant_id,
    stock.uniquename AS plant_name
   FROM public.stock
  WHERE ((stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))) AND (stock.is_obsolete = false))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE public.plants OWNER TO postgres;

--
-- Name: plantsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxplots AS
 SELECT plant.stock_id AS plant_id,
    plot.stock_id AS plot_id
   FROM (((public.materialized_phenoview
     JOIN public.stock plot ON (((materialized_phenoview.stock_id = plot.stock_id) AND (plot.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
     JOIN public.stock_relationship plant_relationship ON ((plot.stock_id = plant_relationship.subject_id)))
     JOIN public.stock plant ON (((plant_relationship.object_id = plant.stock_id) AND (plant.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY plant.stock_id, plot.stock_id
  WITH NO DATA;


ALTER TABLE public.plantsxplots OWNER TO postgres;

--
-- Name: plantsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxseedlots AS
 SELECT stock.stock_id AS plant_id,
    materialized_phenoview.seedlot_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.seedlot_id
  WITH NO DATA;


ALTER TABLE public.plantsxseedlots OWNER TO postgres;

--
-- Name: plantsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxtrait_components AS
 SELECT stock.stock_id AS plant_id,
    trait_component.cvterm_id AS trait_component_id
   FROM ((((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY stock.stock_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.plantsxtrait_components OWNER TO postgres;

--
-- Name: plantsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxtraits AS
 SELECT stock.stock_id AS plant_id,
    materialized_phenoview.trait_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.plantsxtraits OWNER TO postgres;

--
-- Name: plantsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxtrial_designs AS
 SELECT stock.stock_id AS plant_id,
    trialdesign.value AS trial_design_id
   FROM ((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY stock.stock_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.plantsxtrial_designs OWNER TO postgres;

--
-- Name: plantsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxtrial_types AS
 SELECT stock.stock_id AS plant_id,
    trialterm.cvterm_id AS trial_type_id
   FROM (((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY stock.stock_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.plantsxtrial_types OWNER TO postgres;

--
-- Name: plantsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxtrials AS
 SELECT stock.stock_id AS plant_id,
    materialized_phenoview.trial_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.plantsxtrials OWNER TO postgres;

--
-- Name: plantsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plantsxyears AS
 SELECT stock.stock_id AS plant_id,
    materialized_phenoview.year_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plant'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.plantsxyears OWNER TO postgres;

--
-- Name: plots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plots AS
 SELECT stock.stock_id AS plot_id,
    stock.uniquename AS plot_name
   FROM public.stock
  WHERE ((stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))) AND (stock.is_obsolete = false))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE public.plots OWNER TO postgres;

--
-- Name: plotsxseedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxseedlots AS
 SELECT stock.stock_id AS plot_id,
    materialized_phenoview.seedlot_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.seedlot_id
  WITH NO DATA;


ALTER TABLE public.plotsxseedlots OWNER TO postgres;

--
-- Name: plotsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxtrait_components AS
 SELECT stock.stock_id AS plot_id,
    trait_component.cvterm_id AS trait_component_id
   FROM ((((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY stock.stock_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.plotsxtrait_components OWNER TO postgres;

--
-- Name: plotsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxtraits AS
 SELECT stock.stock_id AS plot_id,
    materialized_phenoview.trait_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.plotsxtraits OWNER TO postgres;

--
-- Name: plotsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxtrial_designs AS
 SELECT stock.stock_id AS plot_id,
    trialdesign.value AS trial_design_id
   FROM ((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY stock.stock_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.plotsxtrial_designs OWNER TO postgres;

--
-- Name: plotsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxtrial_types AS
 SELECT stock.stock_id AS plot_id,
    trialterm.cvterm_id AS trial_type_id
   FROM (((public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY stock.stock_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.plotsxtrial_types OWNER TO postgres;

--
-- Name: plotsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxtrials AS
 SELECT stock.stock_id AS plot_id,
    materialized_phenoview.trial_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.plotsxtrials OWNER TO postgres;

--
-- Name: plotsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.plotsxyears AS
 SELECT stock.stock_id AS plot_id,
    materialized_phenoview.year_id
   FROM (public.materialized_phenoview
     JOIN public.stock ON (((materialized_phenoview.stock_id = stock.stock_id) AND (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'plot'::text))))))
  GROUP BY stock.stock_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.plotsxyears OWNER TO postgres;

--
-- Name: project_contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project_contact (
    project_contact_id integer NOT NULL,
    project_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.project_contact OWNER TO postgres;

--
-- Name: TABLE project_contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.project_contact IS 'Linking project(s) to contact(s)';


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_contact_project_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_contact_project_contact_id_seq OWNER TO postgres;

--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_contact_project_contact_id_seq OWNED BY public.project_contact.project_contact_id;


--
-- Name: project_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_project_id_seq OWNER TO postgres;

--
-- Name: project_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_project_id_seq OWNED BY public.project.project_id;


--
-- Name: project_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project_pub (
    project_pub_id integer NOT NULL,
    project_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.project_pub OWNER TO postgres;

--
-- Name: TABLE project_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.project_pub IS 'Linking project(s) to publication(s)';


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_pub_project_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_pub_project_pub_id_seq OWNER TO postgres;

--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_pub_project_pub_id_seq OWNED BY public.project_pub.project_pub_id;


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_relationship_project_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_relationship_project_relationship_id_seq OWNER TO postgres;

--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_relationship_project_relationship_id_seq OWNED BY public.project_relationship.project_relationship_id;


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.projectprop_projectprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.projectprop_projectprop_id_seq OWNER TO postgres;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.projectprop_projectprop_id_seq OWNED BY public.projectprop.projectprop_id;


SET default_with_oids = false;

--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pub_dbxref (
    pub_dbxref_id integer NOT NULL,
    pub_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.pub_dbxref OWNER TO postgres;

--
-- Name: TABLE pub_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.pub_dbxref IS 'Handle links to eg, pubmed, biosis,
zoorec, OCLC, mdeline, ISSN, coden...';


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pub_dbxref_pub_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_dbxref_pub_dbxref_id_seq OWNER TO postgres;

--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pub_dbxref_pub_dbxref_id_seq OWNED BY public.pub_dbxref.pub_dbxref_id;


--
-- Name: pub_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pub_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_pub_id_seq OWNER TO postgres;

--
-- Name: pub_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pub_pub_id_seq OWNED BY public.pub.pub_id;


--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pub_relationship (
    pub_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.pub_relationship OWNER TO postgres;

--
-- Name: TABLE pub_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.pub_relationship IS 'Handle relationships between
publications, eg, when one publication makes others obsolete, when one
publication contains errata with respect to other publication(s), or
when one publication also appears in another pub (I think these three
are it - at least for fb)';


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pub_relationship_pub_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_relationship_pub_relationship_id_seq OWNER TO postgres;

--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pub_relationship_pub_relationship_id_seq OWNED BY public.pub_relationship.pub_relationship_id;


SET default_with_oids = false;

--
-- Name: pubabstract; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pubabstract (
    pubabstract_id integer NOT NULL,
    pub_id integer,
    abstract text,
    abstract_tsvector tsvector
);


ALTER TABLE public.pubabstract OWNER TO postgres;

--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pubabstract_pubabstract_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubabstract_pubabstract_id_seq OWNER TO postgres;

--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pubabstract_pubabstract_id_seq OWNED BY public.pubabstract.pubabstract_id;


SET default_with_oids = false;

--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pubauthor (
    pubauthor_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer NOT NULL,
    editor boolean DEFAULT false,
    surname character varying(100) NOT NULL,
    givennames character varying(100),
    suffix character varying(100)
);


ALTER TABLE public.pubauthor OWNER TO postgres;

--
-- Name: TABLE pubauthor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.pubauthor IS 'an author for a publication. Note the denormalisation (hence lack of _ in table name) - this is deliberate as it is in general too hard to assign IDs to authors.';


--
-- Name: COLUMN pubauthor.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pubauthor.rank IS 'order of author in author list for this pub - order is important';


--
-- Name: COLUMN pubauthor.editor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pubauthor.editor IS 'indicates whether the author is an editor for linked publication. Note: this is a boolean field but does not follow the normal chado convention for naming booleans';


--
-- Name: COLUMN pubauthor.givennames; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pubauthor.givennames IS 'first name, initials';


--
-- Name: COLUMN pubauthor.suffix; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.pubauthor.suffix IS 'Jr., Sr., etc';


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pubauthor_pubauthor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubauthor_pubauthor_id_seq OWNER TO postgres;

--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pubauthor_pubauthor_id_seq OWNED BY public.pubauthor.pubauthor_id;


--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pubprop (
    pubprop_id integer NOT NULL,
    pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text NOT NULL,
    rank integer
);


ALTER TABLE public.pubprop OWNER TO postgres;

--
-- Name: TABLE pubprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.pubprop IS 'Property-value pairs for a pub. Follows standard chado pattern - see sequence module for details';


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pubprop_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubprop_pubprop_id_seq OWNER TO postgres;

--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pubprop_pubprop_id_seq OWNED BY public.pubprop.pubprop_id;


SET default_with_oids = false;

--
-- Name: resource_file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.resource_file (
    resource_file_id integer NOT NULL,
    name character varying(40) NOT NULL,
    expression text NOT NULL
);


ALTER TABLE public.resource_file OWNER TO postgres;

--
-- Name: TABLE resource_file; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.resource_file IS 'each row defines a composite dataset, downloadable at the url cxgn-resource://name, that is composed of other downloadable datasets, according to the expression column.  See CXGN::Tools::Wget for the accompanying code';


--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.resource_file_resource_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.resource_file_resource_file_id_seq OWNER TO postgres;

--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.resource_file_resource_file_id_seq OWNED BY public.resource_file.resource_file_id;


--
-- Name: seedlots; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlots AS
 SELECT stock.stock_id AS seedlot_id,
    stock.uniquename AS seedlot_name
   FROM public.stock
  WHERE ((stock.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'seedlot'::text))) AND (stock.is_obsolete = false))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE public.seedlots OWNER TO postgres;

--
-- Name: seedlotsxtrait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxtrait_components AS
 SELECT materialized_phenoview.seedlot_id,
    trait_component.cvterm_id AS trait_component_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY materialized_phenoview.seedlot_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.seedlotsxtrait_components OWNER TO postgres;

--
-- Name: seedlotsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxtraits AS
 SELECT materialized_phenoview.seedlot_id,
    materialized_phenoview.trait_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.seedlot_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE public.seedlotsxtraits OWNER TO postgres;

--
-- Name: seedlotsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxtrial_designs AS
 SELECT materialized_phenoview.seedlot_id,
    trialdesign.value AS trial_design_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_phenoview.seedlot_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.seedlotsxtrial_designs OWNER TO postgres;

--
-- Name: seedlotsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxtrial_types AS
 SELECT materialized_phenoview.seedlot_id,
    trialterm.cvterm_id AS trial_type_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_phenoview.seedlot_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.seedlotsxtrial_types OWNER TO postgres;

--
-- Name: seedlotsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxtrials AS
 SELECT materialized_phenoview.seedlot_id,
    materialized_phenoview.trial_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.seedlot_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.seedlotsxtrials OWNER TO postgres;

--
-- Name: seedlotsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.seedlotsxyears AS
 SELECT materialized_phenoview.seedlot_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.seedlot_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.seedlotsxyears OWNER TO postgres;

--
-- Name: signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.signalp (
    signalp_id integer NOT NULL,
    cds_id bigint,
    nn_cmax real,
    nn_cpos smallint,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos smallint,
    nn_yd character(1),
    nn_smax real,
    nn_spos smallint,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos smallint,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1)
);


ALTER TABLE public.signalp OWNER TO postgres;

--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.signalp_signalp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.signalp_signalp_id_seq OWNER TO postgres;

--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.signalp_signalp_id_seq OWNED BY public.signalp.signalp_id;


--
-- Name: stock_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_cvterm (
    stock_cvterm_id integer NOT NULL,
    stock_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    is_not boolean DEFAULT false NOT NULL
);


ALTER TABLE public.stock_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_cvterm IS 'stock_cvterm links a stock to cvterms. This is for secondary cvterms; primary cvterms should use stock.type_id.';


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_cvterm_stock_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvterm_stock_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_cvterm_stock_cvterm_id_seq OWNED BY public.stock_cvterm.stock_cvterm_id;


--
-- Name: stock_cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_cvtermprop (
    stock_cvtermprop_id integer NOT NULL,
    stock_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_cvtermprop OWNER TO postgres;

--
-- Name: TABLE stock_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_cvtermprop IS 'Extensible properties for
stock to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the stockprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN stock_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN stock_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN stock_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_cvtermprop.rank IS 'Property-Value
ordering. Any stock_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_cvtermprop_stock_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvtermprop_stock_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_cvtermprop_stock_cvtermprop_id_seq OWNED BY public.stock_cvtermprop.stock_cvtermprop_id;


--
-- Name: stock_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_dbxref (
    stock_dbxref_id integer NOT NULL,
    stock_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.stock_dbxref OWNER TO postgres;

--
-- Name: TABLE stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_dbxref IS 'stock_dbxref links a stock to dbxrefs. This is for secondary identifiers; primary identifiers should use stock.dbxref_id.';


--
-- Name: COLUMN stock_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stock_dbxref.is_current IS 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked stock.';


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_dbxref_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxref_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_dbxref_stock_dbxref_id_seq OWNED BY public.stock_dbxref.stock_dbxref_id;


--
-- Name: stock_dbxrefprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_dbxrefprop (
    stock_dbxrefprop_id integer NOT NULL,
    stock_dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_dbxrefprop OWNER TO postgres;

--
-- Name: TABLE stock_dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_dbxrefprop IS 'A stock_dbxref can have any number of
slot-value property tags attached to it. This is useful for storing properties related to dbxref annotations of stocks, such as evidence codes, and references, and metadata, such as create/modify dates. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stock_dbxrefprop_c1, for
the combination of stock_dbxref_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_dbxrefprop_stock_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxrefprop_stock_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_dbxrefprop_stock_dbxrefprop_id_seq OWNED BY public.stock_dbxrefprop.stock_dbxrefprop_id;


--
-- Name: stock_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_genotype (
    stock_genotype_id integer NOT NULL,
    stock_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.stock_genotype OWNER TO postgres;

--
-- Name: TABLE stock_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_genotype IS 'Simple table linking a stock to
a genotype. Features with genotypes can be linked to stocks thru feature_genotype -> genotype -> stock_genotype -> stock.';


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_genotype_stock_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_genotype_stock_genotype_id_seq OWNER TO postgres;

--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_genotype_stock_genotype_id_seq OWNED BY public.stock_genotype.stock_genotype_id;


--
-- Name: stock_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_pub (
    stock_pub_id integer NOT NULL,
    stock_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_pub OWNER TO postgres;

--
-- Name: TABLE stock_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_pub IS 'Provenance. Linking table between stocks and, for example, a stocklist computer file.';


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_pub_stock_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_pub_stock_pub_id_seq OWNER TO postgres;

--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_pub_stock_pub_id_seq OWNED BY public.stock_pub.stock_pub_id;


--
-- Name: stock_relationship_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_relationship_cvterm (
    stock_relationship_cvterm_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer
);


ALTER TABLE public.stock_relationship_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_relationship_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_relationship_cvterm IS 'For germplasm maintenance and pedigree data, stock_relationship. type_id will record cvterms such as "is a female parent of", "a parent for mutation", "is a group_id of", "is a source_id of", etc The cvterms for higher categories such as "generative", "derivative" or "maintenance" can be stored in table stock_relationship_cvterm';


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNED BY public.stock_relationship_cvterm.stock_relationship_cvterm_id;


--
-- Name: stock_relationship_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_relationship_pub (
    stock_relationship_pub_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_relationship_pub OWNER TO postgres;

--
-- Name: TABLE stock_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_relationship_pub IS 'Provenance. Attach optional evidence to a stock_relationship in the form of a publication.';


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_relationship_pub_stock_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_pub_stock_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_relationship_pub_stock_relationship_pub_id_seq OWNED BY public.stock_relationship_pub.stock_relationship_pub_id;


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_relationship_stock_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_stock_relationship_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_relationship_stock_relationship_id_seq OWNED BY public.stock_relationship.stock_relationship_id;


--
-- Name: stock_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stock_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_stock_id_seq OWNER TO postgres;

--
-- Name: stock_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stock_stock_id_seq OWNED BY public.stock.stock_id;


--
-- Name: stockcollection; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stockcollection (
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    contact_id integer,
    name character varying(255),
    uniquename text NOT NULL
);


ALTER TABLE public.stockcollection OWNER TO postgres;

--
-- Name: TABLE stockcollection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stockcollection IS 'The lab or stock center distributing the stocks in their collection.';


--
-- Name: COLUMN stockcollection.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stockcollection.type_id IS 'type_id is the collection type cv.';


--
-- Name: COLUMN stockcollection.contact_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stockcollection.contact_id IS 'contact_id links to the contact information for the collection.';


--
-- Name: COLUMN stockcollection.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stockcollection.name IS 'name is the collection.';


--
-- Name: COLUMN stockcollection.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stockcollection.uniquename IS 'uniqename is the value of the collection cv.';


--
-- Name: stockcollection_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stockcollection_stock (
    stockcollection_stock_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    stock_id integer NOT NULL
);


ALTER TABLE public.stockcollection_stock OWNER TO postgres;

--
-- Name: TABLE stockcollection_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stockcollection_stock IS 'stockcollection_stock links
a stock collection to the stocks which are contained in the collection.';


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stockcollection_stock_stockcollection_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stock_stockcollection_stock_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stockcollection_stock_stockcollection_stock_id_seq OWNED BY public.stockcollection_stock.stockcollection_stock_id;


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stockcollection_stockcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stockcollection_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stockcollection_stockcollection_id_seq OWNED BY public.stockcollection.stockcollection_id;


--
-- Name: stockcollectionprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stockcollectionprop (
    stockcollectionprop_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockcollectionprop OWNER TO postgres;

--
-- Name: TABLE stockcollectionprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stockcollectionprop IS 'The table stockcollectionprop
contains the value of the stock collection such as website/email URLs;
the value of the stock collection order URLs.';


--
-- Name: COLUMN stockcollectionprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.stockcollectionprop.type_id IS 'The cv for the type_id is "stockcollection property type".';


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stockcollectionprop_stockcollectionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollectionprop_stockcollectionprop_id_seq OWNER TO postgres;

--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stockcollectionprop_stockcollectionprop_id_seq OWNED BY public.stockcollectionprop.stockcollectionprop_id;


--
-- Name: stockprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stockprop_pub (
    stockprop_pub_id integer NOT NULL,
    stockprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stockprop_pub OWNER TO postgres;

--
-- Name: TABLE stockprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stockprop_pub IS 'Provenance. Any stockprop assignment can optionally be supported by a publication.';


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stockprop_pub_stockprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_pub_stockprop_pub_id_seq OWNER TO postgres;

--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stockprop_pub_stockprop_pub_id_seq OWNED BY public.stockprop_pub.stockprop_pub_id;


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stockprop_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_stockprop_id_seq OWNER TO postgres;

--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stockprop_stockprop_id_seq OWNED BY public.stockprop.stockprop_id;


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.synonym_synonym_id_seq OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.synonym_synonym_id_seq OWNED BY public.synonym.synonym_id;


SET default_with_oids = false;

--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tableinfo (
    tableinfo_id integer NOT NULL,
    name character varying(30) NOT NULL,
    primary_key_column character varying(30),
    is_view integer DEFAULT 0 NOT NULL,
    view_on_table_id integer,
    superclass_table_id integer,
    is_updateable integer DEFAULT 1 NOT NULL,
    modification_date date DEFAULT now() NOT NULL
);


ALTER TABLE public.tableinfo OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tableinfo_tableinfo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tableinfo_tableinfo_id_seq OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tableinfo_tableinfo_id_seq OWNED BY public.tableinfo.tableinfo_id;


SET default_with_oids = false;

--
-- Name: tmp_cds_handler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tmp_cds_handler (
    cds_row_id integer NOT NULL,
    seq_id character varying(1024),
    gff_id character varying(1024),
    type character varying(1024) NOT NULL,
    fmin integer NOT NULL,
    fmax integer NOT NULL,
    object text NOT NULL
);


ALTER TABLE public.tmp_cds_handler OWNER TO postgres;

--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tmp_cds_handler_cds_row_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tmp_cds_handler_cds_row_id_seq OWNER TO postgres;

--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tmp_cds_handler_cds_row_id_seq OWNED BY public.tmp_cds_handler.cds_row_id;


--
-- Name: tmp_cds_handler_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tmp_cds_handler_relationship (
    rel_row_id integer NOT NULL,
    cds_row_id integer,
    parent_id character varying(1024),
    grandparent_id character varying(1024)
);


ALTER TABLE public.tmp_cds_handler_relationship OWNER TO postgres;

--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tmp_cds_handler_relationship_rel_row_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tmp_cds_handler_relationship_rel_row_id_seq OWNER TO postgres;

--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tmp_cds_handler_relationship_rel_row_id_seq OWNED BY public.tmp_cds_handler_relationship.rel_row_id;


--
-- Name: tmp_gff_load_cache; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tmp_gff_load_cache (
    feature_id integer,
    uniquename character varying(1000),
    type_id integer,
    organism_id integer
);


ALTER TABLE public.tmp_gff_load_cache OWNER TO postgres;

--
-- Name: trait_components; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_components AS
 SELECT cvterm.cvterm_id AS trait_component_id,
    (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text) AS trait_component_name
   FROM ((((((public.cv
     JOIN public.cvprop ON (((cv.cv_id = cvprop.cv_id) AND (cvprop.type_id IN ( SELECT cvterm_1.cvterm_id
           FROM public.cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = ANY ('{object_ontology,attribute_ontology,method_ontology,unit_ontology,time_ontology}'::text[])))))))
     JOIN public.cvterm ON ((cvprop.cv_id = cvterm.cv_id)))
     JOIN public.dbxref USING (dbxref_id))
     JOIN public.db ON ((dbxref.db_id = db.db_id)))
     LEFT JOIN public.cvterm_relationship is_subject ON ((cvterm.cvterm_id = is_subject.subject_id)))
     LEFT JOIN public.cvterm_relationship is_object ON ((cvterm.cvterm_id = is_object.object_id)))
  WHERE ((is_object.object_id IS NULL) AND (is_subject.subject_id IS NOT NULL))
  GROUP BY (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text), cvterm.cvterm_id
  ORDER BY (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text), cvterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.trait_components OWNER TO postgres;

--
-- Name: traits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.traits AS
 SELECT cvterm.cvterm_id AS trait_id,
    (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text) AS trait_name
   FROM (((((public.cv
     JOIN public.cvprop ON (((cv.cv_id = cvprop.cv_id) AND (cvprop.type_id IN ( SELECT cvterm_1.cvterm_id
           FROM public.cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'trait_ontology'::text))))))
     JOIN public.cvterm ON ((cvprop.cv_id = cvterm.cv_id)))
     JOIN public.dbxref USING (dbxref_id))
     JOIN public.db ON ((dbxref.db_id = db.db_id)))
     LEFT JOIN public.cvterm_relationship is_variable ON (((cvterm.cvterm_id = is_variable.subject_id) AND (is_variable.type_id = ( SELECT cvterm_1.cvterm_id
           FROM public.cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'VARIABLE_OF'::text))))))
  WHERE (is_variable.subject_id IS NOT NULL)
  GROUP BY cvterm.cvterm_id, (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text)
UNION
 SELECT cvterm.cvterm_id AS trait_id,
    (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text) AS trait_name
   FROM (((((public.cv
     JOIN public.cvprop ON (((cv.cv_id = cvprop.cv_id) AND (cvprop.type_id IN ( SELECT cvterm_1.cvterm_id
           FROM public.cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'composed_trait_ontology'::text))))))
     JOIN public.cvterm ON ((cvprop.cv_id = cvterm.cv_id)))
     JOIN public.dbxref USING (dbxref_id))
     JOIN public.db ON ((dbxref.db_id = db.db_id)))
     LEFT JOIN public.cvterm_relationship is_subject ON ((cvterm.cvterm_id = is_subject.subject_id)))
  WHERE (is_subject.subject_id IS NOT NULL)
  GROUP BY cvterm.cvterm_id, (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text)
  ORDER BY 2
  WITH NO DATA;


ALTER TABLE public.traits OWNER TO postgres;

--
-- Name: trait_componentsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_componentsxtraits AS
 SELECT traits.trait_id,
    trait_component.cvterm_id AS trait_component_id
   FROM ((public.traits
     JOIN public.cvterm_relationship ON (((traits.trait_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY traits.trait_id, trait_component.cvterm_id
  WITH NO DATA;


ALTER TABLE public.trait_componentsxtraits OWNER TO postgres;

--
-- Name: trait_componentsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_componentsxtrial_designs AS
 SELECT trait_component.cvterm_id AS trait_component_id,
    trialdesign.value AS trial_design_id
   FROM ((((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY trait_component.cvterm_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.trait_componentsxtrial_designs OWNER TO postgres;

--
-- Name: trait_componentsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_componentsxtrial_types AS
 SELECT trait_component.cvterm_id AS trait_component_id,
    trialterm.cvterm_id AS trial_type_id
   FROM (((((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY trait_component.cvterm_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.trait_componentsxtrial_types OWNER TO postgres;

--
-- Name: trait_componentsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_componentsxtrials AS
 SELECT trait_component.cvterm_id AS trait_component_id,
    materialized_phenoview.trial_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY trait_component.cvterm_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.trait_componentsxtrials OWNER TO postgres;

--
-- Name: trait_componentsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trait_componentsxyears AS
 SELECT trait_component.cvterm_id AS trait_component_id,
    materialized_phenoview.year_id
   FROM (((public.materialized_phenoview
     JOIN public.cvterm trait ON ((materialized_phenoview.trait_id = trait.cvterm_id)))
     JOIN public.cvterm_relationship ON (((trait.cvterm_id = cvterm_relationship.object_id) AND (cvterm_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'contains'::text))))))
     JOIN public.cvterm trait_component ON ((cvterm_relationship.subject_id = trait_component.cvterm_id)))
  GROUP BY trait_component.cvterm_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.trait_componentsxyears OWNER TO postgres;

--
-- Name: traitsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.traitsxtrial_designs AS
 SELECT materialized_phenoview.trait_id,
    trialdesign.value AS trial_design_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY materialized_phenoview.trait_id, trialdesign.value
  WITH NO DATA;


ALTER TABLE public.traitsxtrial_designs OWNER TO postgres;

--
-- Name: traitsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.traitsxtrial_types AS
 SELECT materialized_phenoview.trait_id,
    trialterm.cvterm_id AS trial_type_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY materialized_phenoview.trait_id, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.traitsxtrial_types OWNER TO postgres;

--
-- Name: traitsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.traitsxtrials AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.trial_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.traitsxtrials OWNER TO postgres;

--
-- Name: traitsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.traitsxyears AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.traitsxyears OWNER TO postgres;

--
-- Name: trial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_designs AS
 SELECT projectprop.value AS trial_design_id,
    projectprop.value AS trial_design_name
   FROM (public.projectprop
     JOIN public.cvterm ON ((projectprop.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'design'::text)
  GROUP BY projectprop.value
  WITH NO DATA;


ALTER TABLE public.trial_designs OWNER TO postgres;

--
-- Name: trial_designsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_designsxtrial_types AS
 SELECT trialdesign.value AS trial_design_id,
    trialterm.cvterm_id AS trial_type_id
   FROM (((public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY trialdesign.value, trialterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.trial_designsxtrial_types OWNER TO postgres;

--
-- Name: trial_designsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_designsxtrials AS
 SELECT trialdesign.value AS trial_design_id,
    materialized_phenoview.trial_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY trialdesign.value, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.trial_designsxtrials OWNER TO postgres;

--
-- Name: trial_designsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_designsxyears AS
 SELECT trialdesign.value AS trial_design_id,
    materialized_phenoview.year_id
   FROM (public.materialized_phenoview
     JOIN public.projectprop trialdesign ON (((materialized_phenoview.trial_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'design'::text))))))
  GROUP BY trialdesign.value, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.trial_designsxyears OWNER TO postgres;

--
-- Name: trial_typesxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_typesxtrials AS
 SELECT trialterm.cvterm_id AS trial_type_id,
    materialized_phenoview.trial_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY trialterm.cvterm_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE public.trial_typesxtrials OWNER TO postgres;

--
-- Name: trial_typesxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_typesxyears AS
 SELECT trialterm.cvterm_id AS trial_type_id,
    materialized_phenoview.year_id
   FROM ((public.materialized_phenoview
     JOIN public.projectprop trialprop ON (((materialized_phenoview.trial_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM (public.cvterm
             JOIN public.cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     JOIN public.cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
  GROUP BY trialterm.cvterm_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.trial_typesxyears OWNER TO postgres;

--
-- Name: trials; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trials AS
 SELECT trial.project_id AS trial_id,
    trial.name AS trial_name
   FROM (((public.project breeding_program
     JOIN public.project_relationship ON (((breeding_program.project_id = project_relationship.object_project_id) AND (project_relationship.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'breeding_program_trial_relationship'::text))))))
     JOIN public.project trial ON ((project_relationship.subject_project_id = trial.project_id)))
     JOIN public.projectprop ON ((trial.project_id = projectprop.project_id)))
  WHERE (NOT (projectprop.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE (((cvterm.name)::text = 'cross'::text) OR ((cvterm.name)::text = 'trial_folder'::text) OR ((cvterm.name)::text = 'folder_for_trials'::text) OR ((cvterm.name)::text = 'folder_for_crosses'::text)))))
  GROUP BY trial.project_id, trial.name
  WITH NO DATA;


ALTER TABLE public.trials OWNER TO postgres;

--
-- Name: trialsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trialsxyears AS
 SELECT materialized_phenoview.trial_id,
    materialized_phenoview.year_id
   FROM public.materialized_phenoview
  GROUP BY materialized_phenoview.trial_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE public.trialsxyears OWNER TO postgres;

--
-- Name: unigene_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.unigene_dbxref (
    unigene_dbxref_id integer NOT NULL,
    unigene_id bigint NOT NULL,
    dbxref_id bigint NOT NULL
);


ALTER TABLE public.unigene_dbxref OWNER TO postgres;

--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.unigene_dbxref_unigene_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.unigene_dbxref_unigene_dbxref_id_seq OWNER TO postgres;

--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.unigene_dbxref_unigene_dbxref_id_seq OWNED BY public.unigene_dbxref.unigene_dbxref_id;


--
-- Name: unigene_relations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.unigene_relations (
    unigene_id bigint NOT NULL,
    superceded_by bigint,
    superceding_build_nr integer,
    superceding_organism text
);


ALTER TABLE public.unigene_relations OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: unigene_signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.unigene_signalp (
    unigene_id bigint NOT NULL,
    nn_cmax real,
    nn_cpos smallint,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos smallint,
    nn_yd character(1),
    nn_smax real,
    nn_spos smallint,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos smallint,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1),
    cds_id bigint
);


ALTER TABLE public.unigene_signalp OWNER TO postgres;

--
-- Name: years; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.years AS
 SELECT projectprop.value AS year_id,
    projectprop.value AS year_name
   FROM public.projectprop
  WHERE (projectprop.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'project year'::text)))
  GROUP BY projectprop.value
  WITH NO DATA;


ALTER TABLE public.years OWNER TO postgres;

--
-- Name: accession; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.accession (
    accession_id integer NOT NULL,
    organism_id bigint,
    common_name character varying(80),
    accession_name_id bigint,
    chado_organism_id integer,
    stock_id integer
);


ALTER TABLE sgn.accession OWNER TO postgres;

--
-- Name: accession_accession_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.accession_accession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.accession_accession_id_seq OWNER TO postgres;

--
-- Name: accession_accession_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.accession_accession_id_seq OWNED BY sgn.accession.accession_id;


--
-- Name: accession_names; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.accession_names (
    accession_name_id bigint NOT NULL,
    accession_name character varying(255),
    accession_id bigint
);


ALTER TABLE sgn.accession_names OWNER TO postgres;

--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.accession_names_accession_name_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.accession_names_accession_name_id_seq OWNER TO postgres;

--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.accession_names_accession_name_id_seq OWNED BY sgn.accession_names.accession_name_id;


--
-- Name: annotation_target_type; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.annotation_target_type (
    annotation_target_type_id bigint NOT NULL,
    type_name character varying(25),
    type_description character varying(250),
    table_name character varying(250),
    index_field_name character varying(250)
);


ALTER TABLE sgn.annotation_target_type OWNER TO postgres;

--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.annotation_target_type_annotation_target_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.annotation_target_type_annotation_target_type_id_seq OWNER TO postgres;

--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.annotation_target_type_annotation_target_type_id_seq OWNED BY sgn.annotation_target_type.annotation_target_type_id;


--
-- Name: authors; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.authors (
    author_id integer NOT NULL,
    name text,
    institution text
);


ALTER TABLE sgn.authors OWNER TO postgres;

--
-- Name: authors_author_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.authors_author_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.authors_author_id_seq OWNER TO postgres;

--
-- Name: authors_author_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.authors_author_id_seq OWNED BY sgn.authors.author_id;


--
-- Name: blast_annotations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_annotations (
    blast_annotation_id integer NOT NULL,
    apply_id integer,
    apply_type integer,
    blast_target_id integer,
    n_hits integer,
    hits_stored integer,
    last_updated integer,
    host character varying(20),
    pid integer
);


ALTER TABLE sgn.blast_annotations OWNER TO postgres;

--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_annotations_blast_annotation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_annotations_blast_annotation_id_seq OWNER TO postgres;

--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_annotations_blast_annotation_id_seq OWNED BY sgn.blast_annotations.blast_annotation_id;


--
-- Name: blast_db; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_db (
    blast_db_id integer NOT NULL,
    file_base character varying(120) NOT NULL,
    title character varying(80) NOT NULL,
    type character varying(80) NOT NULL,
    source_url character varying(255),
    lookup_url character varying(255),
    update_freq character varying(80) DEFAULT 'monthly'::character varying NOT NULL,
    info_url character varying(255),
    index_seqs boolean DEFAULT true NOT NULL,
    blast_db_group_id integer,
    web_interface_visible boolean DEFAULT false,
    description text,
    jbrowse_src character varying(80),
    CONSTRAINT blast_db_file_base_check CHECK (((file_base)::text !~~ '/%'::text)),
    CONSTRAINT blast_db_info_url_check CHECK (((info_url IS NULL) OR ((info_url)::text ~ similar_escape('(ftp|http|https)://%'::text, NULL::text)))),
    CONSTRAINT blast_db_lookup_url_check CHECK (((lookup_url IS NULL) OR ((lookup_url)::text ~ similar_escape('(ftp|http|https)://%%s%'::text, NULL::text)))),
    CONSTRAINT blast_db_source_url_check CHECK (((source_url IS NULL) OR ((source_url)::text ~ similar_escape('(ftp|http|https|cxgn-resource|file)://%'::text, NULL::text)))),
    CONSTRAINT blast_db_type_check CHECK ((((type)::text = 'protein'::text) OR ((type)::text = 'nucleotide'::text))),
    CONSTRAINT blast_db_update_freq_check CHECK ((((update_freq)::text = 'daily'::text) OR ((update_freq)::text = 'weekly'::text) OR ((update_freq)::text = 'monthly'::text) OR ((update_freq)::text = 'manual'::text)))
);


ALTER TABLE sgn.blast_db OWNER TO postgres;

--
-- Name: TABLE blast_db; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON TABLE sgn.blast_db IS 'This table holds metadata about the BLAST databases that we keep in stock.';


--
-- Name: COLUMN blast_db.file_base; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.blast_db.file_base IS 'the basename of the blast db files, relative to the root of the databases repository.  A blast DB is usually composed of 3 files, all with a given basename, and with the extensions .[pn]in, .[pn]sq, and .[pn]hr.';


--
-- Name: COLUMN blast_db.index_seqs; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.blast_db.index_seqs IS 'corresponds to formatdb -o option.  Set true if formatdb should be given a ''-o T''.  This is used only if you later want to fetch specific sequences out of this blast db.';


--
-- Name: COLUMN blast_db.blast_db_group_id; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.blast_db.blast_db_group_id IS 'blast_db_group this belongs to, for displaying on web';


--
-- Name: COLUMN blast_db.web_interface_visible; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.blast_db.web_interface_visible IS 'whether this blast DB is available for BLASTing via web interfaces';


SET default_with_oids = false;

--
-- Name: blast_db_blast_db_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_db_blast_db_group (
    blast_db_blast_db_group_id integer NOT NULL,
    blast_db_id bigint,
    blast_db_group_id bigint
);


ALTER TABLE sgn.blast_db_blast_db_group OWNER TO postgres;

--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_db_blast_db_group_blast_db_blast_db_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_db_blast_db_group_blast_db_blast_db_group_id_seq OWNER TO postgres;

--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_db_blast_db_group_blast_db_blast_db_group_id_seq OWNED BY sgn.blast_db_blast_db_group.blast_db_blast_db_group_id;


--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_db_blast_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_db_blast_db_id_seq OWNER TO postgres;

--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_db_blast_db_id_seq OWNED BY sgn.blast_db.blast_db_id;


SET default_with_oids = false;

--
-- Name: blast_db_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_db_group (
    blast_db_group_id integer NOT NULL,
    name character varying(50),
    ordinal integer
);


ALTER TABLE sgn.blast_db_group OWNER TO postgres;

--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_db_group_blast_db_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_db_group_blast_db_group_id_seq OWNER TO postgres;

--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_db_group_blast_db_group_id_seq OWNED BY sgn.blast_db_group.blast_db_group_id;


SET default_with_oids = false;

--
-- Name: blast_db_organism; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_db_organism (
    blast_db_organism_id integer NOT NULL,
    blast_db_id bigint,
    organism_id bigint
);


ALTER TABLE sgn.blast_db_organism OWNER TO postgres;

--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_db_organism_blast_db_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_db_organism_blast_db_organism_id_seq OWNER TO postgres;

--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_db_organism_blast_db_organism_id_seq OWNED BY sgn.blast_db_organism.blast_db_organism_id;


SET default_with_oids = false;

--
-- Name: blast_defline; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_defline (
    defline_id integer NOT NULL,
    blast_target_id integer,
    target_db_id character varying(255),
    defline text,
    defline_fulltext tsvector,
    identifier_defline_fulltext tsvector
);


ALTER TABLE sgn.blast_defline OWNER TO postgres;

--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_defline_defline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_defline_defline_id_seq OWNER TO postgres;

--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_defline_defline_id_seq OWNED BY sgn.blast_defline.defline_id;


--
-- Name: blast_hits; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_hits (
    blast_hit_id integer NOT NULL,
    blast_annotation_id integer,
    target_db_id character varying(255),
    evalue double precision,
    score double precision,
    identity_percentage double precision,
    apply_start bigint,
    apply_end bigint,
    defline_id integer
);


ALTER TABLE sgn.blast_hits OWNER TO postgres;

--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_hits_blast_hit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_hits_blast_hit_id_seq OWNER TO postgres;

--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_hits_blast_hit_id_seq OWNED BY sgn.blast_hits.blast_hit_id;


--
-- Name: blast_targets; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.blast_targets (
    blast_target_id integer NOT NULL,
    blast_program character varying(7),
    db_name character varying(80),
    db_path character varying(255),
    local_copy_timestamp integer
);


ALTER TABLE sgn.blast_targets OWNER TO postgres;

--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.blast_targets_blast_target_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.blast_targets_blast_target_id_seq OWNER TO postgres;

--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.blast_targets_blast_target_id_seq OWNED BY sgn.blast_targets.blast_target_id;


--
-- Name: cds; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.cds (
    cds_id bigint NOT NULL,
    unigene_id bigint,
    seq_text text,
    seq_edits text,
    protein_seq text,
    begin integer,
    "end" integer,
    forward_reverse character(1),
    run_id bigint,
    score integer,
    method character varying(20),
    frame character varying(2),
    preferred boolean,
    cds_seq text,
    protein_feature_id bigint
);


ALTER TABLE sgn.cds OWNER TO postgres;

--
-- Name: cds_cds_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.cds_cds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.cds_cds_id_seq OWNER TO postgres;

--
-- Name: cds_cds_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.cds_cds_id_seq OWNED BY sgn.cds.cds_id;


SET default_with_oids = false;

--
-- Name: chadoprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.chadoprop (
    chadoprop_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE sgn.chadoprop OWNER TO postgres;

--
-- Name: TABLE chadoprop; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON TABLE sgn.chadoprop IS 'This table is different from other prop tables in the database, as it is for storing information about the database itself, like schema version';


--
-- Name: COLUMN chadoprop.type_id; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.chadoprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN chadoprop.value; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.chadoprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN chadoprop.rank; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN sgn.chadoprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.chadoprop_chadoprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.chadoprop_chadoprop_id_seq OWNER TO postgres;

--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.chadoprop_chadoprop_id_seq OWNED BY sgn.chadoprop.chadoprop_id;


SET default_with_oids = false;

--
-- Name: clone; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.clone (
    clone_id integer NOT NULL,
    library_id integer,
    clone_name character varying(50),
    clone_group_id integer
);


ALTER TABLE sgn.clone OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.clone_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.clone_clone_id_seq OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.clone_clone_id_seq OWNED BY sgn.clone.clone_id;


--
-- Name: cloning_vector; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.cloning_vector (
    cloning_vector_id integer NOT NULL,
    name character varying(32),
    seq text
);


ALTER TABLE sgn.cloning_vector OWNER TO postgres;

--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.cloning_vector_cloning_vector_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.cloning_vector_cloning_vector_id_seq OWNER TO postgres;

--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.cloning_vector_cloning_vector_id_seq OWNED BY sgn.cloning_vector.cloning_vector_id;


--
-- Name: common_name; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.common_name (
    common_name_id bigint NOT NULL,
    common_name character varying(255) NOT NULL
);


ALTER TABLE sgn.common_name OWNER TO postgres;

--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.common_name_common_name_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.common_name_common_name_id_seq OWNER TO postgres;

--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.common_name_common_name_id_seq OWNED BY sgn.common_name.common_name_id;


SET default_with_oids = false;

--
-- Name: common_nameprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.common_nameprop (
    common_nameprop_id integer NOT NULL,
    common_name_id integer NOT NULL,
    type_id integer NOT NULL,
    value character varying(32) NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE sgn.common_nameprop OWNER TO postgres;

--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.common_nameprop_common_nameprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.common_nameprop_common_nameprop_id_seq OWNER TO postgres;

--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.common_nameprop_common_nameprop_id_seq OWNED BY sgn.common_nameprop.common_nameprop_id;


--
-- Name: composed_trait_ids; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.composed_trait_ids
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.composed_trait_ids OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: cos_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.cos_markers (
    cos_marker_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    est_read_id bigint DEFAULT (0)::bigint NOT NULL,
    cos_id character varying(10) DEFAULT ''::character varying NOT NULL,
    at_match character varying(25),
    bac_id bigint,
    at_position numeric(11,7),
    best_gb_prot_hit character varying(25),
    at_evalue character varying(25),
    at_identities numeric(11,3),
    mips_cat character varying(11),
    description text,
    comment text,
    tomato_copy_number character varying(11),
    gbprot_evalue character varying(25),
    gbprot_identities numeric(11,3)
);


ALTER TABLE sgn.cos_markers OWNER TO postgres;

--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.cos_markers_cos_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.cos_markers_cos_marker_id_seq OWNER TO postgres;

--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.cos_markers_cos_marker_id_seq OWNED BY sgn.cos_markers.cos_marker_id;


--
-- Name: cosii_ortholog; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.cosii_ortholog (
    cosii_unigene_id bigint NOT NULL,
    marker_id bigint,
    unigene_id integer,
    copies character varying(1),
    database_name character varying(11),
    sequence_name character varying(255),
    edited_sequence_id bigint,
    peptide_sequence_id bigint,
    introns text,
    CONSTRAINT cosii_ortholog_copies_check CHECK ((((copies)::text = 'S'::text) OR ((copies)::text = 'M'::text))),
    CONSTRAINT cosii_ortholog_database_name_check CHECK ((((database_name)::text = 'SGN'::text) OR ((database_name)::text = 'Arabidopsis'::text) OR ((database_name)::text = 'Coffee'::text)))
);


ALTER TABLE sgn.cosii_ortholog OWNER TO postgres;

--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.cosii_ortholog_cosii_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.cosii_ortholog_cosii_unigene_id_seq OWNER TO postgres;

--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.cosii_ortholog_cosii_unigene_id_seq OWNED BY sgn.cosii_ortholog.cosii_unigene_id;


--
-- Name: deprecated_linkage_groups; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_linkage_groups (
    lg_id bigint NOT NULL,
    map_id bigint,
    lg_order bigint,
    lg_name character varying(255)
);


ALTER TABLE sgn.deprecated_linkage_groups OWNER TO postgres;

--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_linkage_groups_lg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_linkage_groups_lg_id_seq OWNER TO postgres;

--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_linkage_groups_lg_id_seq OWNED BY sgn.deprecated_linkage_groups.lg_id;


--
-- Name: deprecated_map_cross; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_map_cross (
    map_cross_id integer NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    organism_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE sgn.deprecated_map_cross OWNER TO postgres;

--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_map_cross_map_cross_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_map_cross_map_cross_id_seq OWNER TO postgres;

--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_map_cross_map_cross_id_seq OWNED BY sgn.deprecated_map_cross.map_cross_id;


--
-- Name: deprecated_mapdata; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_mapdata (
    loc_id integer NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    lg_id bigint,
    "offset" numeric(8,5),
    loc_type bigint DEFAULT (0)::bigint NOT NULL,
    loc_order bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE sgn.deprecated_mapdata OWNER TO postgres;

--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_mapdata_loc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_mapdata_loc_id_seq OWNER TO postgres;

--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_mapdata_loc_id_seq OWNED BY sgn.deprecated_mapdata.loc_id;


--
-- Name: deprecated_maps; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_maps (
    map_id integer NOT NULL,
    legacy_id bigint DEFAULT (0)::bigint NOT NULL,
    short_name character varying(50) DEFAULT ''::character varying NOT NULL,
    long_name character varying(250) DEFAULT ''::character varying NOT NULL,
    number_chromosomes bigint DEFAULT (0)::bigint NOT NULL,
    default_threshold bigint DEFAULT (0)::bigint NOT NULL,
    header text NOT NULL,
    abstract text NOT NULL,
    genetic_cross character varying(250),
    population_type character varying(250),
    population_size bigint,
    seed_available bigint,
    seed_url character varying(250),
    deprecated_by bigint DEFAULT (0)::bigint,
    map_type character varying(7),
    CONSTRAINT maps_map_type_check CHECK ((((map_type)::text = 'genetic'::text) OR ((map_type)::text = 'fish'::text)))
);


ALTER TABLE sgn.deprecated_maps OWNER TO postgres;

--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_maps_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_maps_map_id_seq OWNER TO postgres;

--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_maps_map_id_seq OWNED BY sgn.deprecated_maps.map_id;


--
-- Name: deprecated_marker_confidences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_marker_confidences (
    confidence_id integer NOT NULL,
    confidence_name character varying(16),
    legacy_conf_id bigint,
    CONSTRAINT legacy_conf_id_not_null CHECK ((legacy_conf_id IS NOT NULL))
);


ALTER TABLE sgn.deprecated_marker_confidences OWNER TO postgres;

--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_marker_confidences_confidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_marker_confidences_confidence_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_marker_confidences_confidence_id_seq OWNED BY sgn.deprecated_marker_confidences.confidence_id;


--
-- Name: deprecated_marker_locations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_marker_locations (
    marker_location_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    loc_id bigint DEFAULT (0)::bigint NOT NULL,
    confidence bigint DEFAULT (0)::bigint NOT NULL,
    order_in_loc bigint DEFAULT (0)::bigint NOT NULL,
    location_subscript character(2),
    mapmaker_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE sgn.deprecated_marker_locations OWNER TO postgres;

--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_marker_locations_marker_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_marker_locations_marker_location_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_marker_locations_marker_location_id_seq OWNED BY sgn.deprecated_marker_locations.marker_location_id;


--
-- Name: deprecated_marker_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_marker_types (
    marker_type_id integer NOT NULL,
    type_name character varying(32),
    description text,
    marker_table character varying(128)
);


ALTER TABLE sgn.deprecated_marker_types OWNER TO postgres;

--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_marker_types_marker_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_marker_types_marker_type_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_marker_types_marker_type_id_seq OWNED BY sgn.deprecated_marker_types.marker_type_id;


--
-- Name: deprecated_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.deprecated_markers (
    marker_id integer NOT NULL,
    marker_type bigint DEFAULT (0)::bigint NOT NULL,
    marker_name character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE sgn.deprecated_markers OWNER TO postgres;

--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.deprecated_markers_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.deprecated_markers_marker_id_seq OWNER TO postgres;

--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.deprecated_markers_marker_id_seq OWNED BY sgn.deprecated_markers.marker_id;


--
-- Name: derived_from_source; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.derived_from_source (
    derived_from_source_id integer NOT NULL,
    source_name text,
    source_schema text,
    source_table text,
    source_col text
);


ALTER TABLE sgn.derived_from_source OWNER TO postgres;

--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.derived_from_source_derived_from_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.derived_from_source_derived_from_source_id_seq OWNER TO postgres;

--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.derived_from_source_derived_from_source_id_seq OWNED BY sgn.derived_from_source.derived_from_source_id;


--
-- Name: domain; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.domain (
    domain_id bigint NOT NULL,
    method_id bigint,
    domain_accession character varying(20),
    description text,
    interpro_id bigint,
    description_fulltext tsvector,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE sgn.domain OWNER TO postgres;

--
-- Name: domain_domain_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.domain_domain_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.domain_domain_id_seq OWNER TO postgres;

--
-- Name: domain_domain_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.domain_domain_id_seq OWNED BY sgn.domain.domain_id;


--
-- Name: domain_match; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.domain_match (
    domain_match_id bigint NOT NULL,
    cds_id bigint,
    unigene_id bigint,
    domain_id bigint,
    match_begin integer,
    match_end integer,
    e_value character varying(10),
    hit_status character(1),
    run_id bigint,
    metadata_id bigint
);


ALTER TABLE sgn.domain_match OWNER TO postgres;

--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.domain_match_domain_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.domain_match_domain_match_id_seq OWNER TO postgres;

--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.domain_match_domain_match_id_seq OWNED BY sgn.domain_match.domain_match_id;


--
-- Name: enzyme_restriction_sites; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.enzyme_restriction_sites (
    enzyme_id integer,
    restriction_site text,
    enzyme_restriction_sites_id integer NOT NULL
);


ALTER TABLE sgn.enzyme_restriction_sites OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.enzyme_restriction_sites_enzyme_restriction_sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNED BY sgn.enzyme_restriction_sites.enzyme_restriction_sites_id;


--
-- Name: enzymes; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.enzymes (
    enzyme_id integer NOT NULL,
    enzyme_name character varying(32)
);


ALTER TABLE sgn.enzymes OWNER TO postgres;

--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.enzymes_enzyme_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.enzymes_enzyme_id_seq OWNER TO postgres;

--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.enzymes_enzyme_id_seq OWNED BY sgn.enzymes.enzyme_id;


--
-- Name: est; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.est (
    est_id integer NOT NULL,
    read_id integer,
    version integer,
    basecaller character varying(40),
    seq text,
    qscore text,
    call_positions text,
    status integer,
    flags bigint,
    date date,
    genbank_submission_date date,
    genbank_confirmed boolean
);


ALTER TABLE sgn.est OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: est_dbxref; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.est_dbxref (
    est_dbxref_id integer NOT NULL,
    est_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE sgn.est_dbxref OWNER TO postgres;

--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.est_dbxref_est_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.est_dbxref_est_dbxref_id_seq OWNER TO postgres;

--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.est_dbxref_est_dbxref_id_seq OWNED BY sgn.est_dbxref.est_dbxref_id;


--
-- Name: est_est_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.est_est_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.est_est_id_seq OWNER TO postgres;

--
-- Name: est_est_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.est_est_id_seq OWNED BY sgn.est.est_id;


SET default_with_oids = false;

--
-- Name: ests_mapped_by_clone; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.ests_mapped_by_clone (
    embc_id integer NOT NULL,
    marker_id bigint,
    clone_id bigint
);


ALTER TABLE sgn.ests_mapped_by_clone OWNER TO postgres;

--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.ests_mapped_by_clone_embc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.ests_mapped_by_clone_embc_id_seq OWNER TO postgres;

--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.ests_mapped_by_clone_embc_id_seq OWNED BY sgn.ests_mapped_by_clone.embc_id;


--
-- Name: experiment_type; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.experiment_type (
    experiment_type_id bigint NOT NULL,
    name character varying(255),
    description text
);


ALTER TABLE sgn.experiment_type OWNER TO postgres;

--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.experiment_type_experiment_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.experiment_type_experiment_type_id_seq OWNER TO postgres;

--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.experiment_type_experiment_type_id_seq OWNED BY sgn.experiment_type.experiment_type_id;


--
-- Name: facility; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.facility (
    facility_id integer NOT NULL,
    submit_user_id integer,
    facility_moniker character varying(20),
    facility_shortname character varying(12),
    facility_name character varying(80),
    facility_contact character varying(80),
    facility_address text,
    funding_agency character varying(80),
    funding_comment text,
    sequencing_primers character varying(80),
    machine character varying(40),
    chemistry character varying(40),
    attribution_display text,
    sp_person_id integer
);


ALTER TABLE sgn.facility OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.facility_facility_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.facility_facility_id_seq OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.facility_facility_id_seq OWNED BY sgn.facility.facility_id;


--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.family_build_family_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.family_build_family_build_id_seq OWNER TO postgres;

--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.family_build_family_build_id_seq OWNED BY sgn.family_build.family_build_id;


--
-- Name: family_family_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.family_family_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.family_family_id_seq OWNER TO postgres;

--
-- Name: family_family_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.family_family_id_seq OWNED BY sgn.family.family_id;


--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.family_member_family_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.family_member_family_member_id_seq OWNER TO postgres;

--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.family_member_family_member_id_seq OWNED BY sgn.family_member.family_member_id;


--
-- Name: family_tree; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.family_tree (
    family_tree_id integer NOT NULL,
    family_id integer NOT NULL,
    tree_nr integer,
    newick_cds character varying,
    newick_unigene character varying
);


ALTER TABLE sgn.family_tree OWNER TO postgres;

--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.family_tree_family_tree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.family_tree_family_tree_id_seq OWNER TO postgres;

--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.family_tree_family_tree_id_seq OWNED BY sgn.family_tree.family_tree_id;


--
-- Name: fish_chromatin_density_constants; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_chromatin_density_constants (
    arm character varying(1) DEFAULT 'E'::character varying NOT NULL,
    density real,
    CONSTRAINT fish_chromatin_density_constants_arm_check CHECK ((((arm)::text = 'E'::text) OR ((arm)::text = 'H'::text)))
);


ALTER TABLE sgn.fish_chromatin_density_constants OWNER TO postgres;

--
-- Name: fish_experimenter; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_experimenter (
    fish_experimenter_id integer NOT NULL,
    fish_experimenter_name character varying(20)
);


ALTER TABLE sgn.fish_experimenter OWNER TO postgres;

--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.fish_experimenter_fish_experimenter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.fish_experimenter_fish_experimenter_id_seq OWNER TO postgres;

--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.fish_experimenter_fish_experimenter_id_seq OWNED BY sgn.fish_experimenter.fish_experimenter_id;


--
-- Name: fish_file; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_file (
    fish_file_id bigint NOT NULL,
    filename character varying(255),
    fish_result_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE sgn.fish_file OWNER TO postgres;

--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.fish_file_fish_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.fish_file_fish_file_id_seq OWNER TO postgres;

--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.fish_file_fish_file_id_seq OWNED BY sgn.fish_file.fish_file_id;


--
-- Name: fish_image; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_image (
    fish_image_id integer DEFAULT 0 NOT NULL,
    filename character varying(255),
    fish_result_id integer DEFAULT 0 NOT NULL
);


ALTER TABLE sgn.fish_image OWNER TO postgres;

--
-- Name: fish_karyotype_constants; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_karyotype_constants (
    fish_experimenter_id integer NOT NULL,
    chromo_num smallint NOT NULL,
    chromo_arm text NOT NULL,
    arm_length numeric(5,2) NOT NULL,
    arm_eu_length numeric(5,2) NOT NULL,
    arm_het_length numeric(5,2) NOT NULL,
    CONSTRAINT chromo_arm_enum CHECK (((chromo_arm = 'P'::text) OR (chromo_arm = 'Q'::text)))
);


ALTER TABLE sgn.fish_karyotype_constants OWNER TO postgres;

--
-- Name: fish_karyotype_constants_old; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_karyotype_constants_old (
    chromo_num smallint DEFAULT (0)::smallint NOT NULL,
    chromo_length real,
    chromo_arm_ratio real,
    short_arm_length real,
    short_arm_eu_length real,
    short_arm_het_length real,
    long_arm_length real,
    long_arm_eu_length real,
    long_arm_het_length real
);


ALTER TABLE sgn.fish_karyotype_constants_old OWNER TO postgres;

--
-- Name: fish_result; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_result (
    fish_result_id bigint NOT NULL,
    map_id bigint NOT NULL,
    fish_experimenter_id integer NOT NULL,
    experiment_name character varying(10) NOT NULL,
    clone_id bigint NOT NULL,
    chromo_num smallint NOT NULL,
    chromo_arm character varying(1) NOT NULL,
    percent_from_centromere real NOT NULL,
    experiment_group character varying(12),
    attribution_id bigint,
    CONSTRAINT fish_result_chromo_arm_check CHECK ((((chromo_arm)::text = 'P'::text) OR ((chromo_arm)::text = 'Q'::text)))
);


ALTER TABLE sgn.fish_result OWNER TO postgres;

--
-- Name: fish_result_composite; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_result_composite (
    fish_result_id bigint DEFAULT (0)::bigint NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    fish_experimenter_id integer,
    experiment_name character varying(10),
    clone_id bigint DEFAULT (0)::bigint NOT NULL,
    chromo_num smallint DEFAULT (0)::smallint NOT NULL,
    chromo_arm character varying(1) DEFAULT 'P'::character varying NOT NULL,
    percent_from_centromere real DEFAULT (0)::real NOT NULL,
    het_or_eu character varying(1),
    um_from_centromere real,
    um_from_arm_end real,
    um_from_arm_border real,
    mbp_from_arm_end real,
    mbp_from_centromere real,
    mbp_from_arm_border real,
    experiment_group character varying(12),
    CONSTRAINT fish_result_composite_chromo_arm_check CHECK ((((chromo_arm)::text = 'P'::text) OR ((chromo_arm)::text = 'Q'::text))),
    CONSTRAINT fish_result_composite_het_or_eu_check CHECK ((((het_or_eu)::text = 'H'::text) OR ((het_or_eu)::text = 'E'::text)))
);


ALTER TABLE sgn.fish_result_composite OWNER TO postgres;

--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.fish_result_fish_result_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.fish_result_fish_result_id_seq OWNER TO postgres;

--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.fish_result_fish_result_id_seq OWNED BY sgn.fish_result.fish_result_id;


SET default_with_oids = false;

--
-- Name: fish_result_image; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.fish_result_image (
    fish_result_image_id integer NOT NULL,
    image_id bigint,
    fish_result_id bigint
);


ALTER TABLE sgn.fish_result_image OWNER TO postgres;

--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.fish_result_image_fish_result_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.fish_result_image_fish_result_image_id_seq OWNER TO postgres;

--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.fish_result_image_fish_result_image_id_seq OWNED BY sgn.fish_result_image.fish_result_image_id;


SET default_with_oids = false;

--
-- Name: go; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.go (
    go_id bigint NOT NULL,
    go_accession character varying(20),
    description text,
    description_fulltext tsvector
);


ALTER TABLE sgn.go OWNER TO postgres;

--
-- Name: go_go_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.go_go_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.go_go_id_seq OWNER TO postgres;

--
-- Name: go_go_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.go_go_id_seq OWNED BY sgn.go.go_id;


--
-- Name: group_linkage; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.group_linkage (
    group_linkage_id integer NOT NULL,
    group_id integer,
    member_id integer,
    member_type bigint,
    member_value bytea
);


ALTER TABLE sgn.group_linkage OWNER TO postgres;

--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.group_linkage_group_linkage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.group_linkage_group_linkage_id_seq OWNER TO postgres;

--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.group_linkage_group_linkage_id_seq OWNED BY sgn.group_linkage.group_linkage_id;


--
-- Name: groups; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.groups (
    group_id integer NOT NULL,
    type integer,
    comment text
);


ALTER TABLE sgn.groups OWNER TO postgres;

--
-- Name: groups_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.groups_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.groups_group_id_seq OWNER TO postgres;

--
-- Name: groups_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.groups_group_id_seq OWNED BY sgn.groups.group_id;


--
-- Name: id_linkage; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.id_linkage (
    id_linkage_id integer NOT NULL,
    link_id character varying(80),
    link_id_type integer,
    internal_id integer,
    internal_id_type integer
);


ALTER TABLE sgn.id_linkage OWNER TO postgres;

--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.id_linkage_id_linkage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.id_linkage_id_linkage_id_seq OWNER TO postgres;

--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.id_linkage_id_linkage_id_seq OWNED BY sgn.id_linkage.id_linkage_id;


SET default_with_oids = false;

--
-- Name: il_info; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.il_info (
    ns_marker_id integer,
    sn_marker_id integer,
    map_id integer,
    map_version_id integer,
    population_id bigint,
    ns_position numeric(8,5),
    sn_position numeric(8,5),
    name character varying(100),
    ns_alias text,
    sn_alias text,
    lg_name text
);


ALTER TABLE sgn.il_info OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: interpro; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.interpro (
    interpro_id bigint NOT NULL,
    interpro_accession character varying(20),
    description text,
    description_fulltext tsvector
);


ALTER TABLE sgn.interpro OWNER TO postgres;

--
-- Name: interpro_go; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.interpro_go (
    interpro_go_id bigint NOT NULL,
    interpro_accession character varying(20),
    go_accession character varying(20)
);


ALTER TABLE sgn.interpro_go OWNER TO postgres;

--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.interpro_go_interpro_go_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.interpro_go_interpro_go_id_seq OWNER TO postgres;

--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.interpro_go_interpro_go_id_seq OWNED BY sgn.interpro_go.interpro_go_id;


--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.interpro_interpro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.interpro_interpro_id_seq OWNER TO postgres;

--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.interpro_interpro_id_seq OWNED BY sgn.interpro.interpro_id;


--
-- Name: library; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.library (
    library_id integer NOT NULL,
    type bigint,
    submit_user_id integer,
    library_name character varying(80),
    library_shortname character varying(16),
    authors character varying(255),
    organism_id integer,
    cultivar character varying(255),
    accession character varying(255),
    tissue character varying(255),
    development_stage character varying(255),
    treatment_conditions text,
    cloning_host character varying(80),
    vector character varying(80),
    rs1 character varying(12),
    rs2 character varying(12),
    cloning_kit character varying(255),
    comments text,
    contact_information text,
    order_routing_id bigint,
    sp_person_id integer,
    forward_adapter character varying,
    reverse_adapter character varying,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    chado_organism_id integer
);


ALTER TABLE sgn.library OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.library_library_id_seq OWNED BY sgn.library.library_id;


--
-- Name: linkage_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.linkage_group (
    lg_id integer NOT NULL,
    map_version_id integer,
    lg_order integer NOT NULL,
    lg_name text,
    north_location_id integer,
    south_location_id integer
);


ALTER TABLE sgn.linkage_group OWNER TO postgres;

--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.linkage_group_lg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.linkage_group_lg_id_seq OWNER TO postgres;

--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.linkage_group_lg_id_seq OWNED BY sgn.linkage_group.lg_id;


--
-- Name: loc_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.loc_types (
    loc_type_id integer NOT NULL,
    type_code character varying(10) DEFAULT ''::character varying NOT NULL,
    type_name character varying(12) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE sgn.loc_types OWNER TO postgres;

--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.loc_types_loc_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.loc_types_loc_type_id_seq OWNER TO postgres;

--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.loc_types_loc_type_id_seq OWNED BY sgn.loc_types.loc_type_id;


--
-- Name: manual_annotations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.manual_annotations (
    manual_annotations_id bigint NOT NULL,
    annotation_target_id bigint,
    annotation_target_type_id bigint,
    annotation_text text,
    author_id bigint,
    date_entered date,
    last_modified date,
    annotation_text_fulltext tsvector
);


ALTER TABLE sgn.manual_annotations OWNER TO postgres;

--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.manual_annotations_manual_annotations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.manual_annotations_manual_annotations_id_seq OWNER TO postgres;

--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.manual_annotations_manual_annotations_id_seq OWNED BY sgn.manual_annotations.manual_annotations_id;


--
-- Name: manual_censor_reasons; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.manual_censor_reasons (
    censor_id integer NOT NULL,
    reason text
);


ALTER TABLE sgn.manual_censor_reasons OWNER TO postgres;

--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.manual_censor_reasons_censor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.manual_censor_reasons_censor_id_seq OWNER TO postgres;

--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.manual_censor_reasons_censor_id_seq OWNED BY sgn.manual_censor_reasons.censor_id;


--
-- Name: map; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.map (
    map_id integer NOT NULL,
    short_name text NOT NULL,
    long_name text,
    abstract text,
    map_type text,
    parent_1 integer,
    parent_2 integer,
    units text DEFAULT 'cM'::text,
    ancestor integer,
    population_id integer,
    parent1_stock_id bigint,
    parent2_stock_id bigint,
    population_stock_id bigint,
    CONSTRAINT map_map_type_check CHECK (((map_type = 'genetic'::text) OR (map_type = 'fish'::text) OR (map_type = 'sequence'::text) OR (map_type = 'QTL'::text))),
    CONSTRAINT map_units_check CHECK (((units = 'cM'::text) OR (units = 'Mb'::text)))
);


ALTER TABLE sgn.map OWNER TO postgres;

--
-- Name: map_map_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.map_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.map_map_id_seq OWNER TO postgres;

--
-- Name: map_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.map_map_id_seq OWNED BY sgn.map.map_id;


--
-- Name: map_version; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.map_version (
    map_version_id integer NOT NULL,
    map_id integer,
    date_loaded date,
    current_version boolean,
    default_threshold integer,
    has_il boolean,
    has_physical boolean,
    metadata_id integer
);


ALTER TABLE sgn.map_version OWNER TO postgres;

--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.map_version_map_version_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.map_version_map_version_id_seq OWNER TO postgres;

--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.map_version_map_version_id_seq OWNED BY sgn.map_version.map_version_id;


--
-- Name: marker; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker (
    marker_id integer NOT NULL,
    dummy_field boolean
);


ALTER TABLE sgn.marker OWNER TO postgres;

--
-- Name: marker_alias; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_alias (
    alias_id integer NOT NULL,
    alias text NOT NULL,
    marker_id integer NOT NULL,
    preferred boolean DEFAULT true
);


ALTER TABLE sgn.marker_alias OWNER TO postgres;

--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_alias_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_alias_alias_id_seq OWNER TO postgres;

--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_alias_alias_id_seq OWNED BY sgn.marker_alias.alias_id;


--
-- Name: marker_collectible; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_collectible (
    marker_collectible_dummy_id integer NOT NULL,
    marker_id integer NOT NULL,
    mc_id integer NOT NULL
);


ALTER TABLE sgn.marker_collectible OWNER TO postgres;

--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_collectible_marker_collectible_dummy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_collectible_marker_collectible_dummy_id_seq OWNER TO postgres;

--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_collectible_marker_collectible_dummy_id_seq OWNED BY sgn.marker_collectible.marker_collectible_dummy_id;


--
-- Name: marker_collection; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_collection (
    mc_id integer NOT NULL,
    mc_name text NOT NULL,
    mc_description text
);


ALTER TABLE sgn.marker_collection OWNER TO postgres;

--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_collection_mc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_collection_mc_id_seq OWNER TO postgres;

--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_collection_mc_id_seq OWNED BY sgn.marker_collection.mc_id;


--
-- Name: marker_confidence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_confidence (
    confidence_id integer NOT NULL,
    confidence_name text
);


ALTER TABLE sgn.marker_confidence OWNER TO postgres;

--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_confidence_confidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_confidence_confidence_id_seq OWNER TO postgres;

--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_confidence_confidence_id_seq OWNED BY sgn.marker_confidence.confidence_id;


--
-- Name: marker_derived_from; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_derived_from (
    marker_derived_dummy_id integer NOT NULL,
    marker_id integer,
    derived_from_source_id integer,
    id_in_source integer
);


ALTER TABLE sgn.marker_derived_from OWNER TO postgres;

--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_derived_from_marker_derived_dummy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_derived_from_marker_derived_dummy_id_seq OWNER TO postgres;

--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_derived_from_marker_derived_dummy_id_seq OWNED BY sgn.marker_derived_from.marker_derived_dummy_id;


--
-- Name: marker_experiment; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_experiment (
    marker_experiment_id integer NOT NULL,
    marker_id integer,
    pcr_experiment_id integer,
    rflp_experiment_id integer,
    location_id integer,
    protocol text NOT NULL,
    CONSTRAINT marker_experiment_check CHECK (((rflp_experiment_id IS NOT NULL) OR (pcr_experiment_id IS NOT NULL) OR (location_id IS NOT NULL))),
    CONSTRAINT marker_experiment_check1 CHECK ((((pcr_experiment_id IS NOT NULL) AND (rflp_experiment_id IS NULL)) OR ((pcr_experiment_id IS NULL) AND (rflp_experiment_id IS NOT NULL)) OR ((pcr_experiment_id IS NULL) AND (rflp_experiment_id IS NULL) AND (location_id IS NOT NULL)))),
    CONSTRAINT marker_experiment_protocol_check CHECK (((protocol = 'AFLP'::text) OR (protocol = 'CAPS'::text) OR (protocol = 'RAPD'::text) OR (protocol = 'SNP'::text) OR (protocol = 'SSR'::text) OR (protocol = 'RFLP'::text) OR (protocol = 'PCR'::text) OR (protocol = 'dCAPS'::text) OR (protocol = 'DART'::text) OR (protocol = 'OPA'::text) OR (protocol = 'unknown'::text) OR (protocol = 'ASPE'::text) OR (protocol = 'INDEL'::text) OR (protocol = 'QTL'::text))),
    CONSTRAINT marker_experiment_rflp_protocol_consistency CHECK ((((protocol = 'RFLP'::text) AND (pcr_experiment_id IS NULL)) OR ((protocol <> 'RFLP'::text) AND (rflp_experiment_id IS NULL))))
);


ALTER TABLE sgn.marker_experiment OWNER TO postgres;

--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_experiment_marker_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_experiment_marker_experiment_id_seq OWNER TO postgres;

--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_experiment_marker_experiment_id_seq OWNED BY sgn.marker_experiment.marker_experiment_id;


--
-- Name: marker_location; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.marker_location (
    location_id integer NOT NULL,
    lg_id integer NOT NULL,
    map_version_id integer NOT NULL,
    "position" numeric(9,6) NOT NULL,
    confidence_id integer NOT NULL,
    subscript character(1),
    position_north numeric(8,5),
    position_south numeric(8,5),
    CONSTRAINT marker_location_subscript_check CHECK (((subscript = 'A'::bpchar) OR (subscript = 'B'::bpchar) OR (subscript = 'C'::bpchar) OR (subscript IS NULL)))
);


ALTER TABLE sgn.marker_location OWNER TO postgres;

--
-- Name: marker_location_location_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_location_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_location_location_id_seq OWNER TO postgres;

--
-- Name: marker_location_location_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_location_location_id_seq OWNED BY sgn.marker_location.location_id;


--
-- Name: marker_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.marker_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.marker_marker_id_seq OWNER TO postgres;

--
-- Name: marker_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.marker_marker_id_seq OWNED BY sgn.marker.marker_id;


--
-- Name: marker_to_map; Type: VIEW; Schema: sgn; Owner: postgres
--

CREATE VIEW sgn.marker_to_map AS
 SELECT m.marker_id,
    me.protocol,
    ml.location_id,
    linkage_group.lg_name,
    linkage_group.lg_order,
    ml."position",
    ml.confidence_id,
    ml.subscript,
    ml.map_version_id,
    map.map_id,
    map.parent_1,
    map.parent_2,
    map_version.current_version
   FROM (((((sgn.marker m
     LEFT JOIN sgn.marker_experiment me USING (marker_id))
     LEFT JOIN sgn.marker_location ml USING (location_id))
     LEFT JOIN sgn.map_version USING (map_version_id))
     LEFT JOIN sgn.map USING (map_id))
     LEFT JOIN sgn.linkage_group USING (lg_id))
  WHERE (map_version.current_version = true);


ALTER TABLE sgn.marker_to_map OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: metadata; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.metadata (
    metadata_id bigint NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    create_person_id integer NOT NULL,
    modified_date timestamp with time zone,
    modified_person_id integer,
    previous_metadata_id integer,
    obsolete integer DEFAULT 0,
    obsolete_note character varying(250)
);


ALTER TABLE sgn.metadata OWNER TO postgres;

--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.metadata_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.metadata_metadata_id_seq OWNER TO postgres;

--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.metadata_metadata_id_seq OWNED BY sgn.metadata.metadata_id;


SET default_with_oids = false;

--
-- Name: microarray; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.microarray (
    microarray_id integer NOT NULL,
    chip_name character varying(80),
    release bigint,
    version bigint,
    spot_id character varying(20),
    content_specific_tag character varying(40),
    clone_id integer
);


ALTER TABLE sgn.microarray OWNER TO postgres;

--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.microarray_microarray_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.microarray_microarray_id_seq OWNER TO postgres;

--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.microarray_microarray_id_seq OWNED BY sgn.microarray.microarray_id;


--
-- Name: misc; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.misc (
    misc_unique_id integer NOT NULL,
    misc_id integer,
    name text,
    value bytea
);


ALTER TABLE sgn.misc OWNER TO postgres;

--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.misc_misc_unique_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.misc_misc_unique_id_seq OWNER TO postgres;

--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.misc_misc_unique_id_seq OWNED BY sgn.misc.misc_unique_id;


--
-- Name: organism; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.organism (
    organism_id integer NOT NULL,
    organism_name character varying(80),
    common_name_id bigint NOT NULL,
    organism_descrip text,
    specie_tax character varying(80),
    genus_tax integer,
    subfamily_tax integer,
    family_tax integer,
    order_tax integer,
    chr_n_gnmc integer,
    polypl_gnmc character varying(50),
    genom_size_gnmc character varying(50),
    genom_proj_gnmc text,
    est_attribution_tqmc text,
    chado_organism_id integer
);


ALTER TABLE sgn.organism OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.organism_organism_id_seq OWNED BY sgn.organism.organism_id;


SET default_with_oids = false;

--
-- Name: organismgroup; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.organismgroup (
    organismgroup_id integer NOT NULL,
    name character varying(255),
    type character varying(32),
    CONSTRAINT organismgroup_type_check CHECK ((((type)::text = 'common name'::text) OR ((type)::text = 'unigene build'::text) OR ((type)::text = ''::text)))
);


ALTER TABLE sgn.organismgroup OWNER TO postgres;

--
-- Name: organismgroup_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.organismgroup_member (
    organismgroup_member_id integer NOT NULL,
    organismgroup_id integer,
    organism_id integer
);


ALTER TABLE sgn.organismgroup_member OWNER TO postgres;

--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.organismgroup_member_organismgroup_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.organismgroup_member_organismgroup_member_id_seq OWNER TO postgres;

--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.organismgroup_member_organismgroup_member_id_seq OWNED BY sgn.organismgroup_member.organismgroup_member_id;


--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.organismgroup_organismgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.organismgroup_organismgroup_id_seq OWNER TO postgres;

--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.organismgroup_organismgroup_id_seq OWNED BY sgn.organismgroup.organismgroup_id;


SET default_with_oids = false;

--
-- Name: p_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.p_markers (
    pid integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    est_clone_id bigint DEFAULT (0)::bigint NOT NULL,
    p_mrkr_name character varying(32)
);


ALTER TABLE sgn.p_markers OWNER TO postgres;

--
-- Name: p_markers_pid_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.p_markers_pid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.p_markers_pid_seq OWNER TO postgres;

--
-- Name: p_markers_pid_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.p_markers_pid_seq OWNED BY sgn.p_markers.pid;


--
-- Name: pcr_exp_accession; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.pcr_exp_accession (
    pcr_exp_accession_id bigint NOT NULL,
    pcr_experiment_id bigint,
    accession_id bigint,
    stock_id bigint,
    CONSTRAINT experiment_not_null CHECK ((pcr_experiment_id IS NOT NULL))
);


ALTER TABLE sgn.pcr_exp_accession OWNER TO postgres;

--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.pcr_exp_accession_pcr_exp_accession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.pcr_exp_accession_pcr_exp_accession_id_seq OWNER TO postgres;

--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.pcr_exp_accession_pcr_exp_accession_id_seq OWNED BY sgn.pcr_exp_accession.pcr_exp_accession_id;


--
-- Name: pcr_experiment; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.pcr_experiment (
    pcr_experiment_id bigint NOT NULL,
    marker_id bigint,
    mg_concentration real,
    annealing_temp bigint,
    primer_id_fwd bigint,
    primer_id_rev bigint,
    subscript character varying(255),
    experiment_type_id bigint,
    map_id bigint,
    additional_enzymes character varying(1023),
    primer_type character varying(4),
    predicted boolean DEFAULT false,
    primer_id_pd bigint,
    accession_id character varying(7),
    stock_id integer,
    CONSTRAINT different_primers CHECK (((primer_id_fwd IS NULL) OR (primer_id_rev IS NULL) OR (NOT (primer_id_fwd = primer_id_rev)))),
    CONSTRAINT primer_type_enum CHECK ((((primer_type)::text = 'iUPA'::text) OR ((primer_type)::text = 'eUPA'::text) OR (primer_type IS NULL)))
);


ALTER TABLE sgn.pcr_experiment OWNER TO postgres;

--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.pcr_experiment_pcr_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.pcr_experiment_pcr_experiment_id_seq OWNER TO postgres;

--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.pcr_experiment_pcr_experiment_id_seq OWNED BY sgn.pcr_experiment.pcr_experiment_id;


SET default_with_oids = false;

--
-- Name: pcr_experiment_sequence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.pcr_experiment_sequence (
    pcr_experiment_sequence_id integer NOT NULL,
    pcr_experiment_id integer NOT NULL,
    sequence_id integer NOT NULL,
    type_id integer
);


ALTER TABLE sgn.pcr_experiment_sequence OWNER TO postgres;

--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq OWNER TO postgres;

--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq OWNED BY sgn.pcr_experiment_sequence.pcr_experiment_sequence_id;


SET default_with_oids = false;

--
-- Name: pcr_product; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.pcr_product (
    pcr_product_id bigint NOT NULL,
    pcr_exp_accession_id bigint,
    enzyme_id bigint,
    multiple_flag bigint,
    band_size bigint,
    predicted boolean DEFAULT false,
    CONSTRAINT band_size_or_multiple_check CHECK ((((band_size IS NOT NULL) OR (multiple_flag IS NOT NULL)) AND (NOT ((band_size IS NOT NULL) AND (multiple_flag IS NOT NULL))))),
    CONSTRAINT multiple_flag_null_or_1 CHECK (((multiple_flag = 1) OR (multiple_flag IS NULL))),
    CONSTRAINT pcr_exp_acc_not_null CHECK ((pcr_exp_accession_id IS NOT NULL))
);


ALTER TABLE sgn.pcr_product OWNER TO postgres;

--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.pcr_product_pcr_product_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.pcr_product_pcr_product_id_seq OWNER TO postgres;

--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.pcr_product_pcr_product_id_seq OWNED BY sgn.pcr_product.pcr_product_id;


--
-- Name: primer_unigene_match; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.primer_unigene_match (
    primer_unigene_match_id integer NOT NULL,
    marker_id integer NOT NULL,
    unigene_id integer NOT NULL,
    primer_direction smallint,
    match_length integer,
    primer_match_start integer,
    primer_match_end integer,
    unigene_match_start integer,
    unigene_match_end integer,
    e_value double precision
);


ALTER TABLE sgn.primer_unigene_match OWNER TO postgres;

--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.primer_unigene_match_primer_unigene_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.primer_unigene_match_primer_unigene_match_id_seq OWNER TO postgres;

--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.primer_unigene_match_primer_unigene_match_id_seq OWNED BY sgn.primer_unigene_match.primer_unigene_match_id;


--
-- Name: qc_report; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.qc_report (
    qc_id integer NOT NULL,
    est_id integer DEFAULT 0 NOT NULL,
    basecaller character varying(40),
    qc_status bigint,
    vs_status bigint,
    qstart bigint,
    qend bigint,
    istart bigint,
    iend bigint,
    hqi_start bigint,
    hqi_length bigint,
    entropy real,
    expected_error real,
    quality_trim_threshold real,
    vector_tokens text
);


ALTER TABLE sgn.qc_report OWNER TO postgres;

--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.qc_report_qc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.qc_report_qc_id_seq OWNER TO postgres;

--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.qc_report_qc_id_seq OWNED BY sgn.qc_report.qc_id;


--
-- Name: rflp_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.rflp_markers (
    rflp_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    rflp_name character varying(64) DEFAULT ''::character varying NOT NULL,
    library_name character varying(64),
    clone_name character varying(16),
    vector character varying(32),
    cutting_site character varying(32),
    forward_seq_id bigint,
    reverse_seq_id bigint,
    insert_size bigint DEFAULT (0)::bigint NOT NULL,
    drug_resistance character varying(16),
    marker_prefix character varying(8),
    marker_suffix smallint,
    CONSTRAINT clone_name_not_null_check CHECK ((clone_name IS NOT NULL)),
    CONSTRAINT cutting_site_not_null_check CHECK ((cutting_site IS NOT NULL)),
    CONSTRAINT drug_resistance_not_null_check CHECK ((drug_resistance IS NOT NULL)),
    CONSTRAINT insert_size_not_null_check CHECK ((insert_size IS NOT NULL)),
    CONSTRAINT marker_prefix_not_null_check CHECK ((marker_prefix IS NOT NULL)),
    CONSTRAINT marker_suffix_not_null_check CHECK ((marker_suffix IS NOT NULL)),
    CONSTRAINT vector_not_null_check CHECK ((vector IS NOT NULL))
);


ALTER TABLE sgn.rflp_markers OWNER TO postgres;

--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.rflp_markers_rflp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.rflp_markers_rflp_id_seq OWNER TO postgres;

--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.rflp_markers_rflp_id_seq OWNED BY sgn.rflp_markers.rflp_id;


--
-- Name: rflp_sequences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.rflp_sequences (
    seq_id integer NOT NULL,
    fasta_sequence text NOT NULL
);


ALTER TABLE sgn.rflp_sequences OWNER TO postgres;

--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.rflp_sequences_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.rflp_sequences_seq_id_seq OWNER TO postgres;

--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.rflp_sequences_seq_id_seq OWNED BY sgn.rflp_sequences.seq_id;


--
-- Name: rflp_unigene_associations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.rflp_unigene_associations (
    rflp_unigene_assoc_id integer NOT NULL,
    rflp_seq_id bigint,
    unigene_id bigint,
    e_val double precision,
    align_length bigint,
    query_start bigint,
    query_end bigint
);


ALTER TABLE sgn.rflp_unigene_associations OWNER TO postgres;

--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq OWNER TO postgres;

--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq OWNED BY sgn.rflp_unigene_associations.rflp_unigene_assoc_id;


--
-- Name: seqread; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.seqread (
    read_id integer NOT NULL,
    clone_id integer,
    facility_id integer,
    submitter_id integer,
    batch_id integer,
    primer character varying(50),
    direction character(1),
    trace_name character varying(50) NOT NULL,
    trace_location text,
    attribution_id integer,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    censor_id integer
);


ALTER TABLE sgn.seqread OWNER TO postgres;

--
-- Name: seqread_read_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.seqread_read_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.seqread_read_id_seq OWNER TO postgres;

--
-- Name: seqread_read_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.seqread_read_id_seq OWNED BY sgn.seqread.read_id;


--
-- Name: sequence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.sequence (
    sequence_id bigint NOT NULL,
    sequence text
);


ALTER TABLE sgn.sequence OWNER TO postgres;

--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.sequence_sequence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.sequence_sequence_id_seq OWNER TO postgres;

--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.sequence_sequence_id_seq OWNED BY sgn.sequence.sequence_id;


SET default_with_oids = false;

--
-- Name: snp; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.snp (
    snp_id integer NOT NULL,
    marker_id integer,
    reference_nucleotide character varying(4),
    snp_nucleotide character varying(4) NOT NULL,
    confirmed boolean DEFAULT false,
    sequence_left_id integer,
    sequence_right_id integer,
    reference_stock_id integer,
    stock_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE sgn.snp OWNER TO postgres;

--
-- Name: snp_file; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.snp_file (
    snp_file_id integer NOT NULL,
    snp_id integer NOT NULL,
    file_id integer NOT NULL
);


ALTER TABLE sgn.snp_file OWNER TO postgres;

--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.snp_file_snp_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.snp_file_snp_file_id_seq OWNER TO postgres;

--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.snp_file_snp_file_id_seq OWNED BY sgn.snp_file.snp_file_id;


--
-- Name: snp_snp_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.snp_snp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.snp_snp_id_seq OWNER TO postgres;

--
-- Name: snp_snp_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.snp_snp_id_seq OWNED BY sgn.snp.snp_id;


--
-- Name: snpprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.snpprop (
    snpprop_id integer NOT NULL,
    snp_id integer,
    value character varying(255) NOT NULL,
    rank integer,
    type_id integer
);


ALTER TABLE sgn.snpprop OWNER TO postgres;

--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.snpprop_snpprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.snpprop_snpprop_id_seq OWNER TO postgres;

--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.snpprop_snpprop_id_seq OWNED BY sgn.snpprop.snpprop_id;


SET default_with_oids = false;

--
-- Name: ssr; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.ssr (
    ssr_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    ssr_name character varying(10),
    est_read_id bigint,
    start_primer character varying(100),
    end_primer character varying(100),
    pcr_product_ln bigint,
    tm_start_primer character varying(10),
    tm_end_primer character varying(10),
    ann_high character varying(10),
    ann_low character varying(10)
);


ALTER TABLE sgn.ssr OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.ssr_primer_unigene_matches (
    ssr_primer_unigene_match_id integer NOT NULL,
    ssr_id bigint DEFAULT (0)::bigint NOT NULL,
    unigene_id bigint DEFAULT (0)::bigint NOT NULL,
    primer_direction smallint DEFAULT (0)::smallint NOT NULL,
    match_length bigint DEFAULT (0)::bigint NOT NULL,
    primer_match_start bigint DEFAULT (0)::bigint NOT NULL,
    primer_match_end bigint DEFAULT (0)::bigint NOT NULL,
    unigene_match_start bigint DEFAULT (0)::bigint NOT NULL,
    unigene_match_end bigint DEFAULT (0)::bigint NOT NULL,
    e_value character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE sgn.ssr_primer_unigene_matches OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq OWNED BY sgn.ssr_primer_unigene_matches.ssr_primer_unigene_match_id;


--
-- Name: ssr_repeats; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.ssr_repeats (
    repeat_id integer NOT NULL,
    ssr_id bigint DEFAULT (0)::bigint NOT NULL,
    repeat_motif character varying(32) DEFAULT ''::character varying NOT NULL,
    reapeat_nr bigint,
    marker_id integer NOT NULL
);


ALTER TABLE sgn.ssr_repeats OWNER TO postgres;

--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.ssr_repeats_repeat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.ssr_repeats_repeat_id_seq OWNER TO postgres;

--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.ssr_repeats_repeat_id_seq OWNED BY sgn.ssr_repeats.repeat_id;


--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.ssr_ssr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.ssr_ssr_id_seq OWNER TO postgres;

--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.ssr_ssr_id_seq OWNED BY sgn.ssr.ssr_id;


--
-- Name: submit_user; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.submit_user (
    submit_user_id integer NOT NULL,
    submit_code character varying(6),
    username character varying(20),
    password character varying(20),
    name character varying(80),
    email_address character varying(255),
    phone_number character varying(20),
    organization character varying(80),
    contact_information text,
    disabled bigint,
    confirm_code character varying(16),
    sp_person_id integer
);


ALTER TABLE sgn.submit_user OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.submit_user_submit_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.submit_user_submit_user_id_seq OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.submit_user_submit_user_id_seq OWNED BY sgn.submit_user.submit_user_id;


SET default_with_oids = false;

--
-- Name: taxonomy; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.taxonomy (
    tax_id integer NOT NULL,
    tax_name character varying(50) NOT NULL,
    tax_type character varying(50)
);


ALTER TABLE sgn.taxonomy OWNER TO postgres;

--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.taxonomy_tax_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.taxonomy_tax_id_seq OWNER TO postgres;

--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.taxonomy_tax_id_seq OWNED BY sgn.taxonomy.tax_id;


SET default_with_oids = false;

--
-- Name: temp_caps_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.temp_caps_correspondence (
    tcc_id integer NOT NULL,
    old_marker_id integer,
    new_marker_id integer
);


ALTER TABLE sgn.temp_caps_correspondence OWNER TO postgres;

--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.temp_caps_correspondence_tcc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.temp_caps_correspondence_tcc_id_seq OWNER TO postgres;

--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.temp_caps_correspondence_tcc_id_seq OWNED BY sgn.temp_caps_correspondence.tcc_id;


--
-- Name: temp_map_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.temp_map_correspondence (
    tmc_id integer NOT NULL,
    old_map_id integer,
    map_version_id integer
);


ALTER TABLE sgn.temp_map_correspondence OWNER TO postgres;

--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.temp_map_correspondence_tmc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.temp_map_correspondence_tmc_id_seq OWNER TO postgres;

--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.temp_map_correspondence_tmc_id_seq OWNED BY sgn.temp_map_correspondence.tmc_id;


--
-- Name: temp_marker_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.temp_marker_correspondence (
    tmc_id integer NOT NULL,
    old_marker_id integer,
    new_marker_id integer
);


ALTER TABLE sgn.temp_marker_correspondence OWNER TO postgres;

--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.temp_marker_correspondence_tmc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.temp_marker_correspondence_tmc_id_seq OWNER TO postgres;

--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.temp_marker_correspondence_tmc_id_seq OWNED BY sgn.temp_marker_correspondence.tmc_id;


--
-- Name: tigrtc_index; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.tigrtc_index (
    tcindex_id integer NOT NULL,
    index_name character varying(40)
);


ALTER TABLE sgn.tigrtc_index OWNER TO postgres;

--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.tigrtc_index_tcindex_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.tigrtc_index_tcindex_id_seq OWNER TO postgres;

--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.tigrtc_index_tcindex_id_seq OWNED BY sgn.tigrtc_index.tcindex_id;


--
-- Name: tigrtc_membership; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.tigrtc_membership (
    tigrtc_membership_id integer NOT NULL,
    tc_id integer,
    tcindex_id integer,
    read_id integer
);


ALTER TABLE sgn.tigrtc_membership OWNER TO postgres;

--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.tigrtc_membership_tigrtc_membership_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.tigrtc_membership_tigrtc_membership_id_seq OWNER TO postgres;

--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.tigrtc_membership_tigrtc_membership_id_seq OWNED BY sgn.tigrtc_membership.tigrtc_membership_id;


--
-- Name: tigrtc_tracking; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.tigrtc_tracking (
    tigrtc_tracking_id integer NOT NULL,
    tc_id integer,
    current_tc_id integer,
    tcindex_id integer
);


ALTER TABLE sgn.tigrtc_tracking OWNER TO postgres;

--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.tigrtc_tracking_tigrtc_tracking_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.tigrtc_tracking_tigrtc_tracking_id_seq OWNER TO postgres;

--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.tigrtc_tracking_tigrtc_tracking_id_seq OWNED BY sgn.tigrtc_tracking.tigrtc_tracking_id;


--
-- Name: tm_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.tm_markers (
    tm_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    tm_name character varying(32) DEFAULT ''::character varying NOT NULL,
    old_cos_id character varying(32),
    seq_id bigint,
    est_read_id bigint,
    comment text
);


ALTER TABLE sgn.tm_markers OWNER TO postgres;

--
-- Name: tm_markers_sequences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.tm_markers_sequences (
    tm_marker_seq_id bigint DEFAULT (0)::bigint NOT NULL,
    tm_id bigint,
    sequence text,
    comment text
);


ALTER TABLE sgn.tm_markers_sequences OWNER TO postgres;

--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.tm_markers_tm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.tm_markers_tm_id_seq OWNER TO postgres;

--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.tm_markers_tm_id_seq OWNED BY sgn.tm_markers.tm_id;


--
-- Name: trim_feature; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.trim_feature (
    feature_id integer NOT NULL,
    est_id integer,
    start bigint,
    "end" bigint,
    type bigint,
    value bytea
);


ALTER TABLE sgn.trim_feature OWNER TO postgres;

--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.trim_feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.trim_feature_feature_id_seq OWNER TO postgres;

--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.trim_feature_feature_id_seq OWNED BY sgn.trim_feature.feature_id;


--
-- Name: trim_feature_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.trim_feature_types (
    trim_type_id integer NOT NULL,
    comment text
);


ALTER TABLE sgn.trim_feature_types OWNER TO postgres;

--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.trim_feature_types_trim_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.trim_feature_types_trim_type_id_seq OWNER TO postgres;

--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.trim_feature_types_trim_type_id_seq OWNED BY sgn.trim_feature_types.trim_type_id;


--
-- Name: types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.types (
    type_id integer NOT NULL,
    comment text
);


ALTER TABLE sgn.types OWNER TO postgres;

--
-- Name: types_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.types_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.types_type_id_seq OWNER TO postgres;

--
-- Name: types_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.types_type_id_seq OWNED BY sgn.types.type_id;


--
-- Name: unigene; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.unigene (
    unigene_id integer NOT NULL,
    unigene_build_id integer,
    consensi_id integer,
    cluster_no bigint,
    contig_no bigint,
    nr_members bigint,
    database_name character varying DEFAULT 'SGN'::character varying NOT NULL,
    sequence_name bigint NOT NULL,
    CONSTRAINT unigene_database_name_check CHECK ((((database_name)::text = 'SGN'::text) OR ((database_name)::text = 'CGN'::text))),
    CONSTRAINT unigene_nr_members_iff_consensi_id CHECK ((((nr_members > 1) AND (consensi_id IS NOT NULL)) OR ((nr_members = 1) AND (consensi_id IS NULL))))
);


ALTER TABLE sgn.unigene OWNER TO postgres;

--
-- Name: unigene_build; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.unigene_build (
    unigene_build_id integer NOT NULL,
    source_data_group_id integer,
    organism_group_id integer,
    build_nr integer DEFAULT 0 NOT NULL,
    build_date date DEFAULT now(),
    method_id integer,
    status character(1),
    comment text,
    superseding_build_id integer,
    next_build_id integer,
    latest_build_id integer,
    blast_db_id integer,
    CONSTRAINT unigene_build_status_check CHECK (((status = 'C'::bpchar) OR (status = 'D'::bpchar) OR (status = 'P'::bpchar)))
);


ALTER TABLE sgn.unigene_build OWNER TO postgres;

--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.unigene_build_unigene_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.unigene_build_unigene_build_id_seq OWNER TO postgres;

--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.unigene_build_unigene_build_id_seq OWNED BY sgn.unigene_build.unigene_build_id;


--
-- Name: unigene_consensi; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.unigene_consensi (
    consensi_id integer NOT NULL,
    seq text,
    qscores text
);


ALTER TABLE sgn.unigene_consensi OWNER TO postgres;

--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.unigene_consensi_consensi_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.unigene_consensi_consensi_id_seq OWNER TO postgres;

--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.unigene_consensi_consensi_id_seq OWNED BY sgn.unigene_consensi.consensi_id;


--
-- Name: unigene_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sgn.unigene_member (
    unigene_member_id integer NOT NULL,
    unigene_id integer DEFAULT 0 NOT NULL,
    est_id integer,
    start bigint,
    stop bigint,
    qstart bigint,
    qend bigint,
    dir character(1)
);


ALTER TABLE sgn.unigene_member OWNER TO postgres;

--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.unigene_member_unigene_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.unigene_member_unigene_member_id_seq OWNER TO postgres;

--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.unigene_member_unigene_member_id_seq OWNED BY sgn.unigene_member.unigene_member_id;


--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sgn.unigene_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn.unigene_unigene_id_seq OWNER TO postgres;

--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sgn.unigene_unigene_id_seq OWNED BY sgn.unigene.unigene_id;


--
-- Name: bac_status; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.bac_status (
    bac_status_id bigint NOT NULL,
    bac_id bigint,
    person_id bigint,
    status character varying(13),
    genbank_status character varying(5),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    CONSTRAINT chk_bac_status_genbank_status CHECK ((((genbank_status)::text = 'htgs1'::text) OR ((genbank_status)::text = 'htgs2'::text) OR ((genbank_status)::text = 'htgs3'::text) OR ((genbank_status)::text = 'htgs4'::text) OR ((genbank_status)::text = ''::text) OR (genbank_status IS NULL))),
    CONSTRAINT chk_bac_status_status CHECK ((((status)::text = 'not_sequenced'::text) OR ((status)::text = 'in_progress'::text) OR ((status)::text = 'complete'::text) OR ((status)::text = ''::text) OR (status IS NULL)))
);


ALTER TABLE sgn_people.bac_status OWNER TO postgres;

--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.bac_status_bac_status_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.bac_status_bac_status_id_seq OWNER TO postgres;

--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.bac_status_bac_status_id_seq OWNED BY sgn_people.bac_status.bac_status_id;


--
-- Name: bac_status_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.bac_status_log (
    bac_status_log_id bigint NOT NULL,
    bac_id bigint,
    person_id bigint,
    status character varying(13),
    genbank_status character varying(5),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    CONSTRAINT chk_bac_status_log_genbank_status CHECK ((((genbank_status)::text = 'htgs1'::text) OR ((genbank_status)::text = 'htgs2'::text) OR ((genbank_status)::text = 'htgs3'::text) OR ((genbank_status)::text = 'htgs4'::text) OR ((genbank_status)::text = ''::text) OR (genbank_status IS NULL))),
    CONSTRAINT chk_bac_status_log_status CHECK ((((status)::text = 'not_sequenced'::text) OR ((status)::text = 'in_progress'::text) OR ((status)::text = 'complete'::text) OR ((status)::text = ''::text) OR (status IS NULL)))
);


ALTER TABLE sgn_people.bac_status_log OWNER TO postgres;

--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.bac_status_log_bac_status_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.bac_status_log_bac_status_log_id_seq OWNER TO postgres;

--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.bac_status_log_bac_status_log_id_seq OWNED BY sgn_people.bac_status_log.bac_status_log_id;


--
-- Name: clone_il_mapping_bin_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.clone_il_mapping_bin_log (
    sp_clone_il_mapping_bin_log_id integer NOT NULL,
    genotype_region_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now(),
    chromosome integer,
    notes text
);


ALTER TABLE sgn_people.clone_il_mapping_bin_log OWNER TO postgres;

--
-- Name: TABLE clone_il_mapping_bin_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sgn_people.clone_il_mapping_bin_log IS 'linking table showing which phenome.genotype_region a given clone has been mapped to. also provides a modification history with its is_current and created columns';


--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq OWNER TO postgres;

--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq OWNED BY sgn_people.clone_il_mapping_bin_log.sp_clone_il_mapping_bin_log_id;


--
-- Name: clone_validation_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.clone_validation_log (
    clone_validation_log_id integer NOT NULL,
    sp_person_id integer,
    clone_id integer,
    val_overgo boolean DEFAULT false NOT NULL,
    val_bac_ends boolean DEFAULT false NOT NULL,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sgn_people.clone_validation_log OWNER TO postgres;

--
-- Name: TABLE clone_validation_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sgn_people.clone_validation_log IS 'table showing which clones have been validated by a variety of methods.  columns may be added to this without warning.  details about each validation experiment should be written into the comment field on the detail page for the clone';


--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.clone_validation_log_clone_validation_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.clone_validation_log_clone_validation_log_id_seq OWNER TO postgres;

--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.clone_validation_log_clone_validation_log_id_seq OWNED BY sgn_people.clone_validation_log.clone_validation_log_id;


--
-- Name: clone_verification_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.clone_verification_log (
    clone_verification_log_id integer NOT NULL,
    sp_person_id integer,
    clone_id integer,
    ver_int_read boolean DEFAULT false NOT NULL,
    ver_bac_end boolean DEFAULT false NOT NULL,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sgn_people.clone_verification_log OWNER TO postgres;

--
-- Name: TABLE clone_verification_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sgn_people.clone_verification_log IS 'table showing which clones have been validated by a variety of methods.  columns may be added to this without warning.  details about each validation experiment should be written into the comment field on the detail page for the clone';


--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.clone_verification_log_clone_verification_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.clone_verification_log_clone_verification_log_id_seq OWNER TO postgres;

--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.clone_verification_log_clone_verification_log_id_seq OWNED BY sgn_people.clone_verification_log.clone_verification_log_id;


--
-- Name: forum_post; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.forum_post (
    forum_post_id integer NOT NULL,
    person_id bigint,
    post_text text,
    parent_post_id bigint,
    forum_topic_id integer,
    subject character varying(255),
    post_time timestamp(0) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE sgn_people.forum_post OWNER TO postgres;

--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.forum_post_forum_post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.forum_post_forum_post_id_seq OWNER TO postgres;

--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.forum_post_forum_post_id_seq OWNED BY sgn_people.forum_post.forum_post_id;


--
-- Name: forum_topic; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.forum_topic (
    forum_topic_id integer NOT NULL,
    person_id bigint,
    topic_name character varying(255),
    parent_topic bigint,
    topic_class character varying(255),
    page_type character varying(10),
    page_object_id bigint,
    topic_description text,
    sort_order character varying(10),
    CONSTRAINT person_id_check CHECK ((person_id IS NOT NULL))
);


ALTER TABLE sgn_people.forum_topic OWNER TO postgres;

--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.forum_topic_forum_topic_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.forum_topic_forum_topic_id_seq OWNER TO postgres;

--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.forum_topic_forum_topic_id_seq OWNED BY sgn_people.forum_topic.forum_topic_id;


--
-- Name: list; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.list (
    list_id bigint NOT NULL,
    is_hotlist boolean DEFAULT false,
    sent_by integer,
    name character varying(128),
    description text,
    owner integer,
    type_id bigint,
    is_public boolean DEFAULT false NOT NULL
);


ALTER TABLE sgn_people.list OWNER TO postgres;

--
-- Name: list_item; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.list_item (
    list_item_id bigint NOT NULL,
    content text,
    list_id integer
);


ALTER TABLE sgn_people.list_item OWNER TO postgres;

--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.list_item_list_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.list_item_list_item_id_seq OWNER TO postgres;

--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.list_item_list_item_id_seq OWNED BY sgn_people.list_item.list_item_id;


--
-- Name: list_list_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.list_list_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.list_list_id_seq OWNER TO postgres;

--
-- Name: list_list_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.list_list_id_seq OWNED BY sgn_people.list.list_id;


--
-- Name: sp_clone_il_mapping_segment_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_clone_il_mapping_segment_log (
    sp_clone_il_mapping_segment_log_id integer NOT NULL,
    individual_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sgn_people.sp_clone_il_mapping_segment_log OWNER TO postgres;

--
-- Name: TABLE sp_clone_il_mapping_segment_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sgn_people.sp_clone_il_mapping_segment_log IS 'linking table showing which phenome.individual IL line a given clone has been mapped to. also provides a modification history with is_current and created columns';


--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq OWNER TO postgres;

--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq OWNED BY sgn_people.sp_clone_il_mapping_segment_log.sp_clone_il_mapping_segment_log_id;


SET default_with_oids = false;

--
-- Name: sp_dataset; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_dataset (
    sp_dataset_id bigint NOT NULL,
    sp_person_id bigint,
    name character varying(255),
    description text,
    dataset jsonb,
    is_live boolean
);


ALTER TABLE sgn_people.sp_dataset OWNER TO postgres;

--
-- Name: sp_dataset_sp_dataset_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_dataset_sp_dataset_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_dataset_sp_dataset_id_seq OWNER TO postgres;

--
-- Name: sp_dataset_sp_dataset_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_dataset_sp_dataset_id_seq OWNED BY sgn_people.sp_dataset.sp_dataset_id;


SET default_with_oids = false;

--
-- Name: sp_group; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_group (
    sp_group_id integer NOT NULL,
    name character varying NOT NULL,
    description text
);


ALTER TABLE sgn_people.sp_group OWNER TO postgres;

--
-- Name: sp_group_member; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_group_member (
    sp_person_id bigint,
    sp_group_id bigint,
    status character varying DEFAULT 'active'::character varying NOT NULL
);


ALTER TABLE sgn_people.sp_group_member OWNER TO postgres;

--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_group_sp_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_group_sp_group_id_seq OWNER TO postgres;

--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_group_sp_group_id_seq OWNED BY sgn_people.sp_group.sp_group_id;


--
-- Name: sp_login_old; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_login_old (
    sp_login_id integer NOT NULL,
    username character varying(255),
    private_email character varying(255),
    pending_email character varying(255),
    password character varying(255),
    confirm_code character varying(20),
    disabled bigint,
    user_type character varying(9) DEFAULT 'user'::character varying,
    CONSTRAINT chk_sp_login_user_type CHECK ((((user_type)::text = 'user'::text) OR ((user_type)::text = 'submitter'::text) OR ((user_type)::text = 'curator'::text) OR ((user_type)::text = 'sequencer'::text) OR ((user_type)::text = ''::text) OR (user_type IS NULL)))
);


ALTER TABLE sgn_people.sp_login_old OWNER TO postgres;

--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_login_old_sp_login_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_login_old_sp_login_id_seq OWNER TO postgres;

--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_login_old_sp_login_id_seq OWNED BY sgn_people.sp_login_old.sp_login_id;


--
-- Name: sp_organisms; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_organisms (
    organism_id integer NOT NULL,
    organism_name character varying(255)
);


ALTER TABLE sgn_people.sp_organisms OWNER TO postgres;

--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_organisms_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_organisms_organism_id_seq OWNER TO postgres;

--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_organisms_organism_id_seq OWNED BY sgn_people.sp_organisms.organism_id;


--
-- Name: sp_organization; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_organization (
    sp_organization_id integer NOT NULL,
    name character varying(255) NOT NULL,
    department character varying(255),
    unit character varying(255),
    address text,
    country character varying(255),
    phone_number character varying(40),
    fax character varying(40),
    contact_email character varying(255),
    webpage character varying(255),
    description text,
    upload_account_name character varying(40),
    shortname character varying(20) NOT NULL,
    CONSTRAINT sp_organization_shortname_check CHECK (((shortname IS NULL) OR (lower((shortname)::text) = (shortname)::text)))
);


ALTER TABLE sgn_people.sp_organization OWNER TO postgres;

--
-- Name: sp_organization_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_organization_person (
    sp_organization_person_id integer NOT NULL,
    sp_organization_id bigint,
    sp_person_id bigint
);


ALTER TABLE sgn_people.sp_organization_person OWNER TO postgres;

--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_organization_person_sp_organization_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_organization_person_sp_organization_person_id_seq OWNER TO postgres;

--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_organization_person_sp_organization_person_id_seq OWNED BY sgn_people.sp_organization_person.sp_organization_person_id;


--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_organization_sp_organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_organization_sp_organization_id_seq OWNER TO postgres;

--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_organization_sp_organization_id_seq OWNED BY sgn_people.sp_organization.sp_organization_id;


--
-- Name: sp_papers; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_papers (
    sp_paper_id integer NOT NULL,
    person_id integer DEFAULT 0 NOT NULL,
    title text,
    author_list text,
    journal text,
    volume bigint,
    pages character varying(16),
    keywords text
);


ALTER TABLE sgn_people.sp_papers OWNER TO postgres;

--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_papers_sp_paper_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_papers_sp_paper_id_seq OWNER TO postgres;

--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_papers_sp_paper_id_seq OWNED BY sgn_people.sp_papers.sp_paper_id;


--
-- Name: sp_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_person (
    sp_person_id integer NOT NULL,
    censor bigint DEFAULT 0,
    salutation character varying(8),
    last_name character varying(63),
    first_name character varying(63),
    organization character varying(255),
    address text,
    country character varying(255),
    phone_number character varying(40),
    fax character varying(40),
    contact_email character varying(255),
    webpage character varying(255),
    research_keywords text,
    user_format character varying(8),
    research_interests text,
    formatted_interests text,
    contact_update date,
    research_update date,
    sp_login_id bigint,
    username character varying(255),
    private_email character varying(255),
    pending_email character varying(255),
    password character varying(255),
    confirm_code character varying(20),
    disabled character varying(20),
    user_type character varying(20) DEFAULT 'user'::character varying,
    cookie_string text,
    last_access_time timestamp without time zone DEFAULT now(),
    user_prefs character varying(4096),
    developer_settings character varying(4096),
    CONSTRAINT first_name_check CHECK ((first_name IS NOT NULL)),
    CONSTRAINT if_disabled_no_cookie_for_you CHECK ((((disabled IS NOT NULL) AND (cookie_string IS NULL)) OR (disabled IS NULL))),
    CONSTRAINT last_name_check CHECK ((last_name IS NOT NULL)),
    CONSTRAINT user_type_not_null CHECK ((user_type IS NOT NULL))
);


ALTER TABLE sgn_people.sp_person OWNER TO postgres;

--
-- Name: sp_person_organisms; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_person_organisms (
    sp_person_organisms_id integer NOT NULL,
    sp_person_id bigint,
    organism_id integer DEFAULT 0 NOT NULL
);


ALTER TABLE sgn_people.sp_person_organisms OWNER TO postgres;

--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_person_organisms_sp_person_organisms_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_person_organisms_sp_person_organisms_id_seq OWNER TO postgres;

--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_person_organisms_sp_person_organisms_id_seq OWNED BY sgn_people.sp_person_organisms.sp_person_organisms_id;


SET default_with_oids = false;

--
-- Name: sp_person_roles; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_person_roles (
    sp_person_role_id integer NOT NULL,
    sp_person_id bigint,
    sp_role_id bigint
);


ALTER TABLE sgn_people.sp_person_roles OWNER TO postgres;

--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_person_roles_sp_person_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_person_roles_sp_person_role_id_seq OWNER TO postgres;

--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_person_roles_sp_person_role_id_seq OWNED BY sgn_people.sp_person_roles.sp_person_role_id;


--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_person_sp_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_person_sp_person_id_seq OWNER TO postgres;

--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_person_sp_person_id_seq OWNED BY sgn_people.sp_person.sp_person_id;


SET default_with_oids = false;

--
-- Name: sp_project; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_project (
    sp_project_id integer NOT NULL,
    name character varying(80),
    description text
);


ALTER TABLE sgn_people.sp_project OWNER TO postgres;

--
-- Name: sp_project_il_mapping_clone_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_project_il_mapping_clone_log (
    sp_project_il_mapping_clone_log_id integer NOT NULL,
    sp_project_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sgn_people.sp_project_il_mapping_clone_log OWNER TO postgres;

--
-- Name: TABLE sp_project_il_mapping_clone_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sgn_people.sp_project_il_mapping_clone_log IS 'linking table showing which sp_project is currently assigned to map a given clone to the zamir IL lines.  also provides a modification history with is_current and created columns';


--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq OWNER TO postgres;

--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq OWNED BY sgn_people.sp_project_il_mapping_clone_log.sp_project_il_mapping_clone_log_id;


--
-- Name: sp_project_organization; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_project_organization (
    sp_project_organization_id integer NOT NULL,
    sp_project_id bigint,
    sp_organization_id bigint
);


ALTER TABLE sgn_people.sp_project_organization OWNER TO postgres;

--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_project_organization_sp_project_organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_project_organization_sp_project_organization_id_seq OWNER TO postgres;

--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_project_organization_sp_project_organization_id_seq OWNED BY sgn_people.sp_project_organization.sp_project_organization_id;


--
-- Name: sp_project_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_project_person (
    sp_project_person_id integer NOT NULL,
    sp_project_id bigint,
    sp_person_id bigint,
    type character varying(6),
    CONSTRAINT chk_sp_project_person_type CHECK ((((type)::text = 'PI'::text) OR ((type)::text = 'co-PI'::text) OR ((type)::text = 'Member'::text) OR ((type)::text = ''::text) OR (type IS NULL)))
);


ALTER TABLE sgn_people.sp_project_person OWNER TO postgres;

--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_project_person_sp_project_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_project_person_sp_project_person_id_seq OWNER TO postgres;

--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_project_person_sp_project_person_id_seq OWNED BY sgn_people.sp_project_person.sp_project_person_id;


--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_project_sp_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_project_sp_project_id_seq OWNER TO postgres;

--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_project_sp_project_id_seq OWNED BY sgn_people.sp_project.sp_project_id;


SET default_with_oids = false;

--
-- Name: sp_roles; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.sp_roles (
    sp_role_id integer NOT NULL,
    name character varying(20)
);


ALTER TABLE sgn_people.sp_roles OWNER TO postgres;

--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.sp_roles_sp_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.sp_roles_sp_role_id_seq OWNER TO postgres;

--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.sp_roles_sp_role_id_seq OWNED BY sgn_people.sp_roles.sp_role_id;


--
-- Name: user_map; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.user_map (
    user_map_id integer NOT NULL,
    short_name character varying(40),
    long_name character varying(100),
    abstract text,
    is_public boolean,
    parent1_accession_id bigint,
    parent1 character varying(100),
    parent2_accession_id bigint,
    parent2 character varying(100),
    sp_person_id bigint,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone
);


ALTER TABLE sgn_people.user_map OWNER TO postgres;

--
-- Name: user_map_data; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sgn_people.user_map_data (
    user_map_data_id integer NOT NULL,
    user_map_id bigint,
    marker_name character varying(50),
    protocol character varying(50),
    marker_id bigint,
    linkage_group character varying(20),
    "position" numeric(20,4),
    confidence character varying(20),
    sp_person_id bigint,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone
);


ALTER TABLE sgn_people.user_map_data OWNER TO postgres;

--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.user_map_data_user_map_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.user_map_data_user_map_data_id_seq OWNER TO postgres;

--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.user_map_data_user_map_data_id_seq OWNED BY sgn_people.user_map_data.user_map_data_id;


--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sgn_people.user_map_user_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_people.user_map_user_map_id_seq OWNER TO postgres;

--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sgn_people.user_map_user_map_id_seq OWNED BY sgn_people.user_map.user_map_id;


SET default_with_oids = false;

--
-- Name: facility; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE sgn_submit.facility (
    facility_id integer NOT NULL,
    submit_user_id integer,
    facility_moniker character varying(20),
    facility_shortname character varying(12),
    facility_name character varying(80),
    facility_contact character varying(80),
    facility_address text,
    funding_agency character varying(80),
    funding_comment text,
    sequencing_primers character varying(80),
    machine character varying(40),
    chemistry character varying(40),
    attribution_display text,
    sp_person_id integer
);


ALTER TABLE sgn_submit.facility OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE sgn_submit.facility_facility_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_submit.facility_facility_id_seq OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE sgn_submit.facility_facility_id_seq OWNED BY sgn_submit.facility.facility_id;


--
-- Name: library; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE sgn_submit.library (
    library_id integer NOT NULL,
    type bigint,
    submit_user_id integer,
    library_name character varying(80),
    library_shortname character varying(16),
    authors character varying(255),
    organism_id integer,
    cultivar character varying(255),
    accession character varying(255),
    tissue character varying(255),
    development_stage character varying(255),
    treatment_conditions text,
    cloning_host character varying(80),
    vector character varying(80),
    rs1 character varying(12),
    rs2 character varying(12),
    cloning_kit character varying(255),
    comments text,
    contact_information text,
    order_routing_id bigint,
    sp_person_id integer,
    forward_adapter character varying,
    reverse_adapter character varying
);


ALTER TABLE sgn_submit.library OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE sgn_submit.library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_submit.library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE sgn_submit.library_library_id_seq OWNED BY sgn_submit.library.library_id;


--
-- Name: seqread; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE sgn_submit.seqread (
    submit_read_id integer NOT NULL,
    library_id integer DEFAULT 0 NOT NULL,
    facility_id integer DEFAULT 0 NOT NULL,
    trace_name character varying(80),
    clone_name character varying(80),
    direction character(1),
    location character varying(255),
    read_id integer
);


ALTER TABLE sgn_submit.seqread OWNER TO postgres;

--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE sgn_submit.seqread_submit_read_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_submit.seqread_submit_read_id_seq OWNER TO postgres;

--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE sgn_submit.seqread_submit_read_id_seq OWNED BY sgn_submit.seqread.submit_read_id;


--
-- Name: submit_user; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE sgn_submit.submit_user (
    submit_user_id integer NOT NULL,
    submit_code character varying(6),
    username character varying(20),
    password character varying(20),
    name character varying(80),
    email_address character varying(255),
    phone_number character varying(20),
    organization character varying(80),
    contact_information text,
    disabled bigint,
    confirm_code character varying(16),
    sp_person_id integer
);


ALTER TABLE sgn_submit.submit_user OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE sgn_submit.submit_user_submit_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sgn_submit.submit_user_submit_user_id_seq OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE sgn_submit.submit_user_submit_user_id_seq OWNED BY sgn_submit.submit_user.submit_user_id;


--
-- Name: fattribute; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fattribute (
    fattribute_id integer NOT NULL,
    fattribute_name character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE tomato_gff.fattribute OWNER TO postgres;

--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE tomato_gff.fattribute_fattribute_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_gff.fattribute_fattribute_id_seq OWNER TO postgres;

--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE tomato_gff.fattribute_fattribute_id_seq OWNED BY tomato_gff.fattribute.fattribute_id;


--
-- Name: fattribute_to_feature; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fattribute_to_feature (
    fid integer DEFAULT 0 NOT NULL,
    fattribute_id integer DEFAULT 0 NOT NULL,
    fattribute_value text
);


ALTER TABLE tomato_gff.fattribute_to_feature OWNER TO postgres;

--
-- Name: fdata; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fdata (
    fid integer NOT NULL,
    fref character varying(100) DEFAULT ''::character varying NOT NULL,
    fstart integer DEFAULT 0 NOT NULL,
    fstop integer DEFAULT 0 NOT NULL,
    fbin double precision DEFAULT (0)::double precision NOT NULL,
    ftypeid integer DEFAULT 0 NOT NULL,
    fscore double precision,
    fstrand character varying(3),
    fphase character varying(3),
    gid integer DEFAULT 0 NOT NULL,
    ftarget_start integer,
    ftarget_stop integer,
    CONSTRAINT chk_fdata_fphase CHECK ((((fphase)::text = '0'::text) OR ((fphase)::text = '1'::text) OR ((fphase)::text = '2'::text))),
    CONSTRAINT chk_fdata_fstrand CHECK ((((fstrand)::text = '+'::text) OR ((fstrand)::text = '-'::text)))
);


ALTER TABLE tomato_gff.fdata OWNER TO postgres;

--
-- Name: fdata_fid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE tomato_gff.fdata_fid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_gff.fdata_fid_seq OWNER TO postgres;

--
-- Name: fdata_fid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE tomato_gff.fdata_fid_seq OWNED BY tomato_gff.fdata.fid;


--
-- Name: fdna; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fdna (
    fref character varying(100) DEFAULT ''::character varying NOT NULL,
    foffset integer DEFAULT 0 NOT NULL,
    fdna bytea
);


ALTER TABLE tomato_gff.fdna OWNER TO postgres;

--
-- Name: fgroup; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fgroup (
    gid integer NOT NULL,
    gclass character varying(100),
    gname character varying(100)
);


ALTER TABLE tomato_gff.fgroup OWNER TO postgres;

--
-- Name: fgroup_gid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE tomato_gff.fgroup_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_gff.fgroup_gid_seq OWNER TO postgres;

--
-- Name: fgroup_gid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE tomato_gff.fgroup_gid_seq OWNED BY tomato_gff.fgroup.gid;


--
-- Name: fmeta; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.fmeta (
    fname character varying(255) DEFAULT ''::character varying NOT NULL,
    fvalue character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE tomato_gff.fmeta OWNER TO postgres;

--
-- Name: ftype; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE tomato_gff.ftype (
    ftypeid integer NOT NULL,
    fmethod character varying(100) DEFAULT ''::character varying NOT NULL,
    fsource character varying(100)
);


ALTER TABLE tomato_gff.ftype OWNER TO postgres;

--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE tomato_gff.ftype_ftypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_gff.ftype_ftypeid_seq OWNER TO postgres;

--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE tomato_gff.ftype_ftypeid_seq OWNED BY tomato_gff.ftype.ftypeid;


--
-- Name: annotation annot_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.annotation ALTER COLUMN annot_id SET DEFAULT nextval('annotation.annotation_annot_id_seq'::regclass);


--
-- Name: comment comment_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comment ALTER COLUMN comment_id SET DEFAULT nextval('annotation.comment_comment_id_seq'::regclass);


--
-- Name: comp_analysis ca_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comp_analysis ALTER COLUMN ca_id SET DEFAULT nextval('annotation.comp_analysis_ca_id_seq'::regclass);


--
-- Name: dblist db_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.dblist ALTER COLUMN db_id SET DEFAULT nextval('annotation.dblist_db_id_seq'::regclass);


--
-- Name: dbxref dbxref_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('annotation.dbxref_dbxref_id_seq'::regclass);


--
-- Name: feature_set f_set_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.feature_set ALTER COLUMN f_set_id SET DEFAULT nextval('annotation.feature_set_f_set_id_seq'::regclass);


--
-- Name: feature_span f_span_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.feature_span ALTER COLUMN f_span_id SET DEFAULT nextval('annotation.feature_span_f_span_id_seq'::regclass);


--
-- Name: organism organism_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.organism ALTER COLUMN organism_id SET DEFAULT nextval('annotation.organism_organism_id_seq'::regclass);


--
-- Name: output output_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.output ALTER COLUMN output_id SET DEFAULT nextval('annotation.output_output_id_seq'::regclass);


--
-- Name: person person_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.person ALTER COLUMN person_id SET DEFAULT nextval('annotation.person_person_id_seq'::regclass);


--
-- Name: program program_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.program ALTER COLUMN program_id SET DEFAULT nextval('annotation.program_program_id_seq'::regclass);


--
-- Name: property property_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.property ALTER COLUMN property_id SET DEFAULT nextval('annotation.property_property_id_seq'::regclass);


--
-- Name: result_set r_set_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.result_set ALTER COLUMN r_set_id SET DEFAULT nextval('annotation.result_set_r_set_id_seq'::regclass);


--
-- Name: result_span r_span_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.result_span ALTER COLUMN r_span_id SET DEFAULT nextval('annotation.result_span_r_span_id_seq'::regclass);


--
-- Name: seq seq_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq ALTER COLUMN seq_id SET DEFAULT nextval('annotation.seq_seq_id_seq'::regclass);


--
-- Name: seq_error seq_err_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq_error ALTER COLUMN seq_err_id SET DEFAULT nextval('annotation.seq_error_seq_err_id_seq'::regclass);


--
-- Name: seq_relationship seq_rel_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq_relationship ALTER COLUMN seq_rel_id SET DEFAULT nextval('annotation.seq_relationship_seq_rel_id_seq'::regclass);


--
-- Name: synonym synonym_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.synonym ALTER COLUMN synonym_id SET DEFAULT nextval('annotation.synonym_synonym_id_seq'::regclass);


--
-- Name: bs_protocol protocol_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol ALTER COLUMN protocol_id SET DEFAULT nextval('biosource.bs_protocol_protocol_id_seq'::regclass);


--
-- Name: bs_protocol_pub protocol_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_pub ALTER COLUMN protocol_pub_id SET DEFAULT nextval('biosource.bs_protocol_pub_protocol_pub_id_seq'::regclass);


--
-- Name: bs_protocol_step protocol_step_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step ALTER COLUMN protocol_step_id SET DEFAULT nextval('biosource.bs_protocol_step_protocol_step_id_seq'::regclass);


--
-- Name: bs_protocol_step_dbxref protocol_step_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step_dbxref ALTER COLUMN protocol_step_dbxref_id SET DEFAULT nextval('biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq'::regclass);


--
-- Name: bs_sample sample_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample ALTER COLUMN sample_id SET DEFAULT nextval('biosource.bs_sample_sample_id_seq'::regclass);


--
-- Name: bs_sample_cvterm sample_cvterm_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_cvterm ALTER COLUMN sample_cvterm_id SET DEFAULT nextval('biosource.bs_sample_cvterm_sample_cvterm_id_seq'::regclass);


--
-- Name: bs_sample_dbxref sample_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_dbxref ALTER COLUMN sample_dbxref_id SET DEFAULT nextval('biosource.bs_sample_dbxref_sample_dbxref_id_seq'::regclass);


--
-- Name: bs_sample_element sample_element_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element ALTER COLUMN sample_element_id SET DEFAULT nextval('biosource.bs_sample_element_sample_element_id_seq'::regclass);


--
-- Name: bs_sample_element_cvterm sample_element_cvterm_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_cvterm ALTER COLUMN sample_element_cvterm_id SET DEFAULT nextval('biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq'::regclass);


--
-- Name: bs_sample_element_dbxref sample_element_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_dbxref ALTER COLUMN sample_element_dbxref_id SET DEFAULT nextval('biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq'::regclass);


--
-- Name: bs_sample_element_file sample_element_file_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_file ALTER COLUMN sample_element_file_id SET DEFAULT nextval('biosource.bs_sample_element_file_sample_element_file_id_seq'::regclass);


--
-- Name: bs_sample_element_relation sample_element_relation_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_relation ALTER COLUMN sample_element_relation_id SET DEFAULT nextval('biosource.bs_sample_element_relation_sample_element_relation_id_seq'::regclass);


--
-- Name: bs_sample_file sample_file_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_file ALTER COLUMN sample_file_id SET DEFAULT nextval('biosource.bs_sample_file_sample_file_id_seq'::regclass);


--
-- Name: bs_sample_pub sample_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_pub ALTER COLUMN sample_pub_id SET DEFAULT nextval('biosource.bs_sample_pub_sample_pub_id_seq'::regclass);


--
-- Name: bs_sample_relationship sample_relationship_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship ALTER COLUMN sample_relationship_id SET DEFAULT nextval('biosource.bs_sample_relationship_sample_relationship_id_seq'::regclass);


--
-- Name: bs_tool tool_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool ALTER COLUMN tool_id SET DEFAULT nextval('biosource.bs_tool_tool_id_seq'::regclass);


--
-- Name: bs_tool_pub tool_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool_pub ALTER COLUMN tool_pub_id SET DEFAULT nextval('biosource.bs_tool_pub_tool_pub_id_seq'::regclass);


--
-- Name: ge_cluster_analysis cluster_analysis_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis ALTER COLUMN cluster_analysis_id SET DEFAULT nextval('gem.ge_cluster_analysis_cluster_analysis_id_seq'::regclass);


--
-- Name: ge_cluster_member cluster_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_member ALTER COLUMN cluster_member_id SET DEFAULT nextval('gem.ge_cluster_member_cluster_member_id_seq'::regclass);


--
-- Name: ge_cluster_profile cluster_profile_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_profile ALTER COLUMN cluster_profile_id SET DEFAULT nextval('gem.ge_cluster_profile_cluster_profile_id_seq'::regclass);


--
-- Name: ge_correlation_analysis correlation_analysis_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_analysis ALTER COLUMN correlation_analysis_id SET DEFAULT nextval('gem.ge_correlation_analysis_correlation_analysis_id_seq'::regclass);


--
-- Name: ge_correlation_member correlation_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member ALTER COLUMN correlation_member_id SET DEFAULT nextval('gem.ge_correlation_member_correlation_member_id_seq'::regclass);


--
-- Name: ge_data_analysis_process data_analysis_process_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process ALTER COLUMN data_analysis_process_id SET DEFAULT nextval('gem.ge_data_analysis_process_data_analysis_process_id_seq'::regclass);


--
-- Name: ge_diff_expression diff_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_diff_expression ALTER COLUMN diff_expression_id SET DEFAULT nextval('gem.ge_diff_expression_diff_expression_id_seq'::regclass);


--
-- Name: ge_experiment experiment_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment ALTER COLUMN experiment_id SET DEFAULT nextval('gem.ge_experiment_experiment_id_seq'::regclass);


--
-- Name: ge_experiment_analysis_group experiment_analysis_group_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_group ALTER COLUMN experiment_analysis_group_id SET DEFAULT nextval('gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq'::regclass);


--
-- Name: ge_experiment_analysis_member experiment_analysis_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_member ALTER COLUMN experiment_analysis_member_id SET DEFAULT nextval('gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq'::regclass);


--
-- Name: ge_experiment_dbxref experiment_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_dbxref ALTER COLUMN experiment_dbxref_id SET DEFAULT nextval('gem.ge_experiment_dbxref_experiment_dbxref_id_seq'::regclass);


--
-- Name: ge_experimental_design experimental_design_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design ALTER COLUMN experimental_design_id SET DEFAULT nextval('gem.ge_experimental_design_experimental_design_id_seq'::regclass);


--
-- Name: ge_experimental_design_dbxref experimental_design_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_dbxref ALTER COLUMN experimental_design_dbxref_id SET DEFAULT nextval('gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq'::regclass);


--
-- Name: ge_experimental_design_pub experimental_design_pub_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_pub ALTER COLUMN experimental_design_pub_id SET DEFAULT nextval('gem.ge_experimental_design_pub_experimental_design_pub_id_seq'::regclass);


--
-- Name: ge_expression_by_experiment expression_by_experiment_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment ALTER COLUMN expression_by_experiment_id SET DEFAULT nextval('gem.ge_expression_by_experiment_expression_by_experiment_id_seq'::regclass);


--
-- Name: ge_fluorescanning fluorescanning_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning ALTER COLUMN fluorescanning_id SET DEFAULT nextval('gem.ge_fluorescanning_fluorescanning_id_seq'::regclass);


--
-- Name: ge_hybridization hybridization_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization ALTER COLUMN hybridization_id SET DEFAULT nextval('gem.ge_hybridization_hybridization_id_seq'::regclass);


--
-- Name: ge_platform platform_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform ALTER COLUMN platform_id SET DEFAULT nextval('gem.ge_platform_platform_id_seq'::regclass);


--
-- Name: ge_platform_dbxref platform_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_dbxref ALTER COLUMN platform_dbxref_id SET DEFAULT nextval('gem.ge_platform_dbxref_platform_dbxref_id_seq'::regclass);


--
-- Name: ge_platform_design platform_design_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_design ALTER COLUMN platform_design_id SET DEFAULT nextval('gem.ge_platform_design_platform_design_id_seq'::regclass);


--
-- Name: ge_platform_pub platform_pub_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_pub ALTER COLUMN platform_pub_id SET DEFAULT nextval('gem.ge_platform_pub_platform_pub_id_seq'::regclass);


--
-- Name: ge_probe probe_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe ALTER COLUMN probe_id SET DEFAULT nextval('gem.ge_probe_probe_id_seq'::regclass);


--
-- Name: ge_probe_expression probe_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression ALTER COLUMN probe_expression_id SET DEFAULT nextval('gem.ge_probe_expression_probe_expression_id_seq'::regclass);


--
-- Name: ge_probe_spot probe_spot_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot ALTER COLUMN probe_spot_id SET DEFAULT nextval('gem.ge_probe_spot_probe_spot_id_seq'::regclass);


--
-- Name: ge_probe_spot_coordinate probe_spot_coordinate_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot_coordinate ALTER COLUMN probe_spot_coordinate_id SET DEFAULT nextval('gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq'::regclass);


--
-- Name: ge_profile_element profile_element_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_profile_element ALTER COLUMN profile_element_id SET DEFAULT nextval('gem.ge_profile_element_profile_element_id_seq'::regclass);


--
-- Name: ge_target target_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target ALTER COLUMN target_id SET DEFAULT nextval('gem.ge_target_target_id_seq'::regclass);


--
-- Name: ge_target_dbxref target_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_dbxref ALTER COLUMN target_dbxref_id SET DEFAULT nextval('gem.ge_target_dbxref_target_dbxref_id_seq'::regclass);


--
-- Name: ge_target_element target_element_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element ALTER COLUMN target_element_id SET DEFAULT nextval('gem.ge_target_element_target_element_id_seq'::regclass);


--
-- Name: ge_technology_type technology_type_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_technology_type ALTER COLUMN technology_type_id SET DEFAULT nextval('gem.ge_technology_type_technology_type_id_seq'::regclass);


--
-- Name: ge_template template_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template ALTER COLUMN template_id SET DEFAULT nextval('gem.ge_template_template_id_seq'::regclass);


--
-- Name: ge_template_dbiref template_dbiref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbiref ALTER COLUMN template_dbiref_id SET DEFAULT nextval('gem.ge_template_dbiref_template_dbiref_id_seq'::regclass);


--
-- Name: ge_template_dbxref template_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbxref ALTER COLUMN template_dbxref_id SET DEFAULT nextval('gem.ge_template_dbxref_template_dbxref_id_seq'::regclass);


--
-- Name: ge_template_diff_expression template_diff_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression ALTER COLUMN template_diff_expression_id SET DEFAULT nextval('gem.ge_template_diff_expression_template_diff_expression_id_seq'::regclass);


--
-- Name: ge_template_expression template_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression ALTER COLUMN template_expression_id SET DEFAULT nextval('gem.ge_template_expression_template_expression_id_seq'::regclass);


--
-- Name: blast_defline blast_defline_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_defline ALTER COLUMN blast_defline_id SET DEFAULT nextval('genomic.blast_defline_blast_defline_id_seq'::regclass);


--
-- Name: blast_hit blast_hit_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_hit ALTER COLUMN blast_hit_id SET DEFAULT nextval('genomic.blast_hit_blast_hit_id_seq'::regclass);


--
-- Name: blast_query blast_query_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_query ALTER COLUMN blast_query_id SET DEFAULT nextval('genomic.blast_query_blast_query_id_seq'::regclass);


--
-- Name: chromat chromat_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.chromat ALTER COLUMN chromat_id SET DEFAULT nextval('genomic.chromat_chromat_id_seq'::regclass);


--
-- Name: clone clone_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone ALTER COLUMN clone_id SET DEFAULT nextval('genomic.clone_clone_id_seq'::regclass);


--
-- Name: clone_feature clone_feature_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_feature ALTER COLUMN clone_feature_id SET DEFAULT nextval('genomic.clone_feature_clone_feature_id_seq'::regclass);


--
-- Name: clone_type clone_type_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_type ALTER COLUMN clone_type_id SET DEFAULT nextval('genomic.clone_type_clone_type_id_seq'::regclass);


--
-- Name: genbank_submission genbank_submission_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.genbank_submission ALTER COLUMN genbank_submission_id SET DEFAULT nextval('genomic.genbank_submission_genbank_submission_id_seq'::regclass);


--
-- Name: gss gss_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss ALTER COLUMN gss_id SET DEFAULT nextval('genomic.gss_gss_id_seq'::regclass);


--
-- Name: gss_submitted_to_genbank gss_submitted_to_genbank_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss_submitted_to_genbank ALTER COLUMN gss_submitted_to_genbank_id SET DEFAULT nextval('genomic.gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq'::regclass);


--
-- Name: library library_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library ALTER COLUMN library_id SET DEFAULT nextval('genomic.library_library_id_seq'::regclass);


--
-- Name: library_annotation_db library_annotation_db_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_annotation_db ALTER COLUMN library_annotation_db_id SET DEFAULT nextval('genomic.library_annotation_db_library_annotation_db_id_seq'::regclass);


--
-- Name: library_shortname_abbreviation library_shortname_abbreviation_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_shortname_abbreviation ALTER COLUMN library_shortname_abbreviation_id SET DEFAULT nextval('genomic.library_shortname_abbreviatio_library_shortname_abbreviatio_seq'::regclass);


--
-- Name: qc_report qc_report_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.qc_report ALTER COLUMN qc_report_id SET DEFAULT nextval('genomic.qc_report_qc_report_id_seq'::regclass);


--
-- Name: query_source_type query_source_type_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.query_source_type ALTER COLUMN query_source_type_id SET DEFAULT nextval('genomic.query_source_type_query_source_type_id_seq'::regclass);


--
-- Name: read_class read_class_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.read_class ALTER COLUMN read_class_id SET DEFAULT nextval('genomic.read_class_read_class_id_seq'::regclass);


--
-- Name: sequencing_primer sequencing_primer_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.sequencing_primer ALTER COLUMN sequencing_primer_id SET DEFAULT nextval('genomic.sequencing_primer_sequencing_primer_id_seq'::regclass);


--
-- Name: experiment experiment_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment ALTER COLUMN experiment_id SET DEFAULT nextval('insitu.experiment_experiment_id_seq'::regclass);


--
-- Name: experiment_image experiment_image_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_image ALTER COLUMN experiment_image_id SET DEFAULT nextval('insitu.experiment_image_experiment_image_id_seq'::regclass);


--
-- Name: experiment_tag experiment_tag_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_tag ALTER COLUMN experiment_tag_id SET DEFAULT nextval('insitu.experiment_tag_experiment_tag_id_seq'::regclass);


--
-- Name: is_organism is_organism_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.is_organism ALTER COLUMN is_organism_id SET DEFAULT nextval('insitu.is_organism_is_organism_id_seq'::regclass);


--
-- Name: probe probe_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.probe ALTER COLUMN probe_id SET DEFAULT nextval('insitu.probe_probe_id_seq'::regclass);


--
-- Name: tag tag_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.tag ALTER COLUMN tag_id SET DEFAULT nextval('insitu.tag_tag_id_seq'::regclass);


--
-- Name: attribution attribution_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution ALTER COLUMN attribution_id SET DEFAULT nextval('metadata.attribution_attribution_id_seq'::regclass);


--
-- Name: attribution_to attribution_to_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to ALTER COLUMN attribution_to_id SET DEFAULT nextval('metadata.attribution_to_attribution_to_id_seq'::regclass);


--
-- Name: comments comment_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.comments ALTER COLUMN comment_id SET DEFAULT nextval('metadata.comments_comment_id_seq'::regclass);


--
-- Name: md_dbipath dbipath_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbipath ALTER COLUMN dbipath_id SET DEFAULT nextval('metadata.md_dbipath_dbipath_id_seq'::regclass);


--
-- Name: md_dbiref dbiref_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbiref ALTER COLUMN dbiref_id SET DEFAULT nextval('metadata.md_dbiref_dbiref_id_seq'::regclass);


--
-- Name: md_dbversion dbversion_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbversion ALTER COLUMN dbversion_id SET DEFAULT nextval('metadata.md_dbversion_dbversion_id_seq'::regclass);


--
-- Name: md_files file_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_files ALTER COLUMN file_id SET DEFAULT nextval('metadata.md_files_file_id_seq'::regclass);


--
-- Name: md_groupmembers groupmember_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groupmembers ALTER COLUMN groupmember_id SET DEFAULT nextval('metadata.md_groupmembers_groupmember_id_seq'::regclass);


--
-- Name: md_groups group_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groups ALTER COLUMN group_id SET DEFAULT nextval('metadata.md_groups_group_id_seq'::regclass);


--
-- Name: md_image image_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image ALTER COLUMN image_id SET DEFAULT nextval('metadata.md_image_image_id_seq'::regclass);


--
-- Name: md_image_cvterm md_image_cvterm_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_cvterm ALTER COLUMN md_image_cvterm_id SET DEFAULT nextval('metadata.md_image_cvterm_md_image_cvterm_id_seq'::regclass);


--
-- Name: md_image_organism md_image_organism_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_organism ALTER COLUMN md_image_organism_id SET DEFAULT nextval('metadata.md_image_organism_md_image_organism_id_seq'::regclass);


--
-- Name: md_metadata metadata_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_metadata ALTER COLUMN metadata_id SET DEFAULT nextval('metadata.md_metadata_metadata_id_seq'::regclass);


--
-- Name: md_tag tag_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag ALTER COLUMN tag_id SET DEFAULT nextval('metadata.md_tag_tag_id_seq'::regclass);


--
-- Name: md_tag_image tag_image_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag_image ALTER COLUMN tag_image_id SET DEFAULT nextval('metadata.md_tag_image_tag_image_id_seq'::regclass);


--
-- Name: roles role_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.roles ALTER COLUMN role_id SET DEFAULT nextval('metadata.roles_role_id_seq'::regclass);


--
-- Name: data_points dp_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.data_points ALTER COLUMN dp_id SET DEFAULT nextval('pheno_population.data_points_dp_id_seq'::regclass);


--
-- Name: genotypes gen_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.genotypes ALTER COLUMN gen_id SET DEFAULT nextval('pheno_population.genotypes_gen_id_seq'::regclass);


--
-- Name: images image_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.images ALTER COLUMN image_id SET DEFAULT nextval('pheno_population.images_image_id_seq'::regclass);


--
-- Name: locations loc_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.locations ALTER COLUMN loc_id SET DEFAULT nextval('pheno_population.locations_loc_id_seq'::regclass);


--
-- Name: organs organ_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.organs ALTER COLUMN organ_id SET DEFAULT nextval('pheno_population.organs_organ_id_seq'::regclass);


--
-- Name: plants plant_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.plants ALTER COLUMN plant_id SET DEFAULT nextval('pheno_population.plants_plant_id_seq'::regclass);


--
-- Name: populations pop_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.populations ALTER COLUMN pop_id SET DEFAULT nextval('pheno_population.populations_pop_id_seq'::regclass);


--
-- Name: properties prop_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.properties ALTER COLUMN prop_id SET DEFAULT nextval('pheno_population.properties_prop_id_seq'::regclass);


--
-- Name: samples sample_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.samples ALTER COLUMN sample_id SET DEFAULT nextval('pheno_population.samples_sample_id_seq'::regclass);


--
-- Name: sources source_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.sources ALTER COLUMN source_id SET DEFAULT nextval('pheno_population.sources_source_id_seq'::regclass);


--
-- Name: allele allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele ALTER COLUMN allele_id SET DEFAULT nextval('phenome.allele_allele_id_seq'::regclass);


--
-- Name: allele_alias allele_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_alias ALTER COLUMN allele_alias_id SET DEFAULT nextval('phenome.allele_alias_allele_alias_id_seq'::regclass);


--
-- Name: allele_dbxref allele_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref ALTER COLUMN allele_dbxref_id SET DEFAULT nextval('phenome.allele_dbxref_allele_dbxref_id_seq'::regclass);


--
-- Name: allele_history allele_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history ALTER COLUMN allele_history_id SET DEFAULT nextval('phenome.allele_history_allele_history_id_seq'::regclass);


--
-- Name: cross_type cross_type_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.cross_type ALTER COLUMN cross_type_id SET DEFAULT nextval('phenome.cross_type_cross_type_id_seq'::regclass);


--
-- Name: dbxref_type dbxref_type_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.dbxref_type ALTER COLUMN dbxref_type_id SET DEFAULT nextval('phenome.dbxref_type_dbxref_type_id_seq'::regclass);


--
-- Name: genotype genotype_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype ALTER COLUMN genotype_id SET DEFAULT nextval('phenome.genotype_genotype_id_seq'::regclass);


--
-- Name: genotype_experiment genotype_experiment_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_experiment ALTER COLUMN genotype_experiment_id SET DEFAULT nextval('phenome.genotype_experiment_genotype_experiment_id_seq'::regclass);


--
-- Name: genotype_region genotype_region_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region ALTER COLUMN genotype_region_id SET DEFAULT nextval('phenome.genotype_region_genotype_region_id_seq'::regclass);


--
-- Name: germplasm germplasm_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.germplasm ALTER COLUMN germplasm_id SET DEFAULT nextval('phenome.germplasm_germplasm_id_seq'::regclass);


--
-- Name: individual individual_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual ALTER COLUMN individual_id SET DEFAULT nextval('phenome.individual_individual_id_seq'::regclass);


--
-- Name: individual_alias individual_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_alias ALTER COLUMN individual_alias_id SET DEFAULT nextval('phenome.individual_alias_individual_alias_id_seq'::regclass);


--
-- Name: individual_allele individual_allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele ALTER COLUMN individual_allele_id SET DEFAULT nextval('phenome.individual_allele_individual_allele_id_seq'::regclass);


--
-- Name: individual_dbxref individual_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref ALTER COLUMN individual_dbxref_id SET DEFAULT nextval('phenome.individual_dbxref_individual_dbxref_id_seq'::regclass);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence ALTER COLUMN individual_dbxref_evidence_id SET DEFAULT nextval('phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq'::regclass);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history ALTER COLUMN individual_dbxref_evidence_history_id SET DEFAULT nextval('phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq'::regclass);


--
-- Name: individual_history individual_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_history ALTER COLUMN individual_history_id SET DEFAULT nextval('phenome.individual_history_individual_history_id_seq'::regclass);


--
-- Name: individual_image individual_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_image ALTER COLUMN individual_image_id SET DEFAULT nextval('phenome.individual_image_individual_image_id_seq'::regclass);


--
-- Name: individual_locus individual_locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus ALTER COLUMN individual_locus_id SET DEFAULT nextval('phenome.individual_locus_individual_locus_id_seq'::regclass);


--
-- Name: is_public is_public_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.is_public ALTER COLUMN is_public_id SET DEFAULT nextval('phenome.is_public_is_public_id_seq'::regclass);


--
-- Name: locus locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus ALTER COLUMN locus_id SET DEFAULT nextval('phenome.locus_locus_id_seq'::regclass);


--
-- Name: locus2locus locus2locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus ALTER COLUMN locus2locus_id SET DEFAULT nextval('phenome.locus2locus_locus2locus_id_seq'::regclass);


--
-- Name: locus_alias locus_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_alias ALTER COLUMN locus_alias_id SET DEFAULT nextval('phenome.locus_alias_locus_alias_id_seq'::regclass);


--
-- Name: locus_dbxref locus_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref ALTER COLUMN locus_dbxref_id SET DEFAULT nextval('phenome.locus_dbxref_locus_dbxref_id_seq'::regclass);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence ALTER COLUMN locus_dbxref_evidence_id SET DEFAULT nextval('phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq'::regclass);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history ALTER COLUMN locus_dbxref_evidence_history_id SET DEFAULT nextval('phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq'::regclass);


--
-- Name: locus_history locus_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_history ALTER COLUMN locus_history_id SET DEFAULT nextval('phenome.locus_history_locus_history_id_seq'::regclass);


--
-- Name: locus_image locus_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_image ALTER COLUMN locus_image_id SET DEFAULT nextval('phenome.locus_image_locus_image_id_seq'::regclass);


--
-- Name: locus_marker locus_marker_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_marker ALTER COLUMN locus_marker_id SET DEFAULT nextval('phenome.locus_marker_locus_marker_id_seq'::regclass);


--
-- Name: locus_owner locus_owner_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner ALTER COLUMN locus_owner_id SET DEFAULT nextval('phenome.locus_owner_locus_owner_id_seq'::regclass);


--
-- Name: locus_registry locus_registry_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry ALTER COLUMN locus_registry_id SET DEFAULT nextval('phenome.locus_registry_locus_registry_id_seq'::regclass);


--
-- Name: locus_unigene locus_unigene_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene ALTER COLUMN locus_unigene_id SET DEFAULT nextval('phenome.locus_unigene_locus_unigene_id_seq'::regclass);


--
-- Name: locusgroup locusgroup_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup ALTER COLUMN locusgroup_id SET DEFAULT nextval('phenome.locusgroup_locusgroup_id_seq'::regclass);


--
-- Name: locusgroup_member locusgroup_member_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member ALTER COLUMN locusgroup_member_id SET DEFAULT nextval('phenome.locusgroup_member_locusgroup_member_id_seq'::regclass);


--
-- Name: nd_experiment_md_files nd_experiment_md_files_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.nd_experiment_md_files ALTER COLUMN nd_experiment_md_files_id SET DEFAULT nextval('phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq'::regclass);


--
-- Name: phenotype_user_trait phenotype_user_trait_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.phenotype_user_trait ALTER COLUMN phenotype_user_trait_id SET DEFAULT nextval('phenome.phenotype_user_trait_phenotype_user_trait_id_seq'::regclass);


--
-- Name: polymorphic_fragment polymorphic_fragment_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment ALTER COLUMN polymorphic_fragment_id SET DEFAULT nextval('phenome.polymorphic_fragment_polymorphic_fragment_id_seq'::regclass);


--
-- Name: population population_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population ALTER COLUMN population_id SET DEFAULT nextval('phenome.population_population_id_seq'::regclass);


--
-- Name: population_dbxref population_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population_dbxref ALTER COLUMN population_dbxref_id SET DEFAULT nextval('phenome.population_dbxref_population_dbxref_id_seq'::regclass);


--
-- Name: pub_curator pub_curator_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator ALTER COLUMN pub_curator_id SET DEFAULT nextval('phenome.pub_curator_pub_curator_id_seq'::regclass);


--
-- Name: registry registry_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.registry ALTER COLUMN registry_id SET DEFAULT nextval('phenome.registry_registry_id_seq'::regclass);


--
-- Name: stock_allele stock_allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_allele ALTER COLUMN stock_allele_id SET DEFAULT nextval('phenome.stock_allele_stock_allele_id_seq'::regclass);


--
-- Name: stock_image stock_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_image ALTER COLUMN stock_image_id SET DEFAULT nextval('phenome.stock_image_stock_image_id_seq'::regclass);


--
-- Name: stock_owner stock_owner_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_owner ALTER COLUMN stock_owner_id SET DEFAULT nextval('phenome.stock_owner_stock_owner_id_seq'::regclass);


--
-- Name: tomato_il_bin il_bin_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin ALTER COLUMN il_bin_id SET DEFAULT nextval('phenome.tomato_il_bin_il_bin_id_seq'::regclass);


--
-- Name: tomato_term tomato_term_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term ALTER COLUMN tomato_term_id SET DEFAULT nextval('phenome.tomato_term_tomato_term_id_seq'::regclass);


--
-- Name: tomato_term2term tomato_term2term_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term2term ALTER COLUMN tomato_term2term_id SET DEFAULT nextval('phenome.tomato_term2term_tomato_term2term_id_seq'::regclass);


--
-- Name: unit unit_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.unit ALTER COLUMN unit_id SET DEFAULT nextval('phenome.unit_unit_id_seq'::regclass);


--
-- Name: user_trait user_trait_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait ALTER COLUMN user_trait_id SET DEFAULT nextval('phenome.user_trait_user_trait_id_seq'::regclass);


--
-- Name: user_trait_unit user_trait_unit_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait_unit ALTER COLUMN user_trait_unit_id SET DEFAULT nextval('phenome.user_trait_unit_user_trait_unit_id_seq'::regclass);


--
-- Name: variant variant_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.variant ALTER COLUMN variant_id SET DEFAULT nextval('phenome.variant_variant_id_seq'::regclass);


--
-- Name: ba_plausibility bap_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.ba_plausibility ALTER COLUMN bap_id SET DEFAULT nextval('physical.ba_plausibility_bap_id_seq'::regclass);


--
-- Name: bac_associations bac_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_associations ALTER COLUMN bac_assoc_id SET DEFAULT nextval('physical.bac_associations_bac_assoc_id_seq'::regclass);


--
-- Name: bac_consensus_sequences consensus_seq_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_consensus_sequences ALTER COLUMN consensus_seq_id SET DEFAULT nextval('physical.bac_consensus_sequences_consensus_seq_id_seq'::regclass);


--
-- Name: bac_contigs bac_contig_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_contigs ALTER COLUMN bac_contig_id SET DEFAULT nextval('physical.bac_contigs_bac_contig_id_seq'::regclass);


--
-- Name: bac_end_sequences end_seq_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_end_sequences ALTER COLUMN end_seq_id SET DEFAULT nextval('physical.bac_end_sequences_end_seq_id_seq'::regclass);


--
-- Name: bacs bac_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bacs ALTER COLUMN bac_id SET DEFAULT nextval('physical.bacs_bac_id_seq'::regclass);


--
-- Name: computational_associations computational_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations ALTER COLUMN computational_assoc_id SET DEFAULT nextval('physical.computational_associations_computational_assoc_id_seq'::regclass);


--
-- Name: contig_sizes contig_size_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.contig_sizes ALTER COLUMN contig_size_id SET DEFAULT nextval('physical.contig_sizes_contig_size_id_seq'::regclass);


--
-- Name: deprecated_probes dp_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.deprecated_probes ALTER COLUMN dp_id SET DEFAULT nextval('physical.deprecated_probes_dp_id_seq'::regclass);


--
-- Name: fpc_data fpc_datum_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_data ALTER COLUMN fpc_datum_id SET DEFAULT nextval('physical.fpc_data_fpc_datum_id_seq'::regclass);


--
-- Name: fpc_version fpc_version; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_version ALTER COLUMN fpc_version SET DEFAULT nextval('physical.fpc_version_fpc_version_seq'::regclass);


--
-- Name: manual_associations manual_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations ALTER COLUMN manual_assoc_id SET DEFAULT nextval('physical.manual_associations_manual_assoc_id_seq'::regclass);


--
-- Name: oa_plausibility oap_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.oa_plausibility ALTER COLUMN oap_id SET DEFAULT nextval('physical.oa_plausibility_oap_id_seq'::regclass);


--
-- Name: overgo_associations overgo_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_associations ALTER COLUMN overgo_assoc_id SET DEFAULT nextval('physical.overgo_associations_overgo_assoc_id_seq'::regclass);


--
-- Name: overgo_plates plate_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_plates ALTER COLUMN plate_id SET DEFAULT nextval('physical.overgo_plates_plate_id_seq'::regclass);


--
-- Name: overgo_results result_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_results ALTER COLUMN result_id SET DEFAULT nextval('physical.overgo_results_result_id_seq'::regclass);


--
-- Name: overgo_version overgo_version; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_version ALTER COLUMN overgo_version SET DEFAULT nextval('physical.overgo_version_overgo_version_seq'::regclass);


--
-- Name: probe_markers overgo_probe_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.probe_markers ALTER COLUMN overgo_probe_id SET DEFAULT nextval('physical.probe_markers_overgo_probe_id_seq'::regclass);


--
-- Name: species species_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.species ALTER COLUMN species_id SET DEFAULT nextval('physical.species_species_id_seq'::regclass);


--
-- Name: tentative_association_conflict_groups tacg_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.tentative_association_conflict_groups ALTER COLUMN tacg_id SET DEFAULT nextval('physical.tentative_association_conflict_groups_tacg_id_seq'::regclass);


--
-- Name: tentative_overgo_associations tentative_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.tentative_overgo_associations ALTER COLUMN tentative_assoc_id SET DEFAULT nextval('physical.tentative_overgo_associations_tentative_assoc_id_seq'::regclass);


--
-- Name: users user_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.users ALTER COLUMN user_id SET DEFAULT nextval('physical.users_user_id_seq'::regclass);


--
-- Name: analysis analysis_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysis ALTER COLUMN analysis_id SET DEFAULT nextval('public.analysis_analysis_id_seq'::regclass);


--
-- Name: analysisfeature analysisfeature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisfeature ALTER COLUMN analysisfeature_id SET DEFAULT nextval('public.analysisfeature_analysisfeature_id_seq'::regclass);


--
-- Name: analysisprop analysisprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisprop ALTER COLUMN analysisprop_id SET DEFAULT nextval('public.analysisprop_analysisprop_id_seq'::regclass);


--
-- Name: ara_users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_users ALTER COLUMN id SET DEFAULT nextval('public.ara_users_id_seq'::regclass);


--
-- Name: blastwatch_queries blastwatch_queries_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_queries ALTER COLUMN blastwatch_queries_id SET DEFAULT nextval('public.blastwatch_queries_blastwatch_queries_id_seq'::regclass);


--
-- Name: blastwatch_results blastwatch_results_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_results ALTER COLUMN blastwatch_results_id SET DEFAULT nextval('public.blastwatch_results_blastwatch_results_id_seq'::regclass);


--
-- Name: bug bug_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bug ALTER COLUMN bug_id SET DEFAULT nextval('public.bug_bug_id_seq'::regclass);


--
-- Name: contact contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact ALTER COLUMN contact_id SET DEFAULT nextval('public.contact_contact_id_seq'::regclass);


--
-- Name: contact_relationship contact_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship ALTER COLUMN contact_relationship_id SET DEFAULT nextval('public.contact_relationship_contact_relationship_id_seq'::regclass);


--
-- Name: cv cv_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cv ALTER COLUMN cv_id SET DEFAULT nextval('public.cv_cv_id_seq'::regclass);


--
-- Name: cvprop cvprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvprop ALTER COLUMN cvprop_id SET DEFAULT nextval('public.cvprop_cvprop_id_seq'::regclass);


--
-- Name: cvterm cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm ALTER COLUMN cvterm_id SET DEFAULT nextval('public.cvterm_cvterm_id_seq'::regclass);


--
-- Name: cvterm_dbxref cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_dbxref ALTER COLUMN cvterm_dbxref_id SET DEFAULT nextval('public.cvterm_dbxref_cvterm_dbxref_id_seq'::regclass);


--
-- Name: cvterm_relationship cvterm_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship ALTER COLUMN cvterm_relationship_id SET DEFAULT nextval('public.cvterm_relationship_cvterm_relationship_id_seq'::regclass);


--
-- Name: cvtermpath cvtermpath_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath ALTER COLUMN cvtermpath_id SET DEFAULT nextval('public.cvtermpath_cvtermpath_id_seq'::regclass);


--
-- Name: cvtermprop cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermprop ALTER COLUMN cvtermprop_id SET DEFAULT nextval('public.cvtermprop_cvtermprop_id_seq'::regclass);


--
-- Name: cvtermsynonym cvtermsynonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermsynonym ALTER COLUMN cvtermsynonym_id SET DEFAULT nextval('public.cvtermsynonym_cvtermsynonym_id_seq'::regclass);


--
-- Name: cxgn_bac_pipeline_genbank_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cxgn_bac_pipeline_genbank_log ALTER COLUMN id SET DEFAULT nextval('public.cxgn_bac_pipeline_genbank_log_id_seq'::regclass);


--
-- Name: cxgn_bac_pipeline_loading_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cxgn_bac_pipeline_loading_log ALTER COLUMN id SET DEFAULT nextval('public.cxgn_bac_pipeline_loading_log_id_seq'::regclass);


--
-- Name: cxgn_bac_pipeline_processing_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cxgn_bac_pipeline_processing_log ALTER COLUMN id SET DEFAULT nextval('public.cxgn_bac_pipeline_processing_log_id_seq'::regclass);


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cxgn_indexedlog_test_feel_free_to_delete_me ALTER COLUMN id SET DEFAULT nextval('public.cxgn_indexedlog_test_feel_free_to_delete_me_id_seq'::regclass);


--
-- Name: db db_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.db ALTER COLUMN db_id SET DEFAULT nextval('public.db_db_id_seq'::regclass);


--
-- Name: dbxref dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('public.dbxref_dbxref_id_seq'::regclass);


--
-- Name: dbxrefprop dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxrefprop ALTER COLUMN dbxrefprop_id SET DEFAULT nextval('public.dbxrefprop_dbxrefprop_id_seq'::regclass);


--
-- Name: environment environment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment ALTER COLUMN environment_id SET DEFAULT nextval('public.environment_environment_id_seq'::regclass);


--
-- Name: environment_cvterm environment_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment_cvterm ALTER COLUMN environment_cvterm_id SET DEFAULT nextval('public.environment_cvterm_environment_cvterm_id_seq'::regclass);


--
-- Name: enzyme_restriction_sites enzyme_restriction_sites_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enzyme_restriction_sites ALTER COLUMN enzyme_restriction_sites_id SET DEFAULT nextval('public.enzyme_restriction_sites_enzyme_restriction_sites_id_seq'::regclass);


--
-- Name: feature feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature ALTER COLUMN feature_id SET DEFAULT nextval('public.feature_feature_id_seq'::regclass);


--
-- Name: feature_cvterm feature_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm ALTER COLUMN feature_cvterm_id SET DEFAULT nextval('public.feature_cvterm_feature_cvterm_id_seq'::regclass);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_dbxref ALTER COLUMN feature_cvterm_dbxref_id SET DEFAULT nextval('public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq'::regclass);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_pub ALTER COLUMN feature_cvterm_pub_id SET DEFAULT nextval('public.feature_cvterm_pub_feature_cvterm_pub_id_seq'::regclass);


--
-- Name: feature_cvtermprop feature_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvtermprop ALTER COLUMN feature_cvtermprop_id SET DEFAULT nextval('public.feature_cvtermprop_feature_cvtermprop_id_seq'::regclass);


--
-- Name: feature_dbxref feature_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_dbxref ALTER COLUMN feature_dbxref_id SET DEFAULT nextval('public.feature_dbxref_feature_dbxref_id_seq'::regclass);


--
-- Name: feature_genotype feature_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype ALTER COLUMN feature_genotype_id SET DEFAULT nextval('public.feature_genotype_feature_genotype_id_seq'::regclass);


--
-- Name: feature_pub feature_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_pub ALTER COLUMN feature_pub_id SET DEFAULT nextval('public.feature_pub_feature_pub_id_seq'::regclass);


--
-- Name: feature_relationship feature_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship ALTER COLUMN feature_relationship_id SET DEFAULT nextval('public.feature_relationship_feature_relationship_id_seq'::regclass);


--
-- Name: feature_relationship_pub feature_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship_pub ALTER COLUMN feature_relationship_pub_id SET DEFAULT nextval('public.feature_relationship_pub_feature_relationship_pub_id_seq'::regclass);


--
-- Name: feature_relationshipprop feature_relationshipprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop ALTER COLUMN feature_relationshipprop_id SET DEFAULT nextval('public.feature_relationshipprop_feature_relationshipprop_id_seq'::regclass);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop_pub ALTER COLUMN feature_relationshipprop_pub_id SET DEFAULT nextval('public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq'::regclass);


--
-- Name: feature_synonym feature_synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym ALTER COLUMN feature_synonym_id SET DEFAULT nextval('public.feature_synonym_feature_synonym_id_seq'::regclass);


--
-- Name: featureloc featureloc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc ALTER COLUMN featureloc_id SET DEFAULT nextval('public.featureloc_featureloc_id_seq'::regclass);


--
-- Name: featureloc_pub featureloc_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc_pub ALTER COLUMN featureloc_pub_id SET DEFAULT nextval('public.featureloc_pub_featureloc_pub_id_seq'::regclass);


--
-- Name: featureprop featureprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop ALTER COLUMN featureprop_id SET DEFAULT nextval('public.featureprop_featureprop_id_seq'::regclass);


--
-- Name: featureprop_pub featureprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop_pub ALTER COLUMN featureprop_pub_id SET DEFAULT nextval('public.featureprop_pub_featureprop_pub_id_seq'::regclass);


--
-- Name: forward_amplicon_sequence_information forward_amplicon_sequence_information_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.forward_amplicon_sequence_information ALTER COLUMN forward_amplicon_sequence_information_id SET DEFAULT nextval('public.forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq'::regclass);


--
-- Name: forward_amplicon_sequence_markers forward_amplicon_sequence_markers_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.forward_amplicon_sequence_markers ALTER COLUMN forward_amplicon_sequence_markers_id SET DEFAULT nextval('public.forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq'::regclass);


--
-- Name: fpc_band fpc_band_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_band ALTER COLUMN fpc_band_id SET DEFAULT nextval('public.fpc_band_fpc_band_id_seq'::regclass);


--
-- Name: fpc_build fpc_build_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build ALTER COLUMN fpc_build_id SET DEFAULT nextval('public.fpc_build_fpc_build_id_seq'::regclass);


--
-- Name: fpc_build_fpc_fingerprint fpc_build_fpc_fingerprint_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build_fpc_fingerprint ALTER COLUMN fpc_build_fpc_fingerprint_id SET DEFAULT nextval('public.fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq'::regclass);


--
-- Name: fpc_contig fpc_contig_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig ALTER COLUMN fpc_contig_id SET DEFAULT nextval('public.fpc_contig_fpc_contig_id_seq'::regclass);


--
-- Name: fpc_contig_clone fpc_contig_clone_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig_clone ALTER COLUMN fpc_contig_clone_id SET DEFAULT nextval('public.fpc_contig_clone_fpc_contig_clone_id_seq'::regclass);


--
-- Name: fpc_fingerprint fpc_fingerprint_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_fingerprint ALTER COLUMN fpc_fingerprint_id SET DEFAULT nextval('public.fpc_fingerprint_fpc_fingerprint_id_seq'::regclass);


--
-- Name: fpc_series fpc_series_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_series ALTER COLUMN fpc_series_id SET DEFAULT nextval('public.fpc_series_fpc_series_id_seq'::regclass);


--
-- Name: genotype genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotype ALTER COLUMN genotype_id SET DEFAULT nextval('public.genotype_genotype_id_seq'::regclass);


--
-- Name: genotypeprop genotypeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotypeprop ALTER COLUMN genotypeprop_id SET DEFAULT nextval('public.genotypeprop_genotypeprop_id_seq'::regclass);


--
-- Name: glossary glossary_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.glossary ALTER COLUMN glossary_id SET DEFAULT nextval('public.glossary_glossary_id_seq'::regclass);


--
-- Name: itag_loading_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.itag_loading_log ALTER COLUMN id SET DEFAULT nextval('public.itag_loading_log_id_seq'::regclass);


--
-- Name: materialized_view materialized_view_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.materialized_view ALTER COLUMN materialized_view_id SET DEFAULT nextval('public.materialized_view_materialized_view_id_seq'::regclass);


--
-- Name: matviews mv_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.matviews ALTER COLUMN mv_id SET DEFAULT nextval('public.matviews_mv_id_seq'::regclass);


--
-- Name: nd_experiment nd_experiment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment ALTER COLUMN nd_experiment_id SET DEFAULT nextval('public.nd_experiment_nd_experiment_id_seq'::regclass);


--
-- Name: nd_experiment_contact nd_experiment_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_contact ALTER COLUMN nd_experiment_contact_id SET DEFAULT nextval('public.nd_experiment_contact_nd_experiment_contact_id_seq'::regclass);


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_dbxref ALTER COLUMN nd_experiment_dbxref_id SET DEFAULT nextval('public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_genotype ALTER COLUMN nd_experiment_genotype_id SET DEFAULT nextval('public.nd_experiment_genotype_nd_experiment_genotype_id_seq'::regclass);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_phenotype ALTER COLUMN nd_experiment_phenotype_id SET DEFAULT nextval('public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq'::regclass);


--
-- Name: nd_experiment_project nd_experiment_project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_project ALTER COLUMN nd_experiment_project_id SET DEFAULT nextval('public.nd_experiment_project_nd_experiment_project_id_seq'::regclass);


--
-- Name: nd_experiment_protocol nd_experiment_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_protocol ALTER COLUMN nd_experiment_protocol_id SET DEFAULT nextval('public.nd_experiment_protocol_nd_experiment_protocol_id_seq'::regclass);


--
-- Name: nd_experiment_pub nd_experiment_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_pub ALTER COLUMN nd_experiment_pub_id SET DEFAULT nextval('public.nd_experiment_pub_nd_experiment_pub_id_seq'::regclass);


--
-- Name: nd_experiment_stock nd_experiment_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock ALTER COLUMN nd_experiment_stock_id SET DEFAULT nextval('public.nd_experiment_stock_nd_experiment_stock_id_seq'::regclass);


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref ALTER COLUMN nd_experiment_stock_dbxref_id SET DEFAULT nextval('public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stockprop ALTER COLUMN nd_experiment_stockprop_id SET DEFAULT nextval('public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq'::regclass);


--
-- Name: nd_experimentprop nd_experimentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experimentprop ALTER COLUMN nd_experimentprop_id SET DEFAULT nextval('public.nd_experimentprop_nd_experimentprop_id_seq'::regclass);


--
-- Name: nd_geolocation nd_geolocation_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocation ALTER COLUMN nd_geolocation_id SET DEFAULT nextval('public.nd_geolocation_nd_geolocation_id_seq'::regclass);


--
-- Name: nd_geolocationprop nd_geolocationprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocationprop ALTER COLUMN nd_geolocationprop_id SET DEFAULT nextval('public.nd_geolocationprop_nd_geolocationprop_id_seq'::regclass);


--
-- Name: nd_protocol nd_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol ALTER COLUMN nd_protocol_id SET DEFAULT nextval('public.nd_protocol_nd_protocol_id_seq'::regclass);


--
-- Name: nd_protocol_reagent nd_protocol_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol_reagent ALTER COLUMN nd_protocol_reagent_id SET DEFAULT nextval('public.nd_protocol_reagent_nd_protocol_reagent_id_seq'::regclass);


--
-- Name: nd_protocolprop nd_protocolprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocolprop ALTER COLUMN nd_protocolprop_id SET DEFAULT nextval('public.nd_protocolprop_nd_protocolprop_id_seq'::regclass);


--
-- Name: nd_reagent nd_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent ALTER COLUMN nd_reagent_id SET DEFAULT nextval('public.nd_reagent_nd_reagent_id_seq'::regclass);


--
-- Name: nd_reagent_relationship nd_reagent_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent_relationship ALTER COLUMN nd_reagent_relationship_id SET DEFAULT nextval('public.nd_reagent_relationship_nd_reagent_relationship_id_seq'::regclass);


--
-- Name: nd_reagentprop nd_reagentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagentprop ALTER COLUMN nd_reagentprop_id SET DEFAULT nextval('public.nd_reagentprop_nd_reagentprop_id_seq'::regclass);


--
-- Name: organism organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism ALTER COLUMN organism_id SET DEFAULT nextval('public.organism_organism_id_seq'::regclass);


--
-- Name: organism_dbxref organism_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_dbxref ALTER COLUMN organism_dbxref_id SET DEFAULT nextval('public.organism_dbxref_organism_dbxref_id_seq'::regclass);


--
-- Name: organism_relationship organism_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship ALTER COLUMN organism_relationship_id SET DEFAULT nextval('public.organism_relationship_organism_relationship_id_seq'::regclass);


--
-- Name: organismpath organismpath_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath ALTER COLUMN organismpath_id SET DEFAULT nextval('public.organismpath_organismpath_id_seq'::regclass);


--
-- Name: organismprop organismprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismprop ALTER COLUMN organismprop_id SET DEFAULT nextval('public.organismprop_organismprop_id_seq'::regclass);


--
-- Name: phendesc phendesc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc ALTER COLUMN phendesc_id SET DEFAULT nextval('public.phendesc_phendesc_id_seq'::regclass);


--
-- Name: phenotype phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype ALTER COLUMN phenotype_id SET DEFAULT nextval('public.phenotype_phenotype_id_seq'::regclass);


--
-- Name: phenotype_comparison phenotype_comparison_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison ALTER COLUMN phenotype_comparison_id SET DEFAULT nextval('public.phenotype_comparison_phenotype_comparison_id_seq'::regclass);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm ALTER COLUMN phenotype_comparison_cvterm_id SET DEFAULT nextval('public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq'::regclass);


--
-- Name: phenotype_cvterm phenotype_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_cvterm ALTER COLUMN phenotype_cvterm_id SET DEFAULT nextval('public.phenotype_cvterm_phenotype_cvterm_id_seq'::regclass);


--
-- Name: phenotypeprop phenotypeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotypeprop ALTER COLUMN phenotypeprop_id SET DEFAULT nextval('public.phenotypeprop_phenotypeprop_id_seq'::regclass);


--
-- Name: phenstatement phenstatement_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement ALTER COLUMN phenstatement_id SET DEFAULT nextval('public.phenstatement_phenstatement_id_seq'::regclass);


--
-- Name: phylonode phylonode_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode ALTER COLUMN phylonode_id SET DEFAULT nextval('public.phylonode_phylonode_id_seq'::regclass);


--
-- Name: phylonode_dbxref phylonode_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_dbxref ALTER COLUMN phylonode_dbxref_id SET DEFAULT nextval('public.phylonode_dbxref_phylonode_dbxref_id_seq'::regclass);


--
-- Name: phylonode_organism phylonode_organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_organism ALTER COLUMN phylonode_organism_id SET DEFAULT nextval('public.phylonode_organism_phylonode_organism_id_seq'::regclass);


--
-- Name: phylonode_pub phylonode_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_pub ALTER COLUMN phylonode_pub_id SET DEFAULT nextval('public.phylonode_pub_phylonode_pub_id_seq'::regclass);


--
-- Name: phylonode_relationship phylonode_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship ALTER COLUMN phylonode_relationship_id SET DEFAULT nextval('public.phylonode_relationship_phylonode_relationship_id_seq'::regclass);


--
-- Name: phylonodeprop phylonodeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonodeprop ALTER COLUMN phylonodeprop_id SET DEFAULT nextval('public.phylonodeprop_phylonodeprop_id_seq'::regclass);


--
-- Name: phylotree phylotree_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree ALTER COLUMN phylotree_id SET DEFAULT nextval('public.phylotree_phylotree_id_seq'::regclass);


--
-- Name: phylotree_pub phylotree_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree_pub ALTER COLUMN phylotree_pub_id SET DEFAULT nextval('public.phylotree_pub_phylotree_pub_id_seq'::regclass);


--
-- Name: project project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project ALTER COLUMN project_id SET DEFAULT nextval('public.project_project_id_seq'::regclass);


--
-- Name: project_contact project_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_contact ALTER COLUMN project_contact_id SET DEFAULT nextval('public.project_contact_project_contact_id_seq'::regclass);


--
-- Name: project_pub project_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_pub ALTER COLUMN project_pub_id SET DEFAULT nextval('public.project_pub_project_pub_id_seq'::regclass);


--
-- Name: project_relationship project_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship ALTER COLUMN project_relationship_id SET DEFAULT nextval('public.project_relationship_project_relationship_id_seq'::regclass);


--
-- Name: projectprop projectprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projectprop ALTER COLUMN projectprop_id SET DEFAULT nextval('public.projectprop_projectprop_id_seq'::regclass);


--
-- Name: pub pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub ALTER COLUMN pub_id SET DEFAULT nextval('public.pub_pub_id_seq'::regclass);


--
-- Name: pub_dbxref pub_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_dbxref ALTER COLUMN pub_dbxref_id SET DEFAULT nextval('public.pub_dbxref_pub_dbxref_id_seq'::regclass);


--
-- Name: pub_relationship pub_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship ALTER COLUMN pub_relationship_id SET DEFAULT nextval('public.pub_relationship_pub_relationship_id_seq'::regclass);


--
-- Name: pubabstract pubabstract_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubabstract ALTER COLUMN pubabstract_id SET DEFAULT nextval('public.pubabstract_pubabstract_id_seq'::regclass);


--
-- Name: pubauthor pubauthor_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubauthor ALTER COLUMN pubauthor_id SET DEFAULT nextval('public.pubauthor_pubauthor_id_seq'::regclass);


--
-- Name: pubprop pubprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubprop ALTER COLUMN pubprop_id SET DEFAULT nextval('public.pubprop_pubprop_id_seq'::regclass);


--
-- Name: resource_file resource_file_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource_file ALTER COLUMN resource_file_id SET DEFAULT nextval('public.resource_file_resource_file_id_seq'::regclass);


--
-- Name: signalp signalp_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.signalp ALTER COLUMN signalp_id SET DEFAULT nextval('public.signalp_signalp_id_seq'::regclass);


--
-- Name: stock stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock ALTER COLUMN stock_id SET DEFAULT nextval('public.stock_stock_id_seq'::regclass);


--
-- Name: stock_cvterm stock_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm ALTER COLUMN stock_cvterm_id SET DEFAULT nextval('public.stock_cvterm_stock_cvterm_id_seq'::regclass);


--
-- Name: stock_cvtermprop stock_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvtermprop ALTER COLUMN stock_cvtermprop_id SET DEFAULT nextval('public.stock_cvtermprop_stock_cvtermprop_id_seq'::regclass);


--
-- Name: stock_dbxref stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxref ALTER COLUMN stock_dbxref_id SET DEFAULT nextval('public.stock_dbxref_stock_dbxref_id_seq'::regclass);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxrefprop ALTER COLUMN stock_dbxrefprop_id SET DEFAULT nextval('public.stock_dbxrefprop_stock_dbxrefprop_id_seq'::regclass);


--
-- Name: stock_genotype stock_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_genotype ALTER COLUMN stock_genotype_id SET DEFAULT nextval('public.stock_genotype_stock_genotype_id_seq'::regclass);


--
-- Name: stock_pub stock_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_pub ALTER COLUMN stock_pub_id SET DEFAULT nextval('public.stock_pub_stock_pub_id_seq'::regclass);


--
-- Name: stock_relationship stock_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship ALTER COLUMN stock_relationship_id SET DEFAULT nextval('public.stock_relationship_stock_relationship_id_seq'::regclass);


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_cvterm ALTER COLUMN stock_relationship_cvterm_id SET DEFAULT nextval('public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq'::regclass);


--
-- Name: stock_relationship_pub stock_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_pub ALTER COLUMN stock_relationship_pub_id SET DEFAULT nextval('public.stock_relationship_pub_stock_relationship_pub_id_seq'::regclass);


--
-- Name: stockcollection stockcollection_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection ALTER COLUMN stockcollection_id SET DEFAULT nextval('public.stockcollection_stockcollection_id_seq'::regclass);


--
-- Name: stockcollection_stock stockcollection_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection_stock ALTER COLUMN stockcollection_stock_id SET DEFAULT nextval('public.stockcollection_stock_stockcollection_stock_id_seq'::regclass);


--
-- Name: stockcollectionprop stockcollectionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollectionprop ALTER COLUMN stockcollectionprop_id SET DEFAULT nextval('public.stockcollectionprop_stockcollectionprop_id_seq'::regclass);


--
-- Name: stockprop stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop ALTER COLUMN stockprop_id SET DEFAULT nextval('public.stockprop_stockprop_id_seq'::regclass);


--
-- Name: stockprop_pub stockprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop_pub ALTER COLUMN stockprop_pub_id SET DEFAULT nextval('public.stockprop_pub_stockprop_pub_id_seq'::regclass);


--
-- Name: synonym synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.synonym ALTER COLUMN synonym_id SET DEFAULT nextval('public.synonym_synonym_id_seq'::regclass);


--
-- Name: tableinfo tableinfo_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tableinfo ALTER COLUMN tableinfo_id SET DEFAULT nextval('public.tableinfo_tableinfo_id_seq'::regclass);


--
-- Name: tmp_cds_handler cds_row_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tmp_cds_handler ALTER COLUMN cds_row_id SET DEFAULT nextval('public.tmp_cds_handler_cds_row_id_seq'::regclass);


--
-- Name: tmp_cds_handler_relationship rel_row_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tmp_cds_handler_relationship ALTER COLUMN rel_row_id SET DEFAULT nextval('public.tmp_cds_handler_relationship_rel_row_id_seq'::regclass);


--
-- Name: unigene_dbxref unigene_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_dbxref ALTER COLUMN unigene_dbxref_id SET DEFAULT nextval('public.unigene_dbxref_unigene_dbxref_id_seq'::regclass);


--
-- Name: accession accession_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession ALTER COLUMN accession_id SET DEFAULT nextval('sgn.accession_accession_id_seq'::regclass);


--
-- Name: accession_names accession_name_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession_names ALTER COLUMN accession_name_id SET DEFAULT nextval('sgn.accession_names_accession_name_id_seq'::regclass);


--
-- Name: annotation_target_type annotation_target_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.annotation_target_type ALTER COLUMN annotation_target_type_id SET DEFAULT nextval('sgn.annotation_target_type_annotation_target_type_id_seq'::regclass);


--
-- Name: authors author_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.authors ALTER COLUMN author_id SET DEFAULT nextval('sgn.authors_author_id_seq'::regclass);


--
-- Name: blast_annotations blast_annotation_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_annotations ALTER COLUMN blast_annotation_id SET DEFAULT nextval('sgn.blast_annotations_blast_annotation_id_seq'::regclass);


--
-- Name: blast_db blast_db_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db ALTER COLUMN blast_db_id SET DEFAULT nextval('sgn.blast_db_blast_db_id_seq'::regclass);


--
-- Name: blast_db_blast_db_group blast_db_blast_db_group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_blast_db_group ALTER COLUMN blast_db_blast_db_group_id SET DEFAULT nextval('sgn.blast_db_blast_db_group_blast_db_blast_db_group_id_seq'::regclass);


--
-- Name: blast_db_group blast_db_group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_group ALTER COLUMN blast_db_group_id SET DEFAULT nextval('sgn.blast_db_group_blast_db_group_id_seq'::regclass);


--
-- Name: blast_db_organism blast_db_organism_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_organism ALTER COLUMN blast_db_organism_id SET DEFAULT nextval('sgn.blast_db_organism_blast_db_organism_id_seq'::regclass);


--
-- Name: blast_defline defline_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_defline ALTER COLUMN defline_id SET DEFAULT nextval('sgn.blast_defline_defline_id_seq'::regclass);


--
-- Name: blast_hits blast_hit_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_hits ALTER COLUMN blast_hit_id SET DEFAULT nextval('sgn.blast_hits_blast_hit_id_seq'::regclass);


--
-- Name: blast_targets blast_target_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_targets ALTER COLUMN blast_target_id SET DEFAULT nextval('sgn.blast_targets_blast_target_id_seq'::regclass);


--
-- Name: cds cds_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cds ALTER COLUMN cds_id SET DEFAULT nextval('sgn.cds_cds_id_seq'::regclass);


--
-- Name: chadoprop chadoprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.chadoprop ALTER COLUMN chadoprop_id SET DEFAULT nextval('sgn.chadoprop_chadoprop_id_seq'::regclass);


--
-- Name: clone clone_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.clone ALTER COLUMN clone_id SET DEFAULT nextval('sgn.clone_clone_id_seq'::regclass);


--
-- Name: cloning_vector cloning_vector_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cloning_vector ALTER COLUMN cloning_vector_id SET DEFAULT nextval('sgn.cloning_vector_cloning_vector_id_seq'::regclass);


--
-- Name: common_name common_name_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_name ALTER COLUMN common_name_id SET DEFAULT nextval('sgn.common_name_common_name_id_seq'::regclass);


--
-- Name: common_nameprop common_nameprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_nameprop ALTER COLUMN common_nameprop_id SET DEFAULT nextval('sgn.common_nameprop_common_nameprop_id_seq'::regclass);


--
-- Name: cos_markers cos_marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cos_markers ALTER COLUMN cos_marker_id SET DEFAULT nextval('sgn.cos_markers_cos_marker_id_seq'::regclass);


--
-- Name: cosii_ortholog cosii_unigene_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cosii_ortholog ALTER COLUMN cosii_unigene_id SET DEFAULT nextval('sgn.cosii_ortholog_cosii_unigene_id_seq'::regclass);


--
-- Name: deprecated_linkage_groups lg_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_linkage_groups ALTER COLUMN lg_id SET DEFAULT nextval('sgn.deprecated_linkage_groups_lg_id_seq'::regclass);


--
-- Name: deprecated_map_cross map_cross_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_map_cross ALTER COLUMN map_cross_id SET DEFAULT nextval('sgn.deprecated_map_cross_map_cross_id_seq'::regclass);


--
-- Name: deprecated_mapdata loc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_mapdata ALTER COLUMN loc_id SET DEFAULT nextval('sgn.deprecated_mapdata_loc_id_seq'::regclass);


--
-- Name: deprecated_maps map_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_maps ALTER COLUMN map_id SET DEFAULT nextval('sgn.deprecated_maps_map_id_seq'::regclass);


--
-- Name: deprecated_marker_confidences confidence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_confidences ALTER COLUMN confidence_id SET DEFAULT nextval('sgn.deprecated_marker_confidences_confidence_id_seq'::regclass);


--
-- Name: deprecated_marker_locations marker_location_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_locations ALTER COLUMN marker_location_id SET DEFAULT nextval('sgn.deprecated_marker_locations_marker_location_id_seq'::regclass);


--
-- Name: deprecated_marker_types marker_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_types ALTER COLUMN marker_type_id SET DEFAULT nextval('sgn.deprecated_marker_types_marker_type_id_seq'::regclass);


--
-- Name: deprecated_markers marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_markers ALTER COLUMN marker_id SET DEFAULT nextval('sgn.deprecated_markers_marker_id_seq'::regclass);


--
-- Name: derived_from_source derived_from_source_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.derived_from_source ALTER COLUMN derived_from_source_id SET DEFAULT nextval('sgn.derived_from_source_derived_from_source_id_seq'::regclass);


--
-- Name: domain domain_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain ALTER COLUMN domain_id SET DEFAULT nextval('sgn.domain_domain_id_seq'::regclass);


--
-- Name: domain_match domain_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain_match ALTER COLUMN domain_match_id SET DEFAULT nextval('sgn.domain_match_domain_match_id_seq'::regclass);


--
-- Name: enzyme_restriction_sites enzyme_restriction_sites_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.enzyme_restriction_sites ALTER COLUMN enzyme_restriction_sites_id SET DEFAULT nextval('sgn.enzyme_restriction_sites_enzyme_restriction_sites_id_seq'::regclass);


--
-- Name: enzymes enzyme_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.enzymes ALTER COLUMN enzyme_id SET DEFAULT nextval('sgn.enzymes_enzyme_id_seq'::regclass);


--
-- Name: est est_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est ALTER COLUMN est_id SET DEFAULT nextval('sgn.est_est_id_seq'::regclass);


--
-- Name: est_dbxref est_dbxref_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est_dbxref ALTER COLUMN est_dbxref_id SET DEFAULT nextval('sgn.est_dbxref_est_dbxref_id_seq'::regclass);


--
-- Name: ests_mapped_by_clone embc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ests_mapped_by_clone ALTER COLUMN embc_id SET DEFAULT nextval('sgn.ests_mapped_by_clone_embc_id_seq'::regclass);


--
-- Name: experiment_type experiment_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.experiment_type ALTER COLUMN experiment_type_id SET DEFAULT nextval('sgn.experiment_type_experiment_type_id_seq'::regclass);


--
-- Name: facility facility_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.facility ALTER COLUMN facility_id SET DEFAULT nextval('sgn.facility_facility_id_seq'::regclass);


--
-- Name: family family_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family ALTER COLUMN family_id SET DEFAULT nextval('sgn.family_family_id_seq'::regclass);


--
-- Name: family_build family_build_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_build ALTER COLUMN family_build_id SET DEFAULT nextval('sgn.family_build_family_build_id_seq'::regclass);


--
-- Name: family_member family_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_member ALTER COLUMN family_member_id SET DEFAULT nextval('sgn.family_member_family_member_id_seq'::regclass);


--
-- Name: family_tree family_tree_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_tree ALTER COLUMN family_tree_id SET DEFAULT nextval('sgn.family_tree_family_tree_id_seq'::regclass);


--
-- Name: fish_experimenter fish_experimenter_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_experimenter ALTER COLUMN fish_experimenter_id SET DEFAULT nextval('sgn.fish_experimenter_fish_experimenter_id_seq'::regclass);


--
-- Name: fish_file fish_file_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_file ALTER COLUMN fish_file_id SET DEFAULT nextval('sgn.fish_file_fish_file_id_seq'::regclass);


--
-- Name: fish_result fish_result_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result ALTER COLUMN fish_result_id SET DEFAULT nextval('sgn.fish_result_fish_result_id_seq'::regclass);


--
-- Name: fish_result_image fish_result_image_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result_image ALTER COLUMN fish_result_image_id SET DEFAULT nextval('sgn.fish_result_image_fish_result_image_id_seq'::regclass);


--
-- Name: go go_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.go ALTER COLUMN go_id SET DEFAULT nextval('sgn.go_go_id_seq'::regclass);


--
-- Name: group_linkage group_linkage_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.group_linkage ALTER COLUMN group_linkage_id SET DEFAULT nextval('sgn.group_linkage_group_linkage_id_seq'::regclass);


--
-- Name: groups group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.groups ALTER COLUMN group_id SET DEFAULT nextval('sgn.groups_group_id_seq'::regclass);


--
-- Name: id_linkage id_linkage_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.id_linkage ALTER COLUMN id_linkage_id SET DEFAULT nextval('sgn.id_linkage_id_linkage_id_seq'::regclass);


--
-- Name: interpro interpro_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro ALTER COLUMN interpro_id SET DEFAULT nextval('sgn.interpro_interpro_id_seq'::regclass);


--
-- Name: interpro_go interpro_go_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro_go ALTER COLUMN interpro_go_id SET DEFAULT nextval('sgn.interpro_go_interpro_go_id_seq'::regclass);


--
-- Name: library library_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library ALTER COLUMN library_id SET DEFAULT nextval('sgn.library_library_id_seq'::regclass);


--
-- Name: linkage_group lg_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group ALTER COLUMN lg_id SET DEFAULT nextval('sgn.linkage_group_lg_id_seq'::regclass);


--
-- Name: loc_types loc_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.loc_types ALTER COLUMN loc_type_id SET DEFAULT nextval('sgn.loc_types_loc_type_id_seq'::regclass);


--
-- Name: manual_annotations manual_annotations_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.manual_annotations ALTER COLUMN manual_annotations_id SET DEFAULT nextval('sgn.manual_annotations_manual_annotations_id_seq'::regclass);


--
-- Name: manual_censor_reasons censor_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.manual_censor_reasons ALTER COLUMN censor_id SET DEFAULT nextval('sgn.manual_censor_reasons_censor_id_seq'::regclass);


--
-- Name: map map_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map ALTER COLUMN map_id SET DEFAULT nextval('sgn.map_map_id_seq'::regclass);


--
-- Name: map_version map_version_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map_version ALTER COLUMN map_version_id SET DEFAULT nextval('sgn.map_version_map_version_id_seq'::regclass);


--
-- Name: marker marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker ALTER COLUMN marker_id SET DEFAULT nextval('sgn.marker_marker_id_seq'::regclass);


--
-- Name: marker_alias alias_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_alias ALTER COLUMN alias_id SET DEFAULT nextval('sgn.marker_alias_alias_id_seq'::regclass);


--
-- Name: marker_collectible marker_collectible_dummy_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collectible ALTER COLUMN marker_collectible_dummy_id SET DEFAULT nextval('sgn.marker_collectible_marker_collectible_dummy_id_seq'::regclass);


--
-- Name: marker_collection mc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collection ALTER COLUMN mc_id SET DEFAULT nextval('sgn.marker_collection_mc_id_seq'::regclass);


--
-- Name: marker_confidence confidence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_confidence ALTER COLUMN confidence_id SET DEFAULT nextval('sgn.marker_confidence_confidence_id_seq'::regclass);


--
-- Name: marker_derived_from marker_derived_dummy_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_derived_from ALTER COLUMN marker_derived_dummy_id SET DEFAULT nextval('sgn.marker_derived_from_marker_derived_dummy_id_seq'::regclass);


--
-- Name: marker_experiment marker_experiment_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment ALTER COLUMN marker_experiment_id SET DEFAULT nextval('sgn.marker_experiment_marker_experiment_id_seq'::regclass);


--
-- Name: marker_location location_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_location ALTER COLUMN location_id SET DEFAULT nextval('sgn.marker_location_location_id_seq'::regclass);


--
-- Name: metadata metadata_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.metadata ALTER COLUMN metadata_id SET DEFAULT nextval('sgn.metadata_metadata_id_seq'::regclass);


--
-- Name: microarray microarray_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.microarray ALTER COLUMN microarray_id SET DEFAULT nextval('sgn.microarray_microarray_id_seq'::regclass);


--
-- Name: misc misc_unique_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.misc ALTER COLUMN misc_unique_id SET DEFAULT nextval('sgn.misc_misc_unique_id_seq'::regclass);


--
-- Name: organism organism_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism ALTER COLUMN organism_id SET DEFAULT nextval('sgn.organism_organism_id_seq'::regclass);


--
-- Name: organismgroup organismgroup_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup ALTER COLUMN organismgroup_id SET DEFAULT nextval('sgn.organismgroup_organismgroup_id_seq'::regclass);


--
-- Name: organismgroup_member organismgroup_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup_member ALTER COLUMN organismgroup_member_id SET DEFAULT nextval('sgn.organismgroup_member_organismgroup_member_id_seq'::regclass);


--
-- Name: p_markers pid; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.p_markers ALTER COLUMN pid SET DEFAULT nextval('sgn.p_markers_pid_seq'::regclass);


--
-- Name: pcr_exp_accession pcr_exp_accession_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_exp_accession ALTER COLUMN pcr_exp_accession_id SET DEFAULT nextval('sgn.pcr_exp_accession_pcr_exp_accession_id_seq'::regclass);


--
-- Name: pcr_experiment pcr_experiment_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment ALTER COLUMN pcr_experiment_id SET DEFAULT nextval('sgn.pcr_experiment_pcr_experiment_id_seq'::regclass);


--
-- Name: pcr_experiment_sequence pcr_experiment_sequence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment_sequence ALTER COLUMN pcr_experiment_sequence_id SET DEFAULT nextval('sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq'::regclass);


--
-- Name: pcr_product pcr_product_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_product ALTER COLUMN pcr_product_id SET DEFAULT nextval('sgn.pcr_product_pcr_product_id_seq'::regclass);


--
-- Name: primer_unigene_match primer_unigene_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.primer_unigene_match ALTER COLUMN primer_unigene_match_id SET DEFAULT nextval('sgn.primer_unigene_match_primer_unigene_match_id_seq'::regclass);


--
-- Name: qc_report qc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.qc_report ALTER COLUMN qc_id SET DEFAULT nextval('sgn.qc_report_qc_id_seq'::regclass);


--
-- Name: rflp_markers rflp_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_markers ALTER COLUMN rflp_id SET DEFAULT nextval('sgn.rflp_markers_rflp_id_seq'::regclass);


--
-- Name: rflp_sequences seq_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_sequences ALTER COLUMN seq_id SET DEFAULT nextval('sgn.rflp_sequences_seq_id_seq'::regclass);


--
-- Name: rflp_unigene_associations rflp_unigene_assoc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_unigene_associations ALTER COLUMN rflp_unigene_assoc_id SET DEFAULT nextval('sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq'::regclass);


--
-- Name: seqread read_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.seqread ALTER COLUMN read_id SET DEFAULT nextval('sgn.seqread_read_id_seq'::regclass);


--
-- Name: sequence sequence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.sequence ALTER COLUMN sequence_id SET DEFAULT nextval('sgn.sequence_sequence_id_seq'::regclass);


--
-- Name: snp snp_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp ALTER COLUMN snp_id SET DEFAULT nextval('sgn.snp_snp_id_seq'::regclass);


--
-- Name: snp_file snp_file_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp_file ALTER COLUMN snp_file_id SET DEFAULT nextval('sgn.snp_file_snp_file_id_seq'::regclass);


--
-- Name: snpprop snpprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snpprop ALTER COLUMN snpprop_id SET DEFAULT nextval('sgn.snpprop_snpprop_id_seq'::regclass);


--
-- Name: ssr ssr_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr ALTER COLUMN ssr_id SET DEFAULT nextval('sgn.ssr_ssr_id_seq'::regclass);


--
-- Name: ssr_primer_unigene_matches ssr_primer_unigene_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_primer_unigene_matches ALTER COLUMN ssr_primer_unigene_match_id SET DEFAULT nextval('sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq'::regclass);


--
-- Name: ssr_repeats repeat_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_repeats ALTER COLUMN repeat_id SET DEFAULT nextval('sgn.ssr_repeats_repeat_id_seq'::regclass);


--
-- Name: submit_user submit_user_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.submit_user ALTER COLUMN submit_user_id SET DEFAULT nextval('sgn.submit_user_submit_user_id_seq'::regclass);


--
-- Name: taxonomy tax_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.taxonomy ALTER COLUMN tax_id SET DEFAULT nextval('sgn.taxonomy_tax_id_seq'::regclass);


--
-- Name: temp_caps_correspondence tcc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_caps_correspondence ALTER COLUMN tcc_id SET DEFAULT nextval('sgn.temp_caps_correspondence_tcc_id_seq'::regclass);


--
-- Name: temp_map_correspondence tmc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_map_correspondence ALTER COLUMN tmc_id SET DEFAULT nextval('sgn.temp_map_correspondence_tmc_id_seq'::regclass);


--
-- Name: temp_marker_correspondence tmc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_marker_correspondence ALTER COLUMN tmc_id SET DEFAULT nextval('sgn.temp_marker_correspondence_tmc_id_seq'::regclass);


--
-- Name: tigrtc_index tcindex_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_index ALTER COLUMN tcindex_id SET DEFAULT nextval('sgn.tigrtc_index_tcindex_id_seq'::regclass);


--
-- Name: tigrtc_membership tigrtc_membership_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_membership ALTER COLUMN tigrtc_membership_id SET DEFAULT nextval('sgn.tigrtc_membership_tigrtc_membership_id_seq'::regclass);


--
-- Name: tigrtc_tracking tigrtc_tracking_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_tracking ALTER COLUMN tigrtc_tracking_id SET DEFAULT nextval('sgn.tigrtc_tracking_tigrtc_tracking_id_seq'::regclass);


--
-- Name: tm_markers tm_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tm_markers ALTER COLUMN tm_id SET DEFAULT nextval('sgn.tm_markers_tm_id_seq'::regclass);


--
-- Name: trim_feature feature_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.trim_feature ALTER COLUMN feature_id SET DEFAULT nextval('sgn.trim_feature_feature_id_seq'::regclass);


--
-- Name: trim_feature_types trim_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.trim_feature_types ALTER COLUMN trim_type_id SET DEFAULT nextval('sgn.trim_feature_types_trim_type_id_seq'::regclass);


--
-- Name: types type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.types ALTER COLUMN type_id SET DEFAULT nextval('sgn.types_type_id_seq'::regclass);


--
-- Name: unigene unigene_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene ALTER COLUMN unigene_id SET DEFAULT nextval('sgn.unigene_unigene_id_seq'::regclass);


--
-- Name: unigene_build unigene_build_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build ALTER COLUMN unigene_build_id SET DEFAULT nextval('sgn.unigene_build_unigene_build_id_seq'::regclass);


--
-- Name: unigene_consensi consensi_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_consensi ALTER COLUMN consensi_id SET DEFAULT nextval('sgn.unigene_consensi_consensi_id_seq'::regclass);


--
-- Name: unigene_member unigene_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_member ALTER COLUMN unigene_member_id SET DEFAULT nextval('sgn.unigene_member_unigene_member_id_seq'::regclass);


--
-- Name: bac_status bac_status_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status ALTER COLUMN bac_status_id SET DEFAULT nextval('sgn_people.bac_status_bac_status_id_seq'::regclass);


--
-- Name: bac_status_log bac_status_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status_log ALTER COLUMN bac_status_log_id SET DEFAULT nextval('sgn_people.bac_status_log_bac_status_log_id_seq'::regclass);


--
-- Name: clone_il_mapping_bin_log sp_clone_il_mapping_bin_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_il_mapping_bin_log ALTER COLUMN sp_clone_il_mapping_bin_log_id SET DEFAULT nextval('sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq'::regclass);


--
-- Name: clone_validation_log clone_validation_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_validation_log ALTER COLUMN clone_validation_log_id SET DEFAULT nextval('sgn_people.clone_validation_log_clone_validation_log_id_seq'::regclass);


--
-- Name: clone_verification_log clone_verification_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_verification_log ALTER COLUMN clone_verification_log_id SET DEFAULT nextval('sgn_people.clone_verification_log_clone_verification_log_id_seq'::regclass);


--
-- Name: forum_post forum_post_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_post ALTER COLUMN forum_post_id SET DEFAULT nextval('sgn_people.forum_post_forum_post_id_seq'::regclass);


--
-- Name: forum_topic forum_topic_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_topic ALTER COLUMN forum_topic_id SET DEFAULT nextval('sgn_people.forum_topic_forum_topic_id_seq'::regclass);


--
-- Name: list list_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list ALTER COLUMN list_id SET DEFAULT nextval('sgn_people.list_list_id_seq'::regclass);


--
-- Name: list_item list_item_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list_item ALTER COLUMN list_item_id SET DEFAULT nextval('sgn_people.list_item_list_item_id_seq'::regclass);


--
-- Name: sp_clone_il_mapping_segment_log sp_clone_il_mapping_segment_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_clone_il_mapping_segment_log ALTER COLUMN sp_clone_il_mapping_segment_log_id SET DEFAULT nextval('sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq'::regclass);


--
-- Name: sp_dataset sp_dataset_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_dataset ALTER COLUMN sp_dataset_id SET DEFAULT nextval('sgn_people.sp_dataset_sp_dataset_id_seq'::regclass);


--
-- Name: sp_group sp_group_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_group ALTER COLUMN sp_group_id SET DEFAULT nextval('sgn_people.sp_group_sp_group_id_seq'::regclass);


--
-- Name: sp_login_old sp_login_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_login_old ALTER COLUMN sp_login_id SET DEFAULT nextval('sgn_people.sp_login_old_sp_login_id_seq'::regclass);


--
-- Name: sp_organisms organism_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organisms ALTER COLUMN organism_id SET DEFAULT nextval('sgn_people.sp_organisms_organism_id_seq'::regclass);


--
-- Name: sp_organization sp_organization_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organization ALTER COLUMN sp_organization_id SET DEFAULT nextval('sgn_people.sp_organization_sp_organization_id_seq'::regclass);


--
-- Name: sp_organization_person sp_organization_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organization_person ALTER COLUMN sp_organization_person_id SET DEFAULT nextval('sgn_people.sp_organization_person_sp_organization_person_id_seq'::regclass);


--
-- Name: sp_papers sp_paper_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_papers ALTER COLUMN sp_paper_id SET DEFAULT nextval('sgn_people.sp_papers_sp_paper_id_seq'::regclass);


--
-- Name: sp_person sp_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person ALTER COLUMN sp_person_id SET DEFAULT nextval('sgn_people.sp_person_sp_person_id_seq'::regclass);


--
-- Name: sp_person_organisms sp_person_organisms_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_organisms ALTER COLUMN sp_person_organisms_id SET DEFAULT nextval('sgn_people.sp_person_organisms_sp_person_organisms_id_seq'::regclass);


--
-- Name: sp_person_roles sp_person_role_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_roles ALTER COLUMN sp_person_role_id SET DEFAULT nextval('sgn_people.sp_person_roles_sp_person_role_id_seq'::regclass);


--
-- Name: sp_project sp_project_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project ALTER COLUMN sp_project_id SET DEFAULT nextval('sgn_people.sp_project_sp_project_id_seq'::regclass);


--
-- Name: sp_project_il_mapping_clone_log sp_project_il_mapping_clone_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_il_mapping_clone_log ALTER COLUMN sp_project_il_mapping_clone_log_id SET DEFAULT nextval('sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq'::regclass);


--
-- Name: sp_project_organization sp_project_organization_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_organization ALTER COLUMN sp_project_organization_id SET DEFAULT nextval('sgn_people.sp_project_organization_sp_project_organization_id_seq'::regclass);


--
-- Name: sp_project_person sp_project_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_person ALTER COLUMN sp_project_person_id SET DEFAULT nextval('sgn_people.sp_project_person_sp_project_person_id_seq'::regclass);


--
-- Name: sp_roles sp_role_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_roles ALTER COLUMN sp_role_id SET DEFAULT nextval('sgn_people.sp_roles_sp_role_id_seq'::regclass);


--
-- Name: user_map user_map_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map ALTER COLUMN user_map_id SET DEFAULT nextval('sgn_people.user_map_user_map_id_seq'::regclass);


--
-- Name: user_map_data user_map_data_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map_data ALTER COLUMN user_map_data_id SET DEFAULT nextval('sgn_people.user_map_data_user_map_data_id_seq'::regclass);


--
-- Name: facility facility_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.facility ALTER COLUMN facility_id SET DEFAULT nextval('sgn_submit.facility_facility_id_seq'::regclass);


--
-- Name: library library_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.library ALTER COLUMN library_id SET DEFAULT nextval('sgn_submit.library_library_id_seq'::regclass);


--
-- Name: seqread submit_read_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.seqread ALTER COLUMN submit_read_id SET DEFAULT nextval('sgn_submit.seqread_submit_read_id_seq'::regclass);


--
-- Name: submit_user submit_user_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.submit_user ALTER COLUMN submit_user_id SET DEFAULT nextval('sgn_submit.submit_user_submit_user_id_seq'::regclass);


--
-- Name: fattribute fattribute_id; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fattribute ALTER COLUMN fattribute_id SET DEFAULT nextval('tomato_gff.fattribute_fattribute_id_seq'::regclass);


--
-- Name: fdata fid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fdata ALTER COLUMN fid SET DEFAULT nextval('tomato_gff.fdata_fid_seq'::regclass);


--
-- Name: fgroup gid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fgroup ALTER COLUMN gid SET DEFAULT nextval('tomato_gff.fgroup_gid_seq'::regclass);


--
-- Name: ftype ftypeid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.ftype ALTER COLUMN ftypeid SET DEFAULT nextval('tomato_gff.ftype_ftypeid_seq'::regclass);

-- populate tables
\i /docker-entrypoint-initdb.d/data/metadata.md_dbversion.sql
\i /docker-entrypoint-initdb.d/data/metadata.md_image.sql
\i /docker-entrypoint-initdb.d/data/metadata.md_metadata.sql
\i /docker-entrypoint-initdb.d/data/public.cv.sql
\i /docker-entrypoint-initdb.d/data/public.cvalue_ids.sql
\i /docker-entrypoint-initdb.d/data/public.cvterm_dbxref.sql
\i /docker-entrypoint-initdb.d/data/public.cvterm_relationship.sql
\i /docker-entrypoint-initdb.d/data/public.cvterm.sql
\i /docker-entrypoint-initdb.d/data/public.cvtermpath.sql
\i /docker-entrypoint-initdb.d/data/public.cvtermprop.sql
\i /docker-entrypoint-initdb.d/data/public.cvtermsynonym.sql
\i /docker-entrypoint-initdb.d/data/public.db.sql
\i /docker-entrypoint-initdb.d/data/public.dbxref.sql
\i /docker-entrypoint-initdb.d/data/public.materialized_traits.sql
\i /docker-entrypoint-initdb.d/data/public.matviews.sql
\i /docker-entrypoint-initdb.d/data/public.nd_geolocation.sql
\i /docker-entrypoint-initdb.d/data/public.organism_dbxref.sql
\i /docker-entrypoint-initdb.d/data/public.organism.sql
\i /docker-entrypoint-initdb.d/data/public.organismprop.sql
\i /docker-entrypoint-initdb.d/data/public.phylonode_organism.sql
\i /docker-entrypoint-initdb.d/data/public.phylonode.sql
\i /docker-entrypoint-initdb.d/data/public.phylotree.sql
\i /docker-entrypoint-initdb.d/data/public.project.sql
\i /docker-entrypoint-initdb.d/data/public.projectprop.sql
\i /docker-entrypoint-initdb.d/data/sgn_people.sp_person_roles.sql
\i /docker-entrypoint-initdb.d/data/sgn_people.sp_person.sql
\i /docker-entrypoint-initdb.d/data/sgn_people.sp_roles.sql
\i /docker-entrypoint-initdb.d/data/sgn.experiment_type.sql

--
-- restore integrety constraints/sequences/materialized views
--

--
-- Name: annotation_annot_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.annotation_annot_id_seq', 1, false);


--
-- Name: comment_comment_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.comment_comment_id_seq', 1, false);


--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.comp_analysis_ca_id_seq', 1, false);


--
-- Name: dblist_db_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.dblist_db_id_seq', 1, false);


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.dbxref_dbxref_id_seq', 1, false);


--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.feature_set_f_set_id_seq', 1, false);


--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.feature_span_f_span_id_seq', 1, false);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.organism_organism_id_seq', 1, false);


--
-- Name: output_output_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.output_output_id_seq', 1, false);


--
-- Name: person_person_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.person_person_id_seq', 1, false);


--
-- Name: program_program_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.program_program_id_seq', 1, false);


--
-- Name: property_property_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.property_property_id_seq', 1, false);


--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.result_set_r_set_id_seq', 1, false);


--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.result_span_r_span_id_seq', 1, false);


--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.seq_error_seq_err_id_seq', 1, false);


--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.seq_relationship_seq_rel_id_seq', 1, false);


--
-- Name: seq_seq_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.seq_seq_id_seq', 1, false);


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation.synonym_synonym_id_seq', 1, false);


--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_protocol_protocol_id_seq', 1, false);


--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_protocol_pub_protocol_pub_id_seq', 1, false);


--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq', 1, false);


--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_protocol_step_protocol_step_id_seq', 1, false);


--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_cvterm_sample_cvterm_id_seq', 1, false);


--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_dbxref_sample_dbxref_id_seq', 1, false);


--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq', 1, false);


--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq', 1, false);


--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_element_file_sample_element_file_id_seq', 1, false);


--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_element_relation_sample_element_relation_id_seq', 1, false);


--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_element_sample_element_id_seq', 1, false);


--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_file_sample_file_id_seq', 1, false);


--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_pub_sample_pub_id_seq', 1, false);


--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_relationship_sample_relationship_id_seq', 1, false);


--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_sample_sample_id_seq', 1, false);


--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_tool_pub_tool_pub_id_seq', 1, false);


--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('biosource.bs_tool_tool_id_seq', 1, false);


--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_cluster_analysis_cluster_analysis_id_seq', 1, false);


--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_cluster_member_cluster_member_id_seq', 1, false);


--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_cluster_profile_cluster_profile_id_seq', 1, false);


--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_correlation_analysis_correlation_analysis_id_seq', 1, false);


--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_correlation_member_correlation_member_id_seq', 1, false);


--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_data_analysis_process_data_analysis_process_id_seq', 1, false);


--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_diff_expression_diff_expression_id_seq', 1, false);


--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq', 1, false);


--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq', 1, false);


--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experiment_dbxref_experiment_dbxref_id_seq', 1, false);


--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experiment_experiment_id_seq', 1, false);


--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq', 1, false);


--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experimental_design_experimental_design_id_seq', 1, false);


--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_experimental_design_pub_experimental_design_pub_id_seq', 1, false);


--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_expression_by_experiment_expression_by_experiment_id_seq', 1, false);


--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_fluorescanning_fluorescanning_id_seq', 1, false);


--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_hybridization_hybridization_id_seq', 1, false);


--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_platform_dbxref_platform_dbxref_id_seq', 1, false);


--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_platform_design_platform_design_id_seq', 1, false);


--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_platform_platform_id_seq', 1, false);


--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_platform_pub_platform_pub_id_seq', 1, false);


--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_probe_expression_probe_expression_id_seq', 1, false);


--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_probe_probe_id_seq', 1, false);


--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq', 1, false);


--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_probe_spot_probe_spot_id_seq', 1, false);


--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_profile_element_profile_element_id_seq', 1, false);


--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_target_dbxref_target_dbxref_id_seq', 1, false);


--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_target_element_target_element_id_seq', 1, false);


--
-- Name: ge_target_target_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_target_target_id_seq', 1, false);


--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_technology_type_technology_type_id_seq', 1, false);


--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_template_dbiref_template_dbiref_id_seq', 1, false);


--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_template_dbxref_template_dbxref_id_seq', 1, false);


--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_template_diff_expression_template_diff_expression_id_seq', 1, false);


--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_template_expression_template_expression_id_seq', 1, false);


--
-- Name: ge_template_template_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('gem.ge_template_template_id_seq', 1, false);


--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.blast_defline_blast_defline_id_seq', 1, false);


--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.blast_hit_blast_hit_id_seq', 1, false);


--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.blast_query_blast_query_id_seq', 1, false);


--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.chromat_chromat_id_seq', 1, false);


--
-- Name: clone_clone_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.clone_clone_id_seq', 1, false);


--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.clone_feature_clone_feature_id_seq', 1, false);


--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.clone_type_clone_type_id_seq', 1, false);


--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.genbank_submission_genbank_submission_id_seq', 1, false);


--
-- Name: gss_gss_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.gss_gss_id_seq', 1, false);


--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq', 1, false);


--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.library_annotation_db_library_annotation_db_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.library_library_id_seq', 1, false);


--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.library_shortname_abbreviatio_library_shortname_abbreviatio_seq', 1, false);


--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.qc_report_qc_report_id_seq', 1, false);


--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.query_source_type_query_source_type_id_seq', 1, false);


--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.read_class_read_class_id_seq', 1, false);


--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genomic.sequencing_primer_sequencing_primer_id_seq', 1, false);


--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.experiment_experiment_id_seq', 1, false);


--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.experiment_image_experiment_image_id_seq', 1, false);


--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.experiment_tag_experiment_tag_id_seq', 1, false);


--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.is_organism_is_organism_id_seq', 1, false);


--
-- Name: probe_probe_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.probe_probe_id_seq', 1, false);


--
-- Name: tag_tag_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('insitu.tag_tag_id_seq', 1, false);


--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.attribution_attribution_id_seq', 1, false);


--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.attribution_to_attribution_to_id_seq', 1, false);


--
-- Name: comments_comment_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.comments_comment_id_seq', 1, false);


--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_dbipath_dbipath_id_seq', 1, false);


--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_dbiref_dbiref_id_seq', 1, false);


--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_dbversion_dbversion_id_seq', 126, true);


--
-- Name: md_files_file_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_files_file_id_seq', 39, true);


--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_groupmembers_groupmember_id_seq', 1, false);


--
-- Name: md_groups_group_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_groups_group_id_seq', 1, false);


--
-- Name: md_image_cvterm_md_image_cvterm_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_image_cvterm_md_image_cvterm_id_seq', 1, false);


--
-- Name: md_image_image_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_image_image_id_seq', 2425, true);


--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_image_organism_md_image_organism_id_seq', 1, false);


--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_metadata_metadata_id_seq', 173, true);


--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_tag_image_tag_image_id_seq', 1, false);


--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.md_tag_tag_id_seq', 1, false);


--
-- Name: roles_role_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('metadata.roles_role_id_seq', 1, false);


--
-- Name: data_points_dp_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.data_points_dp_id_seq', 1, false);


--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.genotypes_gen_id_seq', 1, false);


--
-- Name: images_image_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.images_image_id_seq', 1, false);


--
-- Name: locations_loc_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.locations_loc_id_seq', 1, false);


--
-- Name: organs_organ_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.organs_organ_id_seq', 1, false);


--
-- Name: plants_plant_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.plants_plant_id_seq', 1, false);


--
-- Name: populations_pop_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.populations_pop_id_seq', 1, false);


--
-- Name: properties_prop_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.properties_prop_id_seq', 1, false);


--
-- Name: samples_sample_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.samples_sample_id_seq', 1, false);


--
-- Name: sources_source_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('pheno_population.sources_source_id_seq', 1, false);


--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.allele_alias_allele_alias_id_seq', 1, false);


--
-- Name: allele_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.allele_allele_id_seq', 1, false);


--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.allele_dbxref_allele_dbxref_id_seq', 1, false);


--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.allele_history_allele_history_id_seq', 1, false);


--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.cross_type_cross_type_id_seq', 1, false);


--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.dbxref_type_dbxref_type_id_seq', 1, false);


--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.genotype_experiment_genotype_experiment_id_seq', 1, false);


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.genotype_genotype_id_seq', 1, false);


--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.genotype_region_genotype_region_id_seq', 1, false);


--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.germplasm_germplasm_id_seq', 1, false);


--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_alias_individual_alias_id_seq', 1, false);


--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_allele_individual_allele_id_seq', 1, false);


--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq', 1, false);


--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq', 1, false);


--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_dbxref_individual_dbxref_id_seq', 1, false);


--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_history_individual_history_id_seq', 1, false);


--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_image_individual_image_id_seq', 1, false);


--
-- Name: individual_individual_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_individual_id_seq', 1, false);


--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.individual_locus_individual_locus_id_seq', 1, false);


--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.is_public_is_public_id_seq', 1, false);


--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus2locus_locus2locus_id_seq', 1, false);


--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_alias_locus_alias_id_seq', 1, false);


--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq', 1, false);


--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq', 1, false);


--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_dbxref_locus_dbxref_id_seq', 1, false);


--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_history_locus_history_id_seq', 1, false);


--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_image_locus_image_id_seq', 1, false);


--
-- Name: locus_locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_locus_id_seq', 1, false);


--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_marker_locus_marker_id_seq', 1, false);


--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_owner_locus_owner_id_seq', 1, false);


--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_registry_locus_registry_id_seq', 1, false);


--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locus_unigene_locus_unigene_id_seq', 1, false);


--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locusgroup_locusgroup_id_seq', 1, false);


--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.locusgroup_member_locusgroup_member_id_seq', 1, false);


--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq', 8, true);


--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.phenotype_user_trait_phenotype_user_trait_id_seq', 1, false);


--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.polymorphic_fragment_polymorphic_fragment_id_seq', 1, false);


--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.population_dbxref_population_dbxref_id_seq', 1, false);


--
-- Name: population_population_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.population_population_id_seq', 1, false);


--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.pub_curator_pub_curator_id_seq', 1, false);


--
-- Name: registry_registry_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.registry_registry_id_seq', 1, false);


--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.stock_allele_stock_allele_id_seq', 1, false);


--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.stock_image_stock_image_id_seq', 2425, true);


--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.stock_owner_stock_owner_id_seq', 164997, true);


--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.tomato_il_bin_il_bin_id_seq', 1, false);


--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.tomato_term2term_tomato_term2term_id_seq', 1, false);


--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.tomato_term_tomato_term_id_seq', 1, false);


--
-- Name: unit_unit_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.unit_unit_id_seq', 1, false);


--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.user_trait_unit_user_trait_unit_id_seq', 1, false);


--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.user_trait_user_trait_id_seq', 1, false);


--
-- Name: variant_variant_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenome.variant_variant_id_seq', 1, false);


--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.ba_plausibility_bap_id_seq', 1, false);


--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.bac_associations_bac_assoc_id_seq', 1, false);


--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.bac_consensus_sequences_consensus_seq_id_seq', 1, false);


--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.bac_contigs_bac_contig_id_seq', 1, false);


--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.bac_end_sequences_end_seq_id_seq', 1, false);


--
-- Name: bacs_bac_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.bacs_bac_id_seq', 1, false);


--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.computational_associations_computational_assoc_id_seq', 1, false);


--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.contig_sizes_contig_size_id_seq', 1, false);


--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.deprecated_probes_dp_id_seq', 1, false);


--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.fpc_data_fpc_datum_id_seq', 1, false);


--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.fpc_version_fpc_version_seq', 1, false);


--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.manual_associations_manual_assoc_id_seq', 1, false);


--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.oa_plausibility_oap_id_seq', 1, false);


--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.overgo_associations_overgo_assoc_id_seq', 1, false);


--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.overgo_plates_plate_id_seq', 1, false);


--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.overgo_results_result_id_seq', 1, false);


--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.overgo_version_overgo_version_seq', 1, false);


--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.probe_markers_overgo_probe_id_seq', 1, false);


--
-- Name: species_species_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.species_species_id_seq', 1, false);


--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.tentative_association_conflict_groups_tacg_id_seq', 1, false);


--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.tentative_overgo_associations_tentative_assoc_id_seq', 1, false);


--
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('physical.users_user_id_seq', 1, false);


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.analysis_analysis_id_seq', 1, false);


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.analysisfeature_analysisfeature_id_seq', 1, false);


--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.analysisprop_analysisprop_id_seq', 1, false);


--
-- Name: ara_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ara_users_id_seq', 1, false);


--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blastwatch_queries_blastwatch_queries_id_seq', 1, false);


--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blastwatch_results_blastwatch_results_id_seq', 1, false);


--
-- Name: bug_bug_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.bug_bug_id_seq', 1, false);


--
-- Name: contact_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.contact_contact_id_seq', 1, false);


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.contact_relationship_contact_relationship_id_seq', 1, false);


--
-- Name: cv_cv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cv_cv_id_seq', 61, true);


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvprop_cvprop_id_seq', 1, false);


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvterm_cvterm_id_seq', 76707, true);


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvterm_dbxref_cvterm_dbxref_id_seq', 122916, true);


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvterm_relationship_cvterm_relationship_id_seq', 110200, true);


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvtermpath_cvtermpath_id_seq', 1792175, true);


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvtermprop_cvtermprop_id_seq', 8078, true);


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cvtermsynonym_cvtermsynonym_id_seq', 144729, true);


--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cxgn_bac_pipeline_genbank_log_id_seq', 1, false);


--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cxgn_bac_pipeline_loading_log_id_seq', 1, false);


--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cxgn_bac_pipeline_processing_log_id_seq', 1, false);


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cxgn_indexedlog_test_feel_free_to_delete_me_id_seq', 1, false);


--
-- Name: db_db_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.db_db_id_seq', 277, true);


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.dbxref_dbxref_id_seq', 211531, true);


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.dbxrefprop_dbxrefprop_id_seq', 1, false);


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.environment_cvterm_environment_cvterm_id_seq', 1, false);


--
-- Name: environment_environment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.environment_environment_id_seq', 1, false);


--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.enzyme_restriction_sites_enzyme_restriction_sites_id_seq', 1, false);


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq', 1, false);


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_cvterm_feature_cvterm_id_seq', 1, false);


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_cvterm_pub_feature_cvterm_pub_id_seq', 1, false);


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_cvtermprop_feature_cvtermprop_id_seq', 1, false);


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_dbxref_feature_dbxref_id_seq', 1, false);


--
-- Name: feature_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_feature_id_seq', 1, false);


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_genotype_feature_genotype_id_seq', 1, false);


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_pub_feature_pub_id_seq', 1, false);


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_relationship_feature_relationship_id_seq', 1, false);


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_relationship_pub_feature_relationship_pub_id_seq', 1, false);


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_relationshipprop_feature_relationshipprop_id_seq', 1, false);


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq', 1, false);


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_synonym_feature_synonym_id_seq', 1, false);


--
-- Name: feature_uniquename_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feature_uniquename_seq', 1, false);


--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.featureloc_featureloc_id_seq', 1, false);


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.featureloc_pub_featureloc_pub_id_seq', 1, false);


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.featureprop_featureprop_id_seq', 1, false);


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.featureprop_pub_featureprop_pub_id_seq', 1, false);


--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq', 1, false);


--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq', 1, false);


--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_band_fpc_band_id_seq', 1, false);


--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_build_fpc_build_id_seq', 1, false);


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq', 1, false);


--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_contig_clone_fpc_contig_clone_id_seq', 1, false);


--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_contig_fpc_contig_id_seq', 1, false);


--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_fingerprint_fpc_fingerprint_id_seq', 1, false);


--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.fpc_series_fpc_series_id_seq', 1, false);


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.genotype_genotype_id_seq', 528, true);


--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.genotypeprop_genotypeprop_id_seq', 1621, true);


--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.glossary_glossary_id_seq', 1, false);


--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.itag_loading_log_id_seq', 1, false);


--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.materialized_view_materialized_view_id_seq', 1, false);


--
-- Name: matviews_mv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.matviews_mv_id_seq', 94, true);


--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_contact_nd_experiment_contact_id_seq', 1, false);


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_genotype_nd_experiment_genotype_id_seq', 528, true);


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_nd_experiment_id_seq', 76694, true);


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq', 1490090, true);


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_project_nd_experiment_project_id_seq', 76690, true);


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_protocol_nd_experiment_protocol_id_seq', 1, false);


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_pub_nd_experiment_pub_id_seq', 1, false);


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_stock_nd_experiment_stock_id_seq', 110555, true);


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq', 1, false);


--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_experimentprop_nd_experimentprop_id_seq', 8, true);


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_geolocation_nd_geolocation_id_seq', 21, true);


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_geolocationprop_nd_geolocationprop_id_seq', 1, false);


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_protocol_nd_protocol_id_seq', 1, false);


--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_protocol_reagent_nd_protocol_reagent_id_seq', 1, false);


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_protocolprop_nd_protocolprop_id_seq', 1, false);


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_reagent_nd_reagent_id_seq', 1, false);


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_reagent_relationship_nd_reagent_relationship_id_seq', 1, false);


--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.nd_reagentprop_nd_reagentprop_id_seq', 1, false);


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organism_dbxref_organism_dbxref_id_seq', 109390, true);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organism_organism_id_seq', 109396, true);


--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organism_relationship_organism_relationship_id_seq', 1, false);


--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organismpath_organismpath_id_seq', 1, false);


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organismprop_organismprop_id_seq', 59397, true);


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phendesc_phendesc_id_seq', 1, false);


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq', 1, false);


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenotype_comparison_phenotype_comparison_id_seq', 1, false);


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenotype_cvterm_phenotype_cvterm_id_seq', 1, false);


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenotype_phenotype_id_seq', 743145, true);


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenotypeprop_phenotypeprop_id_seq', 1, false);


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phenstatement_phenstatement_id_seq', 1, false);


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonode_dbxref_phylonode_dbxref_id_seq', 1, false);


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonode_organism_phylonode_organism_id_seq', 109390, true);


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonode_phylonode_id_seq', 1, false);


--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonode_pub_phylonode_pub_id_seq', 1, false);


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonode_relationship_phylonode_relationship_id_seq', 1, false);


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylonodeprop_phylonodeprop_id_seq', 1, false);


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylotree_phylotree_id_seq', 1, true);


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.phylotree_pub_phylotree_pub_id_seq', 1, false);


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_contact_project_contact_id_seq', 1, false);


--
-- Name: project_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_project_id_seq', 324, true);


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_pub_project_pub_id_seq', 1, false);


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_relationship_project_relationship_id_seq', 190, true);


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.projectprop_projectprop_id_seq', 455, true);


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pub_dbxref_pub_dbxref_id_seq', 1, false);


--
-- Name: pub_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pub_pub_id_seq', 1, false);


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pub_relationship_pub_relationship_id_seq', 1, false);


--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pubabstract_pubabstract_id_seq', 1, false);


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pubauthor_pubauthor_id_seq', 1, false);


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pubprop_pubprop_id_seq', 1, false);


--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.resource_file_resource_file_id_seq', 1, false);


--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.signalp_signalp_id_seq', 1, false);


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_cvterm_stock_cvterm_id_seq', 1, false);


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_cvtermprop_stock_cvtermprop_id_seq', 1, false);


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_dbxref_stock_dbxref_id_seq', 3120, true);


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_dbxrefprop_stock_dbxrefprop_id_seq', 1, false);


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_genotype_stock_genotype_id_seq', 1, false);


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_pub_stock_pub_id_seq', 1, false);


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq', 1, false);


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_relationship_pub_stock_relationship_pub_id_seq', 1, false);


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_relationship_stock_relationship_id_seq', 89495, true);


--
-- Name: stock_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stock_stock_id_seq', 84654, true);


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stockcollection_stock_stockcollection_stock_id_seq', 1, false);


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stockcollection_stockcollection_id_seq', 1, false);


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stockcollectionprop_stockcollectionprop_id_seq', 1, false);


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stockprop_pub_stockprop_pub_id_seq', 1, false);


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stockprop_stockprop_id_seq', 236454, true);


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.synonym_synonym_id_seq', 1, false);


--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tableinfo_tableinfo_id_seq', 1, false);


--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tmp_cds_handler_cds_row_id_seq', 1, false);


--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tmp_cds_handler_relationship_rel_row_id_seq', 1, false);


--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.unigene_dbxref_unigene_dbxref_id_seq', 1, false);


--
-- Name: accession_accession_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.accession_accession_id_seq', 1, false);


--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.accession_names_accession_name_id_seq', 1, false);


--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.annotation_target_type_annotation_target_type_id_seq', 1, false);


--
-- Name: authors_author_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.authors_author_id_seq', 1, false);


--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_annotations_blast_annotation_id_seq', 1, false);


--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_db_blast_db_group_blast_db_blast_db_group_id_seq', 4, true);


--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_db_blast_db_id_seq', 4, true);


--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_db_group_blast_db_group_id_seq', 1, true);


--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_db_organism_blast_db_organism_id_seq', 1, false);


--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_defline_defline_id_seq', 1, false);


--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_hits_blast_hit_id_seq', 1, false);


--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.blast_targets_blast_target_id_seq', 1, false);


--
-- Name: cds_cds_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.cds_cds_id_seq', 1, false);


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.chadoprop_chadoprop_id_seq', 1, false);


--
-- Name: clone_clone_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.clone_clone_id_seq', 1, false);


--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.cloning_vector_cloning_vector_id_seq', 1, false);


--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.common_name_common_name_id_seq', 1, true);


--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.common_nameprop_common_nameprop_id_seq', 1, false);


--
-- Name: composed_trait_ids; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.composed_trait_ids', 1, true);


--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.cos_markers_cos_marker_id_seq', 1, false);


--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.cosii_ortholog_cosii_unigene_id_seq', 1, false);


--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_linkage_groups_lg_id_seq', 1, false);


--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_map_cross_map_cross_id_seq', 1, false);


--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_mapdata_loc_id_seq', 1, false);


--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_maps_map_id_seq', 1, false);


--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_marker_confidences_confidence_id_seq', 1, false);


--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_marker_locations_marker_location_id_seq', 1, false);


--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_marker_types_marker_type_id_seq', 1, false);


--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.deprecated_markers_marker_id_seq', 1, false);


--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.derived_from_source_derived_from_source_id_seq', 1, false);


--
-- Name: domain_domain_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.domain_domain_id_seq', 1, false);


--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.domain_match_domain_match_id_seq', 1, false);


--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.enzyme_restriction_sites_enzyme_restriction_sites_id_seq', 1, false);


--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.enzymes_enzyme_id_seq', 1, false);


--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.est_dbxref_est_dbxref_id_seq', 1, false);


--
-- Name: est_est_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.est_est_id_seq', 1, false);


--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.ests_mapped_by_clone_embc_id_seq', 1, false);


--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.experiment_type_experiment_type_id_seq', 1, true);


--
-- Name: facility_facility_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.facility_facility_id_seq', 1, false);


--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.family_build_family_build_id_seq', 1, false);


--
-- Name: family_family_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.family_family_id_seq', 1, false);


--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.family_member_family_member_id_seq', 1, false);


--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.family_tree_family_tree_id_seq', 1, false);


--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.fish_experimenter_fish_experimenter_id_seq', 1, false);


--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.fish_file_fish_file_id_seq', 1, false);


--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.fish_result_fish_result_id_seq', 1, false);


--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.fish_result_image_fish_result_image_id_seq', 1, false);


--
-- Name: go_go_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.go_go_id_seq', 1, false);


--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.group_linkage_group_linkage_id_seq', 1, false);


--
-- Name: groups_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.groups_group_id_seq', 1, false);


--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.id_linkage_id_linkage_id_seq', 1, false);


--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.interpro_go_interpro_go_id_seq', 1, false);


--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.interpro_interpro_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.library_library_id_seq', 1, false);


--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.linkage_group_lg_id_seq', 23, true);


--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.loc_types_loc_type_id_seq', 1, false);


--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.manual_annotations_manual_annotations_id_seq', 1, false);


--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.manual_censor_reasons_censor_id_seq', 1, false);


--
-- Name: map_map_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.map_map_id_seq', 1, true);


--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.map_version_map_version_id_seq', 2, true);


--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_alias_alias_id_seq', 567, true);


--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_collectible_marker_collectible_dummy_id_seq', 1, false);


--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_collection_mc_id_seq', 1, false);


--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_confidence_confidence_id_seq', 1, true);


--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_derived_from_marker_derived_dummy_id_seq', 1, false);


--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_experiment_marker_experiment_id_seq', 567, true);


--
-- Name: marker_location_location_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_location_location_id_seq', 567, true);


--
-- Name: marker_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.marker_marker_id_seq', 567, true);


--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.metadata_metadata_id_seq', 1, false);


--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.microarray_microarray_id_seq', 1, false);


--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.misc_misc_unique_id_seq', 1, false);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.organism_organism_id_seq', 1, false);


--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.organismgroup_member_organismgroup_member_id_seq', 1, false);


--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.organismgroup_organismgroup_id_seq', 1, false);


--
-- Name: p_markers_pid_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.p_markers_pid_seq', 1, false);


--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.pcr_exp_accession_pcr_exp_accession_id_seq', 1, false);


--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.pcr_experiment_pcr_experiment_id_seq', 1, false);


--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq', 1, false);


--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.pcr_product_pcr_product_id_seq', 1, false);


--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.primer_unigene_match_primer_unigene_match_id_seq', 1, false);


--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.qc_report_qc_id_seq', 1, false);


--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.rflp_markers_rflp_id_seq', 1, false);


--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.rflp_sequences_seq_id_seq', 1, false);


--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq', 1, false);


--
-- Name: seqread_read_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.seqread_read_id_seq', 1, false);


--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.sequence_sequence_id_seq', 1, false);


--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.snp_file_snp_file_id_seq', 1, false);


--
-- Name: snp_snp_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.snp_snp_id_seq', 1, false);


--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.snpprop_snpprop_id_seq', 1, false);


--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq', 1, false);


--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.ssr_repeats_repeat_id_seq', 1, false);


--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.ssr_ssr_id_seq', 1, false);


--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.submit_user_submit_user_id_seq', 1, false);


--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.taxonomy_tax_id_seq', 1, false);


--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.temp_caps_correspondence_tcc_id_seq', 1, false);


--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.temp_map_correspondence_tmc_id_seq', 1, false);


--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.temp_marker_correspondence_tmc_id_seq', 1, false);


--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.tigrtc_index_tcindex_id_seq', 1, false);


--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.tigrtc_membership_tigrtc_membership_id_seq', 1, false);


--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.tigrtc_tracking_tigrtc_tracking_id_seq', 1, false);


--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.tm_markers_tm_id_seq', 1, false);


--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.trim_feature_feature_id_seq', 1, false);


--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.trim_feature_types_trim_type_id_seq', 1, false);


--
-- Name: types_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.types_type_id_seq', 1, false);


--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.unigene_build_unigene_build_id_seq', 1, false);


--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.unigene_consensi_consensi_id_seq', 1, false);


--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.unigene_member_unigene_member_id_seq', 1, false);


--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sgn.unigene_unigene_id_seq', 1, false);


--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.bac_status_bac_status_id_seq', 1, false);


--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.bac_status_log_bac_status_log_id_seq', 1, false);


--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq', 1, false);


--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.clone_validation_log_clone_validation_log_id_seq', 1, false);


--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.clone_verification_log_clone_verification_log_id_seq', 1, false);


--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.forum_post_forum_post_id_seq', 6, true);


--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.forum_topic_forum_topic_id_seq', 6, true);


--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.list_item_list_item_id_seq', 519, true);


--
-- Name: list_list_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.list_list_id_seq', 124, true);


--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq', 1, false);


--
-- Name: sp_dataset_sp_dataset_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_dataset_sp_dataset_id_seq', 1, false);


--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_group_sp_group_id_seq', 1, false);


--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_login_old_sp_login_id_seq', 1, false);


--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_organisms_organism_id_seq', 1, false);


--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_organization_person_sp_organization_person_id_seq', 1, false);


--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_organization_sp_organization_id_seq', 1, false);


--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_papers_sp_paper_id_seq', 1, false);


--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_person_organisms_sp_person_organisms_id_seq', 1, false);


--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_person_roles_sp_person_role_id_seq', 692, true);


--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_person_sp_person_id_seq', 602, true);


--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq', 1, false);


--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_project_organization_sp_project_organization_id_seq', 1, false);


--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_project_person_sp_project_person_id_seq', 1, false);


--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_project_sp_project_id_seq', 1, false);


--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.sp_roles_sp_role_id_seq', 6, true);


--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.user_map_data_user_map_data_id_seq', 1, false);


--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sgn_people.user_map_user_map_id_seq', 1, false);


--
-- Name: facility_facility_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('sgn_submit.facility_facility_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('sgn_submit.library_library_id_seq', 1, false);


--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('sgn_submit.seqread_submit_read_id_seq', 1, false);


--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('sgn_submit.submit_user_submit_user_id_seq', 1, false);


--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('tomato_gff.fattribute_fattribute_id_seq', 1, false);


--
-- Name: fdata_fid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('tomato_gff.fdata_fid_seq', 1, false);


--
-- Name: fgroup_gid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('tomato_gff.fgroup_gid_seq', 1, false);


--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('tomato_gff.ftype_ftypeid_seq', 1, false);


--
-- Name: cvterm cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_pkey PRIMARY KEY (cvterm_id);


--
-- Name: trial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.trial_types AS
 SELECT cvterm.cvterm_id AS trial_type_id,
    cvterm.name AS trial_type_name
   FROM (public.cvterm
     JOIN public.cv USING (cv_id))
  WHERE ((cv.name)::text = 'project_type'::text)
  GROUP BY cvterm.cvterm_id
  WITH NO DATA;


ALTER TABLE public.trial_types OWNER TO postgres;

--
-- Name: annotation annotation_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.annotation
    ADD CONSTRAINT annotation_pkey PRIMARY KEY (annot_id);


--
-- Name: comment comment_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comment
    ADD CONSTRAINT comment_pkey PRIMARY KEY (comment_id);


--
-- Name: comp_analysis comp_analysis_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comp_analysis
    ADD CONSTRAINT comp_analysis_pkey PRIMARY KEY (ca_id);


--
-- Name: dblist dblist_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.dblist
    ADD CONSTRAINT dblist_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref dbxref_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: feature_set feature_set_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.feature_set
    ADD CONSTRAINT feature_set_pkey PRIMARY KEY (f_set_id);


--
-- Name: feature_span feature_span_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.feature_span
    ADD CONSTRAINT feature_span_pkey PRIMARY KEY (f_span_id);


--
-- Name: organism organism_name_key; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.organism
    ADD CONSTRAINT organism_name_key UNIQUE (name);


--
-- Name: organism organism_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: output output_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.output
    ADD CONSTRAINT output_pkey PRIMARY KEY (output_id);


--
-- Name: person person_name_key; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.person
    ADD CONSTRAINT person_name_key UNIQUE (name);


--
-- Name: person person_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.person
    ADD CONSTRAINT person_pkey PRIMARY KEY (person_id);


--
-- Name: program program_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.program
    ADD CONSTRAINT program_pkey PRIMARY KEY (program_id);


--
-- Name: property property_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.property
    ADD CONSTRAINT property_pkey PRIMARY KEY (property_id);


--
-- Name: result_set result_set_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.result_set
    ADD CONSTRAINT result_set_pkey PRIMARY KEY (r_set_id);


--
-- Name: result_span result_span_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.result_span
    ADD CONSTRAINT result_span_pkey PRIMARY KEY (r_span_id);


--
-- Name: seq_error seq_error_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq_error
    ADD CONSTRAINT seq_error_pkey PRIMARY KEY (seq_err_id);


--
-- Name: seq seq_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq
    ADD CONSTRAINT seq_pkey PRIMARY KEY (seq_id);


--
-- Name: seq_relationship seq_relationship_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq_relationship
    ADD CONSTRAINT seq_relationship_pkey PRIMARY KEY (seq_rel_id);


--
-- Name: synonym synonym_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: bs_protocol bs_protocol_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol
    ADD CONSTRAINT bs_protocol_pkey PRIMARY KEY (protocol_id);


--
-- Name: bs_protocol_pub bs_protocol_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_pkey PRIMARY KEY (protocol_pub_id);


--
-- Name: bs_protocol_step_dbxref bs_protocol_step_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_pkey PRIMARY KEY (protocol_step_dbxref_id);


--
-- Name: bs_protocol_step bs_protocol_step_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_pkey PRIMARY KEY (protocol_step_id);


--
-- Name: bs_sample_cvterm bs_sample_cvterm_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_pkey PRIMARY KEY (sample_cvterm_id);


--
-- Name: bs_sample_dbxref bs_sample_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_pkey PRIMARY KEY (sample_dbxref_id);


--
-- Name: bs_sample_element_cvterm bs_sample_element_cvterm_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_pkey PRIMARY KEY (sample_element_cvterm_id);


--
-- Name: bs_sample_element_dbxref bs_sample_element_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_pkey PRIMARY KEY (sample_element_dbxref_id);


--
-- Name: bs_sample_element_file bs_sample_element_file_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_pkey PRIMARY KEY (sample_element_file_id);


--
-- Name: bs_sample_element bs_sample_element_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element
    ADD CONSTRAINT bs_sample_element_pkey PRIMARY KEY (sample_element_id);


--
-- Name: bs_sample_element_relation bs_sample_element_relation_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_pkey PRIMARY KEY (sample_element_relation_id);


--
-- Name: bs_sample_file bs_sample_file_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_file
    ADD CONSTRAINT bs_sample_file_pkey PRIMARY KEY (sample_file_id);


--
-- Name: bs_sample bs_sample_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_pkey PRIMARY KEY (sample_id);


--
-- Name: bs_sample_pub bs_sample_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_pkey PRIMARY KEY (sample_pub_id);


--
-- Name: bs_sample_relationship bs_sample_relationship_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_pkey PRIMARY KEY (sample_relationship_id);


--
-- Name: bs_tool bs_tool_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool
    ADD CONSTRAINT bs_tool_pkey PRIMARY KEY (tool_id);


--
-- Name: bs_tool_pub bs_tool_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_pkey PRIMARY KEY (tool_pub_id);


--
-- Name: ge_cluster_analysis ge_cluster_analysis_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_pkey PRIMARY KEY (cluster_analysis_id);


--
-- Name: ge_cluster_member ge_cluster_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_pkey PRIMARY KEY (cluster_member_id);


--
-- Name: ge_cluster_profile ge_cluster_profile_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_pkey PRIMARY KEY (cluster_profile_id);


--
-- Name: ge_correlation_analysis ge_correlation_analysis_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_pkey PRIMARY KEY (correlation_analysis_id);


--
-- Name: ge_correlation_member ge_correlation_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_pkey PRIMARY KEY (correlation_member_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_pkey PRIMARY KEY (data_analysis_process_id);


--
-- Name: ge_diff_expression ge_diff_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_pkey PRIMARY KEY (diff_expression_id);


--
-- Name: ge_experiment_analysis_group ge_experiment_analysis_group_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_group
    ADD CONSTRAINT ge_experiment_analysis_group_pkey PRIMARY KEY (experiment_analysis_group_id);


--
-- Name: ge_experiment_analysis_member ge_experiment_analysis_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_pkey PRIMARY KEY (experiment_analysis_member_id);


--
-- Name: ge_experiment_dbxref ge_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_pkey PRIMARY KEY (experiment_dbxref_id);


--
-- Name: ge_experiment ge_experiment_experiment_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment
    ADD CONSTRAINT ge_experiment_experiment_name_key UNIQUE (experiment_name, experimental_design_id);


--
-- Name: ge_experiment ge_experiment_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment
    ADD CONSTRAINT ge_experiment_pkey PRIMARY KEY (experiment_id);


--
-- Name: ge_experimental_design_dbxref ge_experimental_design_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_pkey PRIMARY KEY (experimental_design_dbxref_id);


--
-- Name: ge_experimental_design ge_experimental_design_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design
    ADD CONSTRAINT ge_experimental_design_pkey PRIMARY KEY (experimental_design_id);


--
-- Name: ge_experimental_design_pub ge_experimental_design_pub_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_pkey PRIMARY KEY (experimental_design_pub_id);


--
-- Name: ge_expression_by_experiment ge_expression_by_experiment_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_pkey PRIMARY KEY (expression_by_experiment_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_pkey PRIMARY KEY (fluorescanning_id);


--
-- Name: ge_hybridization ge_hybridization_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization
    ADD CONSTRAINT ge_hybridization_pkey PRIMARY KEY (hybridization_id);


--
-- Name: ge_platform_dbxref ge_platform_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_pkey PRIMARY KEY (platform_dbxref_id);


--
-- Name: ge_platform_design ge_platform_design_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_design
    ADD CONSTRAINT ge_platform_design_pkey PRIMARY KEY (platform_design_id);


--
-- Name: ge_platform ge_platform_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform
    ADD CONSTRAINT ge_platform_pkey PRIMARY KEY (platform_id);


--
-- Name: ge_platform_pub ge_platform_pub_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_pkey PRIMARY KEY (platform_pub_id);


--
-- Name: ge_probe_expression ge_probe_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_pkey PRIMARY KEY (probe_expression_id);


--
-- Name: ge_probe ge_probe_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_pkey PRIMARY KEY (probe_id);


--
-- Name: ge_probe ge_probe_probe_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_probe_name_key UNIQUE (probe_name, platform_id);


--
-- Name: ge_probe_spot_coordinate ge_probe_spot_coordinate_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_pkey PRIMARY KEY (probe_spot_coordinate_id);


--
-- Name: ge_probe_spot ge_probe_spot_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_pkey PRIMARY KEY (probe_spot_id);


--
-- Name: ge_profile_element ge_profile_element_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_profile_element
    ADD CONSTRAINT ge_profile_element_pkey PRIMARY KEY (profile_element_id);


--
-- Name: ge_target_dbxref ge_target_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_pkey PRIMARY KEY (target_dbxref_id);


--
-- Name: ge_target_element ge_target_element_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_pkey PRIMARY KEY (target_element_id);


--
-- Name: ge_target_element ge_target_element_target_id_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_target_id_key UNIQUE (target_id, dye);


--
-- Name: ge_target ge_target_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target
    ADD CONSTRAINT ge_target_pkey PRIMARY KEY (target_id);


--
-- Name: ge_target ge_target_target_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target
    ADD CONSTRAINT ge_target_target_name_key UNIQUE (target_name, experiment_id);


--
-- Name: ge_technology_type ge_technology_type_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_technology_type
    ADD CONSTRAINT ge_technology_type_pkey PRIMARY KEY (technology_type_id);


--
-- Name: ge_template_dbiref ge_template_dbiref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_pkey PRIMARY KEY (template_dbiref_id);


--
-- Name: ge_template_dbxref ge_template_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_pkey PRIMARY KEY (template_dbxref_id);


--
-- Name: ge_template_diff_expression ge_template_diff_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_pkey PRIMARY KEY (template_diff_expression_id);


--
-- Name: ge_template_expression ge_template_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression
    ADD CONSTRAINT ge_template_expression_pkey PRIMARY KEY (template_expression_id);


--
-- Name: ge_template ge_template_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template
    ADD CONSTRAINT ge_template_pkey PRIMARY KEY (template_id);


--
-- Name: blast_defline blast_defline_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_defline
    ADD CONSTRAINT blast_defline_pkey PRIMARY KEY (blast_defline_id);


--
-- Name: blast_hit blast_hit_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_hit
    ADD CONSTRAINT blast_hit_pkey PRIMARY KEY (blast_hit_id);


--
-- Name: blast_query blast_query_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_query
    ADD CONSTRAINT blast_query_pkey PRIMARY KEY (blast_query_id);


--
-- Name: chromat chromat_clone_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.chromat
    ADD CONSTRAINT chromat_clone_id_key UNIQUE (clone_id, primer, subpath, filename);


--
-- Name: chromat chromat_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.chromat
    ADD CONSTRAINT chromat_pkey PRIMARY KEY (chromat_id);


--
-- Name: clone_feature clone_feature_clone_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_feature
    ADD CONSTRAINT clone_feature_clone_id_key UNIQUE (clone_id, feature_id);


--
-- Name: clone_feature clone_feature_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_feature
    ADD CONSTRAINT clone_feature_pkey PRIMARY KEY (clone_feature_id);


--
-- Name: clone clone_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone
    ADD CONSTRAINT clone_pkey PRIMARY KEY (clone_id);


--
-- Name: clone_type clone_type_name_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_type
    ADD CONSTRAINT clone_type_name_key UNIQUE (name);


--
-- Name: clone_type clone_type_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_type
    ADD CONSTRAINT clone_type_pkey PRIMARY KEY (clone_type_id);


--
-- Name: clone_type clone_type_shortname_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_type
    ADD CONSTRAINT clone_type_shortname_key UNIQUE (shortname);


--
-- Name: genbank_submission genbank_submission_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.genbank_submission
    ADD CONSTRAINT genbank_submission_pkey PRIMARY KEY (genbank_submission_id);


--
-- Name: gss gss_chromat_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss
    ADD CONSTRAINT gss_chromat_id_key UNIQUE (chromat_id, version);


--
-- Name: gss gss_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss
    ADD CONSTRAINT gss_pkey PRIMARY KEY (gss_id);


--
-- Name: gss_submitted_to_genbank gss_submitted_to_genbank_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_pkey PRIMARY KEY (gss_submitted_to_genbank_id);


--
-- Name: library_annotation_db library_annotation_db_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_annotation_db
    ADD CONSTRAINT library_annotation_db_pkey PRIMARY KEY (library_annotation_db_id);


--
-- Name: library library_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_shortname_abbreviation library_shortname_abbreviation_abbreviation_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_abbreviation_key UNIQUE (abbreviation);


--
-- Name: library_shortname_abbreviation library_shortname_abbreviation_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_pkey PRIMARY KEY (library_shortname_abbreviation_id);


--
-- Name: qc_report qc_report_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.qc_report
    ADD CONSTRAINT qc_report_pkey PRIMARY KEY (qc_report_id);


--
-- Name: query_source_type query_source_type_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.query_source_type
    ADD CONSTRAINT query_source_type_pkey PRIMARY KEY (query_source_type_id);


--
-- Name: read_class read_class_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.read_class
    ADD CONSTRAINT read_class_pkey PRIMARY KEY (read_class_id);


--
-- Name: sequencing_primer sequencing_primer_name_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.sequencing_primer
    ADD CONSTRAINT sequencing_primer_name_key UNIQUE (name);


--
-- Name: sequencing_primer sequencing_primer_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.sequencing_primer
    ADD CONSTRAINT sequencing_primer_pkey PRIMARY KEY (sequencing_primer_id);


--
-- Name: experiment_image experiment_image_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_image
    ADD CONSTRAINT experiment_image_pkey PRIMARY KEY (experiment_image_id);


--
-- Name: experiment experiment_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment
    ADD CONSTRAINT experiment_pkey PRIMARY KEY (experiment_id);


--
-- Name: experiment_tag experiment_tag_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_tag
    ADD CONSTRAINT experiment_tag_pkey PRIMARY KEY (experiment_tag_id);


--
-- Name: is_organism organism_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.is_organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (is_organism_id);


--
-- Name: probe primer_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.probe
    ADD CONSTRAINT primer_pkey PRIMARY KEY (probe_id);


--
-- Name: tag tag_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.tag
    ADD CONSTRAINT tag_pkey PRIMARY KEY (tag_id);


--
-- Name: attribution attribution_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution
    ADD CONSTRAINT attribution_pkey PRIMARY KEY (attribution_id);


--
-- Name: attribution_to attribution_to_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT attribution_to_pkey PRIMARY KEY (attribution_to_id);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (comment_id);


--
-- Name: md_dbipath md_dbipath_column_name_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbipath
    ADD CONSTRAINT md_dbipath_column_name_key UNIQUE (column_name, table_name, schema_name);


--
-- Name: md_dbipath md_dbipath_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbipath
    ADD CONSTRAINT md_dbipath_pkey PRIMARY KEY (dbipath_id);


--
-- Name: md_dbiref md_dbiref_iref_accession_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbiref
    ADD CONSTRAINT md_dbiref_iref_accession_key UNIQUE (iref_accession, dbiref_id);


--
-- Name: md_dbiref md_dbiref_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbiref
    ADD CONSTRAINT md_dbiref_pkey PRIMARY KEY (dbiref_id);


--
-- Name: md_dbversion md_dbversion_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbversion
    ADD CONSTRAINT md_dbversion_pkey PRIMARY KEY (dbversion_id);


--
-- Name: md_files md_files_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_files
    ADD CONSTRAINT md_files_pkey PRIMARY KEY (file_id);


--
-- Name: md_groupmembers md_groupmembers_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groupmembers
    ADD CONSTRAINT md_groupmembers_pkey PRIMARY KEY (groupmember_id);


--
-- Name: md_groups md_groups_group_name_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groups
    ADD CONSTRAINT md_groups_group_name_key UNIQUE (group_name);


--
-- Name: md_groups md_groups_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groups
    ADD CONSTRAINT md_groups_pkey PRIMARY KEY (group_id);


--
-- Name: md_image_cvterm md_image_cvterm_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_cvterm
    ADD CONSTRAINT md_image_cvterm_pkey PRIMARY KEY (md_image_cvterm_id);


--
-- Name: md_image_organism md_image_organism_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_organism
    ADD CONSTRAINT md_image_organism_pkey PRIMARY KEY (md_image_organism_id);


--
-- Name: md_image md_image_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image
    ADD CONSTRAINT md_image_pkey PRIMARY KEY (image_id);


--
-- Name: md_metadata md_metadata_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_metadata
    ADD CONSTRAINT md_metadata_pkey PRIMARY KEY (metadata_id);


--
-- Name: md_tag_image md_tag_image_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag_image
    ADD CONSTRAINT md_tag_image_pkey PRIMARY KEY (tag_image_id);


--
-- Name: md_tag md_tag_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag
    ADD CONSTRAINT md_tag_pkey PRIMARY KEY (tag_id);


--
-- Name: attribution referred_to_db_row_unique; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution
    ADD CONSTRAINT referred_to_db_row_unique UNIQUE (database_name, table_name, row_id);


--
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (role_id);


--
-- Name: data_points data_points_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.data_points
    ADD CONSTRAINT data_points_pkey PRIMARY KEY (dp_id);


--
-- Name: genotypes genotypes_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.genotypes
    ADD CONSTRAINT genotypes_pkey PRIMARY KEY (gen_id);


--
-- Name: images images_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.images
    ADD CONSTRAINT images_pkey PRIMARY KEY (image_id);


--
-- Name: locations locations_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.locations
    ADD CONSTRAINT locations_pkey PRIMARY KEY (loc_id);


--
-- Name: organs organs_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.organs
    ADD CONSTRAINT organs_pkey PRIMARY KEY (organ_id);


--
-- Name: plants plants_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.plants
    ADD CONSTRAINT plants_pkey PRIMARY KEY (plant_id);


--
-- Name: populations populations_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.populations
    ADD CONSTRAINT populations_pkey PRIMARY KEY (pop_id);


--
-- Name: properties properties_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.properties
    ADD CONSTRAINT properties_pkey PRIMARY KEY (prop_id);


--
-- Name: samples samples_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.samples
    ADD CONSTRAINT samples_pkey PRIMARY KEY (sample_id);


--
-- Name: sources sources_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY pheno_population.sources
    ADD CONSTRAINT sources_pkey PRIMARY KEY (source_id);


--
-- Name: allele_alias allele_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_alias
    ADD CONSTRAINT allele_alias_pkey PRIMARY KEY (allele_alias_id);


--
-- Name: allele_dbxref allele_dbxref_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref
    ADD CONSTRAINT allele_dbxref_id_key UNIQUE (allele_id, dbxref_id);


--
-- Name: allele_dbxref allele_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref
    ADD CONSTRAINT allele_dbxref_pkey PRIMARY KEY (allele_dbxref_id);


--
-- Name: allele_history allele_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history
    ADD CONSTRAINT allele_history_pkey PRIMARY KEY (allele_history_id);


--
-- Name: allele allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele
    ADD CONSTRAINT allele_pkey PRIMARY KEY (allele_id);


--
-- Name: cross_type cross_type_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.cross_type
    ADD CONSTRAINT cross_type_pkey PRIMARY KEY (cross_type_id);


--
-- Name: dbxref_type dbxref_type_dbxref_type_definition_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_definition_key UNIQUE (dbxref_type_definition);


--
-- Name: dbxref_type dbxref_type_dbxref_type_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_name_key UNIQUE (dbxref_type_name);


--
-- Name: dbxref_type dbxref_type_dbxref_type_url_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_url_key UNIQUE (dbxref_type_url);


--
-- Name: dbxref_type dbxref_type_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.dbxref_type
    ADD CONSTRAINT dbxref_type_pkey PRIMARY KEY (dbxref_type_id);


--
-- Name: genotype_experiment genotype_experiment_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_experiment
    ADD CONSTRAINT genotype_experiment_pkey PRIMARY KEY (genotype_experiment_id);


--
-- Name: genotype genotype_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotype_region genotype_region_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_pkey PRIMARY KEY (genotype_region_id);


--
-- Name: germplasm germplasm_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.germplasm
    ADD CONSTRAINT germplasm_pkey PRIMARY KEY (germplasm_id);


--
-- Name: individual_alias individual_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_alias
    ADD CONSTRAINT individual_alias_pkey PRIMARY KEY (individual_alias_id);


--
-- Name: individual_allele individual_allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele
    ADD CONSTRAINT individual_allele_pkey PRIMARY KEY (individual_allele_id);


--
-- Name: individual_allele individual_allele_ukey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele
    ADD CONSTRAINT individual_allele_ukey UNIQUE (individual_id, allele_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_pkey PRIMARY KEY (individual_dbxref_evidence_history_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_pkey PRIMARY KEY (individual_dbxref_evidence_id);


--
-- Name: individual_dbxref individual_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref
    ADD CONSTRAINT individual_dbxref_pkey PRIMARY KEY (individual_dbxref_id);


--
-- Name: individual_history individual_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_history
    ADD CONSTRAINT individual_history_pkey PRIMARY KEY (individual_history_id);


--
-- Name: individual_image individual_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_image
    ADD CONSTRAINT individual_image_pkey PRIMARY KEY (individual_image_id);


--
-- Name: individual_locus individual_locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus
    ADD CONSTRAINT individual_locus_pkey PRIMARY KEY (individual_locus_id);


--
-- Name: individual_locus individual_locus_ukey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus
    ADD CONSTRAINT individual_locus_ukey UNIQUE (individual_id, locus_id);


--
-- Name: individual individual_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_pkey PRIMARY KEY (individual_id);


--
-- Name: is_public is_public_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.is_public
    ADD CONSTRAINT is_public_pkey PRIMARY KEY (is_public_id);


--
-- Name: is_public is_public_population_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.is_public
    ADD CONSTRAINT is_public_population_id_key UNIQUE (population_id);


--
-- Name: locus2locus locus2locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_pkey PRIMARY KEY (locus2locus_id);


--
-- Name: locus_alias locus_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_alias
    ADD CONSTRAINT locus_alias_pkey PRIMARY KEY (locus_alias_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_pkey PRIMARY KEY (locus_dbxref_evidence_history_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_pkey PRIMARY KEY (locus_dbxref_evidence_id);


--
-- Name: locus_dbxref locus_dbxref_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref
    ADD CONSTRAINT locus_dbxref_id_key UNIQUE (locus_id, dbxref_id);


--
-- Name: locus_dbxref locus_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref
    ADD CONSTRAINT locus_dbxref_pkey PRIMARY KEY (locus_dbxref_id);


--
-- Name: locus_history locus_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_history
    ADD CONSTRAINT locus_history_pkey PRIMARY KEY (locus_history_id);


--
-- Name: locus_image locus_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_image
    ADD CONSTRAINT locus_image_pkey PRIMARY KEY (locus_image_id);


--
-- Name: locus_marker locus_marker_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_marker
    ADD CONSTRAINT locus_marker_pkey PRIMARY KEY (locus_marker_id);


--
-- Name: locus locus_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_name_key UNIQUE (locus_name, common_name_id, obsolete);


--
-- Name: locus_owner locus_owner_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner
    ADD CONSTRAINT locus_owner_key UNIQUE (locus_id, sp_person_id);


--
-- Name: locus_owner locus_owner_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner
    ADD CONSTRAINT locus_owner_pkey PRIMARY KEY (locus_owner_id);


--
-- Name: locus locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_pkey PRIMARY KEY (locus_id);


--
-- Name: locus_registry locus_registry_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry
    ADD CONSTRAINT locus_registry_id_key UNIQUE (locus_id, registry_id);


--
-- Name: locus_registry locus_registry_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry
    ADD CONSTRAINT locus_registry_pkey PRIMARY KEY (locus_registry_id);


--
-- Name: locus locus_symbol_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_symbol_key UNIQUE (locus_symbol, common_name_id, obsolete);


--
-- Name: locus_unigene locus_unigene_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene
    ADD CONSTRAINT locus_unigene_key UNIQUE (locus_id, unigene_id);


--
-- Name: locus_unigene locus_unigene_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene
    ADD CONSTRAINT locus_unigene_pkey PRIMARY KEY (locus_unigene_id);


--
-- Name: locusgroup locusgroup_locusgroup_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup
    ADD CONSTRAINT locusgroup_locusgroup_name_key UNIQUE (locusgroup_name);


--
-- Name: locusgroup_member locusgroup_member_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_key UNIQUE (locus_id, locusgroup_id);


--
-- Name: locusgroup_member locusgroup_member_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_pkey PRIMARY KEY (locusgroup_member_id);


--
-- Name: locusgroup locusgroup_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup
    ADD CONSTRAINT locusgroup_pkey PRIMARY KEY (locusgroup_id);


--
-- Name: nd_experiment_md_files nd_experiment_md_files_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.nd_experiment_md_files
    ADD CONSTRAINT nd_experiment_md_files_pkey PRIMARY KEY (nd_experiment_md_files_id);


--
-- Name: phenotype_user_trait phenotype_user_trait_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_pkey PRIMARY KEY (phenotype_user_trait_id);


--
-- Name: polymorphic_fragment polymorphic_fragment_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_pkey PRIMARY KEY (polymorphic_fragment_id);


--
-- Name: population_dbxref population_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population_dbxref
    ADD CONSTRAINT population_dbxref_pkey PRIMARY KEY (population_dbxref_id);


--
-- Name: population population_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_name_key UNIQUE (name);


--
-- Name: population population_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_pkey PRIMARY KEY (population_id);


--
-- Name: pub_curator pub_curator_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_pkey PRIMARY KEY (pub_curator_id);


--
-- Name: pub_curator pub_curator_pub_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_pub_id_key UNIQUE (pub_id);


--
-- Name: registry registry_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.registry
    ADD CONSTRAINT registry_pkey PRIMARY KEY (registry_id);


--
-- Name: stock_allele stock_allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_allele
    ADD CONSTRAINT stock_allele_pkey PRIMARY KEY (stock_allele_id);


--
-- Name: stock_image stock_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_image
    ADD CONSTRAINT stock_image_pkey PRIMARY KEY (stock_image_id);


--
-- Name: stock_owner stock_owner_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_owner
    ADD CONSTRAINT stock_owner_pkey PRIMARY KEY (stock_owner_id);


--
-- Name: registry symbol_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.registry
    ADD CONSTRAINT symbol_name_key UNIQUE (symbol, name);


--
-- Name: tomato_term2term term1_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term2term
    ADD CONSTRAINT term1_id_key UNIQUE (term1_id, term2_id, relationship_type_id);


--
-- Name: tomato_il_bin tomato_il_bin_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_pkey PRIMARY KEY (il_bin_id);


--
-- Name: tomato_term2term tomato_term2term_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term2term
    ADD CONSTRAINT tomato_term2term_pkey PRIMARY KEY (tomato_term2term_id);


--
-- Name: tomato_term tomato_term_acc_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term
    ADD CONSTRAINT tomato_term_acc_key UNIQUE (tomato_term_acc);


--
-- Name: tomato_term tomato_term_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_term
    ADD CONSTRAINT tomato_term_pkey PRIMARY KEY (tomato_term_id);


--
-- Name: unit unit_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.unit
    ADD CONSTRAINT unit_pkey PRIMARY KEY (unit_id);


--
-- Name: user_trait user_trait_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait
    ADD CONSTRAINT user_trait_pkey PRIMARY KEY (user_trait_id);


--
-- Name: user_trait_unit user_trait_unit_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait_unit
    ADD CONSTRAINT user_trait_unit_pkey PRIMARY KEY (user_trait_unit_id);


--
-- Name: variant variant_gi_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.variant
    ADD CONSTRAINT variant_gi_key UNIQUE (variant_gi);


--
-- Name: variant variant_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.variant
    ADD CONSTRAINT variant_pkey PRIMARY KEY (variant_id);


--
-- Name: ba_plausibility ba_plausibility_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.ba_plausibility
    ADD CONSTRAINT ba_plausibility_pkey PRIMARY KEY (bap_id);


--
-- Name: bac_associations bac_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_associations
    ADD CONSTRAINT bac_associations_pkey PRIMARY KEY (bac_assoc_id);


--
-- Name: bac_consensus_sequences bac_consensus_sequences_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_consensus_sequences
    ADD CONSTRAINT bac_consensus_sequences_pkey PRIMARY KEY (consensus_seq_id);


--
-- Name: bac_contigs bac_contigs_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_contigs
    ADD CONSTRAINT bac_contigs_pkey PRIMARY KEY (bac_contig_id);


--
-- Name: bac_end_sequences bac_end_sequences_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_end_sequences
    ADD CONSTRAINT bac_end_sequences_pkey PRIMARY KEY (end_seq_id);


--
-- Name: bacs bacs_arizona_clone_name_key; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bacs
    ADD CONSTRAINT bacs_arizona_clone_name_key UNIQUE (arizona_clone_name);


--
-- Name: bacs bacs_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bacs
    ADD CONSTRAINT bacs_pkey PRIMARY KEY (bac_id);


--
-- Name: computational_associations computational_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations
    ADD CONSTRAINT computational_associations_pkey PRIMARY KEY (computational_assoc_id);


--
-- Name: contig_sizes contig_sizes_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.contig_sizes
    ADD CONSTRAINT contig_sizes_pkey PRIMARY KEY (contig_size_id);


--
-- Name: deprecated_probes deprecated_probes_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.deprecated_probes
    ADD CONSTRAINT deprecated_probes_pkey PRIMARY KEY (dp_id);


--
-- Name: fpc_data fpc_data_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_data
    ADD CONSTRAINT fpc_data_pkey PRIMARY KEY (fpc_datum_id);


--
-- Name: fpc_version fpc_version_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_version
    ADD CONSTRAINT fpc_version_pkey PRIMARY KEY (fpc_version);


--
-- Name: manual_associations manual_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_pkey PRIMARY KEY (manual_assoc_id);


--
-- Name: oa_plausibility oa_plausibility_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.oa_plausibility
    ADD CONSTRAINT oa_plausibility_pkey PRIMARY KEY (oap_id);


--
-- Name: overgo_associations overgo_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_associations
    ADD CONSTRAINT overgo_associations_pkey PRIMARY KEY (overgo_assoc_id);


--
-- Name: overgo_plates overgo_plates_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_plates
    ADD CONSTRAINT overgo_plates_pkey PRIMARY KEY (plate_id);


--
-- Name: overgo_results overgo_results_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_results
    ADD CONSTRAINT overgo_results_pkey PRIMARY KEY (result_id);


--
-- Name: overgo_version overgo_version_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.overgo_version
    ADD CONSTRAINT overgo_version_pkey PRIMARY KEY (overgo_version);


--
-- Name: probe_markers probe_markers_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.probe_markers
    ADD CONSTRAINT probe_markers_pkey PRIMARY KEY (overgo_probe_id);


--
-- Name: species species_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.species
    ADD CONSTRAINT species_pkey PRIMARY KEY (species_id);


--
-- Name: tentative_association_conflict_groups tentative_association_conflict_groups_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.tentative_association_conflict_groups
    ADD CONSTRAINT tentative_association_conflict_groups_pkey PRIMARY KEY (tacg_id);


--
-- Name: tentative_overgo_associations tentative_overgo_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.tentative_overgo_associations
    ADD CONSTRAINT tentative_overgo_associations_pkey PRIMARY KEY (tentative_assoc_id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (user_id);


--
-- Name: analysis analysis_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysis
    ADD CONSTRAINT analysis_c1 UNIQUE (program, programversion, sourcename);


--
-- Name: analysis analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysis
    ADD CONSTRAINT analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: analysisfeature analysisfeature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_c1 UNIQUE (feature_id, analysis_id);


--
-- Name: analysisfeature analysisfeature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_pkey PRIMARY KEY (analysisfeature_id);


--
-- Name: analysisprop analysisprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_c1 UNIQUE (analysis_id, type_id, value);


--
-- Name: analysisprop analysisprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_pkey PRIMARY KEY (analysisprop_id);


--
-- Name: ara_annotation ara_annotation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_annotation
    ADD CONSTRAINT ara_annotation_pkey PRIMARY KEY (agi);


--
-- Name: ara_properties ara_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_properties
    ADD CONSTRAINT ara_properties_pkey PRIMARY KEY (agi);


--
-- Name: ara_sequence ara_sequence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_sequence
    ADD CONSTRAINT ara_sequence_pkey PRIMARY KEY (agi);


--
-- Name: ara_signalp ara_signalp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_signalp
    ADD CONSTRAINT ara_signalp_pkey PRIMARY KEY (agi);


--
-- Name: ara_targetp ara_targetp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ara_targetp
    ADD CONSTRAINT ara_targetp_pkey PRIMARY KEY (agi);


--
-- Name: blastwatch_queries blastwatch_queries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_queries
    ADD CONSTRAINT blastwatch_queries_pkey PRIMARY KEY (blastwatch_queries_id);


--
-- Name: blastwatch_results blastwatch_results_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_results
    ADD CONSTRAINT blastwatch_results_pkey PRIMARY KEY (blastwatch_results_id);


--
-- Name: bug bug_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bug
    ADD CONSTRAINT bug_pkey PRIMARY KEY (bug_id);


--
-- Name: contact contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_c1 UNIQUE (name);


--
-- Name: contact contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (contact_id);


--
-- Name: contact_relationship contact_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: contact_relationship contact_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_pkey PRIMARY KEY (contact_relationship_id);


--
-- Name: cv cv_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cv
    ADD CONSTRAINT cv_c1 UNIQUE (name);


--
-- Name: cv cv_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cv
    ADD CONSTRAINT cv_pkey PRIMARY KEY (cv_id);


--
-- Name: cvprop cvprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_c1 UNIQUE (cv_id, type_id, rank);


--
-- Name: cvprop cvprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_pkey PRIMARY KEY (cvprop_id);


--
-- Name: cvterm cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_c1 UNIQUE (name, cv_id, is_obsolete);


--
-- Name: cvterm cvterm_c2; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_c2 UNIQUE (dbxref_id);


--
-- Name: cvterm_dbxref cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_c1 UNIQUE (cvterm_id, dbxref_id);


--
-- Name: cvterm_dbxref cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_pkey PRIMARY KEY (cvterm_dbxref_id);


--
-- Name: cvterm_relationship cvterm_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cvterm_relationship cvterm_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_pkey PRIMARY KEY (cvterm_relationship_id);


--
-- Name: cvtermpath cvtermpath_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: cvtermpath cvtermpath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_pkey PRIMARY KEY (cvtermpath_id);


--
-- Name: cvtermprop cvtermprop_cvterm_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_key UNIQUE (cvterm_id, type_id, value, rank);


--
-- Name: cvtermprop cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_pkey PRIMARY KEY (cvtermprop_id);


--
-- Name: cvtermsynonym cvtermsynonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_c1 UNIQUE (cvterm_id, synonym);


--
-- Name: cvtermsynonym cvtermsynonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_pkey PRIMARY KEY (cvtermsynonym_id);


--
-- Name: db db_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.db
    ADD CONSTRAINT db_c1 UNIQUE (name);


--
-- Name: db db_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.db
    ADD CONSTRAINT db_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_c1 UNIQUE (db_id, accession, version);


--
-- Name: dbxref dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: dbxrefprop dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_c1 UNIQUE (dbxref_id, type_id, rank);


--
-- Name: dbxrefprop dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_pkey PRIMARY KEY (dbxrefprop_id);


--
-- Name: environment environment_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment
    ADD CONSTRAINT environment_c1 UNIQUE (uniquename);


--
-- Name: environment_cvterm environment_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_c1 UNIQUE (environment_id, cvterm_id);


--
-- Name: environment_cvterm environment_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_pkey PRIMARY KEY (environment_cvterm_id);


--
-- Name: environment environment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment
    ADD CONSTRAINT environment_pkey PRIMARY KEY (environment_id);


--
-- Name: enzyme_restriction_sites enzyme_restriction_sites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_pkey PRIMARY KEY (enzyme_restriction_sites_id);


--
-- Name: feature feature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: feature_cvterm feature_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_c1 UNIQUE (feature_id, cvterm_id, pub_id, rank);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_c1 UNIQUE (feature_cvterm_id, dbxref_id);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_pkey PRIMARY KEY (feature_cvterm_dbxref_id);


--
-- Name: feature_cvterm feature_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_pkey PRIMARY KEY (feature_cvterm_id);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_c1 UNIQUE (feature_cvterm_id, pub_id);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pkey PRIMARY KEY (feature_cvterm_pub_id);


--
-- Name: feature_cvtermprop feature_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_c1 UNIQUE (feature_cvterm_id, type_id, rank);


--
-- Name: feature_cvtermprop feature_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_pkey PRIMARY KEY (feature_cvtermprop_id);


--
-- Name: feature_dbxref feature_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_c1 UNIQUE (feature_id, dbxref_id);


--
-- Name: feature_dbxref feature_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_pkey PRIMARY KEY (feature_dbxref_id);


--
-- Name: feature_genotype feature_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_c1 UNIQUE (feature_id, genotype_id, cvterm_id, chromosome_id, rank, cgroup);


--
-- Name: feature_genotype feature_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_pkey PRIMARY KEY (feature_genotype_id);


--
-- Name: feature feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (feature_id);


--
-- Name: feature_pub feature_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_c1 UNIQUE (feature_id, pub_id);


--
-- Name: feature_pub feature_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_pkey PRIMARY KEY (feature_pub_id);


--
-- Name: feature_relationship feature_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: feature_relationship feature_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_pkey PRIMARY KEY (feature_relationship_id);


--
-- Name: feature_relationship_pub feature_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_c1 UNIQUE (feature_relationship_id, pub_id);


--
-- Name: feature_relationship_pub feature_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pkey PRIMARY KEY (feature_relationship_pub_id);


--
-- Name: feature_relationshipprop feature_relationshipprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_c1 UNIQUE (feature_relationship_id, type_id, rank);


--
-- Name: feature_relationshipprop feature_relationshipprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_pkey PRIMARY KEY (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_c1 UNIQUE (feature_relationshipprop_id, pub_id);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pkey PRIMARY KEY (feature_relationshipprop_pub_id);


--
-- Name: feature_synonym feature_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_c1 UNIQUE (synonym_id, feature_id, pub_id);


--
-- Name: feature_synonym feature_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_pkey PRIMARY KEY (feature_synonym_id);


--
-- Name: featureloc featureloc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_c1 UNIQUE (feature_id, locgroup, rank);


--
-- Name: featureloc featureloc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_pkey PRIMARY KEY (featureloc_id);


--
-- Name: featureloc_pub featureloc_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_c1 UNIQUE (featureloc_id, pub_id);


--
-- Name: featureloc_pub featureloc_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_pkey PRIMARY KEY (featureloc_pub_id);


--
-- Name: featureprop featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_c1 UNIQUE (feature_id, type_id, rank);


--
-- Name: featureprop featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_pkey PRIMARY KEY (featureprop_id);


--
-- Name: featureprop_pub featureprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_c1 UNIQUE (featureprop_id, pub_id);


--
-- Name: featureprop_pub featureprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_pkey PRIMARY KEY (featureprop_pub_id);


--
-- Name: forward_amplicon_sequence_information forward_amplicon_sequence_information_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.forward_amplicon_sequence_information
    ADD CONSTRAINT forward_amplicon_sequence_information_pkey PRIMARY KEY (forward_amplicon_sequence_information_id);


--
-- Name: forward_amplicon_sequence_markers forward_amplicon_sequence_markers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.forward_amplicon_sequence_markers
    ADD CONSTRAINT forward_amplicon_sequence_markers_pkey PRIMARY KEY (forward_amplicon_sequence_markers_id);


--
-- Name: fpc_band fpc_band_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_band
    ADD CONSTRAINT fpc_band_pkey PRIMARY KEY (fpc_band_id);


--
-- Name: fpc_build fpc_build_filename_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build
    ADD CONSTRAINT fpc_build_filename_key UNIQUE (file_base);


--
-- Name: fpc_build_fpc_fingerprint fpc_build_fpc_fingerprint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_pkey PRIMARY KEY (fpc_build_fpc_fingerprint_id);


--
-- Name: fpc_build fpc_build_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build
    ADD CONSTRAINT fpc_build_pkey PRIMARY KEY (fpc_build_id);


--
-- Name: fpc_contig_clone fpc_contig_clone_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_pkey PRIMARY KEY (fpc_contig_clone_id);


--
-- Name: fpc_contig fpc_contig_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig
    ADD CONSTRAINT fpc_contig_pkey PRIMARY KEY (fpc_contig_id);


--
-- Name: fpc_fingerprint fpc_fingerprint_clone_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_clone_id_key UNIQUE (clone_id, gel_name);


--
-- Name: fpc_fingerprint fpc_fingerprint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_pkey PRIMARY KEY (fpc_fingerprint_id);


--
-- Name: fpc_series fpc_series_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_series
    ADD CONSTRAINT fpc_series_pkey PRIMARY KEY (fpc_series_id);


--
-- Name: genotype genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_c1 UNIQUE (uniquename);


--
-- Name: genotype genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotypeprop genotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_c1 UNIQUE (genotype_id, type_id, rank);


--
-- Name: genotypeprop genotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_pkey PRIMARY KEY (genotypeprop_id);


--
-- Name: glossary glossary_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.glossary
    ADD CONSTRAINT glossary_pkey PRIMARY KEY (glossary_id);


--
-- Name: materialized_view materialized_view_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.materialized_view
    ADD CONSTRAINT materialized_view_name_key UNIQUE (name);


--
-- Name: matviews matviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.matviews
    ADD CONSTRAINT matviews_pkey PRIMARY KEY (mv_id);


--
-- Name: nd_experiment_contact nd_experiment_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_pkey PRIMARY KEY (nd_experiment_contact_id);


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_pkey PRIMARY KEY (nd_experiment_dbxref_id);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_c1 UNIQUE (nd_experiment_id, genotype_id);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_pkey PRIMARY KEY (nd_experiment_genotype_id);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_c1 UNIQUE (nd_experiment_id, phenotype_id);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_pkey PRIMARY KEY (nd_experiment_phenotype_id);


--
-- Name: nd_experiment nd_experiment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_pkey PRIMARY KEY (nd_experiment_id);


--
-- Name: nd_experiment_project nd_experiment_project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_pkey PRIMARY KEY (nd_experiment_project_id);


--
-- Name: nd_experiment_protocol nd_experiment_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_pkey PRIMARY KEY (nd_experiment_protocol_id);


--
-- Name: nd_experiment_pub nd_experiment_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_c1 UNIQUE (nd_experiment_id, pub_id);


--
-- Name: nd_experiment_pub nd_experiment_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pkey PRIMARY KEY (nd_experiment_pub_id);


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_pkey PRIMARY KEY (nd_experiment_stock_dbxref_id);


--
-- Name: nd_experiment_stock nd_experiment_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_pkey PRIMARY KEY (nd_experiment_stock_id);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_c1 UNIQUE (nd_experiment_stock_id, type_id, rank);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_pkey PRIMARY KEY (nd_experiment_stockprop_id);


--
-- Name: nd_experimentprop nd_experimentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_c1 UNIQUE (nd_experiment_id, type_id, rank);


--
-- Name: nd_experimentprop nd_experimentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_pkey PRIMARY KEY (nd_experimentprop_id);


--
-- Name: nd_geolocation nd_geolocation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocation
    ADD CONSTRAINT nd_geolocation_pkey PRIMARY KEY (nd_geolocation_id);


--
-- Name: nd_geolocationprop nd_geolocationprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_c1 UNIQUE (nd_geolocation_id, type_id, rank);


--
-- Name: nd_geolocationprop nd_geolocationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_pkey PRIMARY KEY (nd_geolocationprop_id);


--
-- Name: nd_protocol nd_protocol_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_name_key UNIQUE (name);


--
-- Name: nd_protocol nd_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_pkey PRIMARY KEY (nd_protocol_id);


--
-- Name: nd_protocol_reagent nd_protocol_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_pkey PRIMARY KEY (nd_protocol_reagent_id);


--
-- Name: nd_protocolprop nd_protocolprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_c1 UNIQUE (nd_protocol_id, type_id, rank);


--
-- Name: nd_protocolprop nd_protocolprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_pkey PRIMARY KEY (nd_protocolprop_id);


--
-- Name: nd_reagent nd_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent
    ADD CONSTRAINT nd_reagent_pkey PRIMARY KEY (nd_reagent_id);


--
-- Name: nd_reagent_relationship nd_reagent_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_pkey PRIMARY KEY (nd_reagent_relationship_id);


--
-- Name: nd_reagentprop nd_reagentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_c1 UNIQUE (nd_reagent_id, type_id, rank);


--
-- Name: nd_reagentprop nd_reagentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_pkey PRIMARY KEY (nd_reagentprop_id);


--
-- Name: organism organism_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species);


--
-- Name: organism_dbxref organism_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_c1 UNIQUE (organism_id, dbxref_id);


--
-- Name: organism_dbxref organism_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_pkey PRIMARY KEY (organism_dbxref_id);


--
-- Name: organism organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organism_relationship organism_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship
    ADD CONSTRAINT organism_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: organism_relationship organism_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship
    ADD CONSTRAINT organism_relationship_pkey PRIMARY KEY (organism_relationship_id);


--
-- Name: organismpath organismpath_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath
    ADD CONSTRAINT organismpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: organismpath organismpath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath
    ADD CONSTRAINT organismpath_pkey PRIMARY KEY (organismpath_id);


--
-- Name: organismprop organismprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_c1 UNIQUE (organism_id, type_id, rank);


--
-- Name: organismprop organismprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_pkey PRIMARY KEY (organismprop_id);


--
-- Name: phendesc phendesc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_c1 UNIQUE (genotype_id, environment_id, type_id, pub_id);


--
-- Name: phendesc phendesc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_pkey PRIMARY KEY (phendesc_id);


--
-- Name: phenotype_comparison phenotype_comparison_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_c1 UNIQUE (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, pub_id);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_c1 UNIQUE (phenotype_comparison_id, cvterm_id);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pkey PRIMARY KEY (phenotype_comparison_cvterm_id);


--
-- Name: phenotype_comparison phenotype_comparison_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pkey PRIMARY KEY (phenotype_comparison_id);


--
-- Name: phenotype_cvterm phenotype_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_c1 UNIQUE (phenotype_id, cvterm_id, rank);


--
-- Name: phenotype_cvterm phenotype_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_pkey PRIMARY KEY (phenotype_cvterm_id);


--
-- Name: phenotype phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_pkey PRIMARY KEY (phenotype_id);


--
-- Name: phenotypeprop phenotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotypeprop
    ADD CONSTRAINT phenotypeprop_c1 UNIQUE (phenotype_id, type_id, rank);


--
-- Name: phenotypeprop phenotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotypeprop
    ADD CONSTRAINT phenotypeprop_pkey PRIMARY KEY (phenotypeprop_id);


--
-- Name: phenstatement phenstatement_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_c1 UNIQUE (genotype_id, phenotype_id, environment_id, type_id, pub_id);


--
-- Name: phenstatement phenstatement_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_pkey PRIMARY KEY (phenstatement_id);


--
-- Name: phylonode_dbxref phylonode_dbxref_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_key UNIQUE (phylonode_id, dbxref_id);


--
-- Name: phylonode_dbxref phylonode_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_pkey PRIMARY KEY (phylonode_dbxref_id);


--
-- Name: phylonode_organism phylonode_organism_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_key UNIQUE (phylonode_id);


--
-- Name: phylonode_organism phylonode_organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_pkey PRIMARY KEY (phylonode_organism_id);


--
-- Name: phylonode phylonode_phylotree_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_key UNIQUE (phylotree_id, left_idx);


--
-- Name: phylonode phylonode_phylotree_id_key1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_key1 UNIQUE (phylotree_id, right_idx);


--
-- Name: phylonode phylonode_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_pkey PRIMARY KEY (phylonode_id);


--
-- Name: phylonode_pub phylonode_pub_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_key UNIQUE (phylonode_id, pub_id);


--
-- Name: phylonode_pub phylonode_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_pkey PRIMARY KEY (phylonode_pub_id);


--
-- Name: phylonode_relationship phylonode_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_pkey PRIMARY KEY (phylonode_relationship_id);


--
-- Name: phylonode_relationship phylonode_relationship_subject_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_key UNIQUE (subject_id, object_id, type_id);


--
-- Name: phylonodeprop phylonodeprop_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_key UNIQUE (phylonode_id, type_id, value, rank);


--
-- Name: phylonodeprop phylonodeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_pkey PRIMARY KEY (phylonodeprop_id);


--
-- Name: phylotree phylotree_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_pkey PRIMARY KEY (phylotree_id);


--
-- Name: phylotree_pub phylotree_pub_phylotree_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_key UNIQUE (phylotree_id, pub_id);


--
-- Name: phylotree_pub phylotree_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_pkey PRIMARY KEY (phylotree_pub_id);


--
-- Name: project project_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project
    ADD CONSTRAINT project_c1 UNIQUE (name);


--
-- Name: project_contact project_contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_c1 UNIQUE (project_id, contact_id);


--
-- Name: project_contact project_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_pkey PRIMARY KEY (project_contact_id);


--
-- Name: project project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);


--
-- Name: project_pub project_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_c1 UNIQUE (project_id, pub_id);


--
-- Name: project_pub project_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_pkey PRIMARY KEY (project_pub_id);


--
-- Name: project_relationship project_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_c1 UNIQUE (subject_project_id, object_project_id, type_id);


--
-- Name: project_relationship project_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_pkey PRIMARY KEY (project_relationship_id);


--
-- Name: projectprop projectprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_c1 UNIQUE (project_id, type_id, rank);


--
-- Name: projectprop projectprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_pkey PRIMARY KEY (projectprop_id);


--
-- Name: pub pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_c1 UNIQUE (uniquename);


--
-- Name: pub_dbxref pub_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_c1 UNIQUE (pub_id, dbxref_id);


--
-- Name: pub_dbxref pub_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_pkey PRIMARY KEY (pub_dbxref_id);


--
-- Name: pub pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_pkey PRIMARY KEY (pub_id);


--
-- Name: pub_relationship pub_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: pub_relationship pub_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_pkey PRIMARY KEY (pub_relationship_id);


--
-- Name: pubabstract pubabstract_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubabstract
    ADD CONSTRAINT pubabstract_pkey PRIMARY KEY (pubabstract_id);


--
-- Name: pubauthor pubauthor_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_c1 UNIQUE (pub_id, rank);


--
-- Name: pubauthor pubauthor_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_pkey PRIMARY KEY (pubauthor_id);


--
-- Name: pubprop pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_c1 UNIQUE (pub_id, type_id, rank);


--
-- Name: pubprop pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_pkey PRIMARY KEY (pubprop_id);


--
-- Name: resource_file resource_file_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource_file
    ADD CONSTRAINT resource_file_name_key UNIQUE (name);


--
-- Name: resource_file resource_file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource_file
    ADD CONSTRAINT resource_file_pkey PRIMARY KEY (resource_file_id);


--
-- Name: stock stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: stock_cvterm stock_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_c1 UNIQUE (stock_id, cvterm_id, pub_id, rank);


--
-- Name: stock_cvterm stock_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_pkey PRIMARY KEY (stock_cvterm_id);


--
-- Name: stock_cvtermprop stock_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_c1 UNIQUE (stock_cvterm_id, type_id, rank);


--
-- Name: stock_cvtermprop stock_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_pkey PRIMARY KEY (stock_cvtermprop_id);


--
-- Name: stock_dbxref stock_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_c1 UNIQUE (stock_id, dbxref_id);


--
-- Name: stock_dbxref stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_pkey PRIMARY KEY (stock_dbxref_id);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_c1 UNIQUE (stock_dbxref_id, type_id, rank);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_pkey PRIMARY KEY (stock_dbxrefprop_id);


--
-- Name: stock_genotype stock_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_c1 UNIQUE (stock_id, genotype_id);


--
-- Name: stock_genotype stock_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_pkey PRIMARY KEY (stock_genotype_id);


--
-- Name: stock stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_pkey PRIMARY KEY (stock_id);


--
-- Name: stock_pub stock_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_c1 UNIQUE (stock_id, pub_id);


--
-- Name: stock_pub stock_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_pkey PRIMARY KEY (stock_pub_id);


--
-- Name: stock_relationship stock_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pkey PRIMARY KEY (stock_relationship_cvterm_id);


--
-- Name: stock_relationship stock_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_pkey PRIMARY KEY (stock_relationship_id);


--
-- Name: stock_relationship_pub stock_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_c1 UNIQUE (stock_relationship_id, pub_id);


--
-- Name: stock_relationship_pub stock_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pkey PRIMARY KEY (stock_relationship_pub_id);


--
-- Name: stockcollection stockcollection_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_c1 UNIQUE (uniquename, type_id);


--
-- Name: stockcollection stockcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_pkey PRIMARY KEY (stockcollection_id);


--
-- Name: stockcollection_stock stockcollection_stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_c1 UNIQUE (stockcollection_id, stock_id);


--
-- Name: stockcollection_stock stockcollection_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_pkey PRIMARY KEY (stockcollection_stock_id);


--
-- Name: stockcollectionprop stockcollectionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_c1 UNIQUE (stockcollection_id, type_id, rank);


--
-- Name: stockcollectionprop stockcollectionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_pkey PRIMARY KEY (stockcollectionprop_id);


--
-- Name: stockprop stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_c1 UNIQUE (stock_id, type_id, rank);


--
-- Name: stockprop stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_pkey PRIMARY KEY (stockprop_id);


--
-- Name: stockprop_pub stockprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_c1 UNIQUE (stockprop_id, pub_id);


--
-- Name: stockprop_pub stockprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_pkey PRIMARY KEY (stockprop_pub_id);


--
-- Name: synonym synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_c1 UNIQUE (name, type_id);


--
-- Name: synonym synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: tableinfo tableinfo_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tableinfo
    ADD CONSTRAINT tableinfo_c1 UNIQUE (name);


--
-- Name: tableinfo tableinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tableinfo
    ADD CONSTRAINT tableinfo_pkey PRIMARY KEY (tableinfo_id);


--
-- Name: tmp_cds_handler tmp_cds_handler_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tmp_cds_handler
    ADD CONSTRAINT tmp_cds_handler_pkey PRIMARY KEY (cds_row_id);


--
-- Name: tmp_cds_handler_relationship tmp_cds_handler_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tmp_cds_handler_relationship
    ADD CONSTRAINT tmp_cds_handler_relationship_pkey PRIMARY KEY (rel_row_id);


--
-- Name: unigene_dbxref unigene_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_pkey PRIMARY KEY (unigene_dbxref_id);


--
-- Name: unigene_relations unigene_relations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_relations
    ADD CONSTRAINT unigene_relations_pkey PRIMARY KEY (unigene_id);


--
-- Name: unigene_signalp unigene_signalp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_signalp
    ADD CONSTRAINT unigene_signalp_pkey PRIMARY KEY (unigene_id);


--
-- Name: accession_names accession_names_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession_names
    ADD CONSTRAINT accession_names_pkey PRIMARY KEY (accession_name_id);


--
-- Name: accession accession_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession
    ADD CONSTRAINT accession_pkey PRIMARY KEY (accession_id);


--
-- Name: annotation_target_type annotation_target_type_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.annotation_target_type
    ADD CONSTRAINT annotation_target_type_pkey PRIMARY KEY (annotation_target_type_id);


--
-- Name: authors authors_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.authors
    ADD CONSTRAINT authors_pkey PRIMARY KEY (author_id);


--
-- Name: blast_annotations blast_annotations_apply_id_blast_target_id_uq; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_annotations
    ADD CONSTRAINT blast_annotations_apply_id_blast_target_id_uq UNIQUE (apply_id, blast_target_id);


--
-- Name: blast_annotations blast_annotations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_annotations
    ADD CONSTRAINT blast_annotations_pkey PRIMARY KEY (blast_annotation_id);


--
-- Name: blast_db_blast_db_group blast_db_blast_db_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_pkey PRIMARY KEY (blast_db_blast_db_group_id);


--
-- Name: blast_db blast_db_file_base_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db
    ADD CONSTRAINT blast_db_file_base_key UNIQUE (file_base);


--
-- Name: blast_db_group blast_db_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_group
    ADD CONSTRAINT blast_db_group_pkey PRIMARY KEY (blast_db_group_id);


--
-- Name: blast_db_organism blast_db_organism_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_organism
    ADD CONSTRAINT blast_db_organism_pkey PRIMARY KEY (blast_db_organism_id);


--
-- Name: blast_db blast_db_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db
    ADD CONSTRAINT blast_db_pkey PRIMARY KEY (blast_db_id);


--
-- Name: blast_defline blast_defline_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_defline
    ADD CONSTRAINT blast_defline_pkey PRIMARY KEY (defline_id);


--
-- Name: blast_hits blast_hits_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_hits
    ADD CONSTRAINT blast_hits_pkey PRIMARY KEY (blast_hit_id);


--
-- Name: blast_targets blast_targets_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_targets
    ADD CONSTRAINT blast_targets_pkey PRIMARY KEY (blast_target_id);


--
-- Name: cds cds_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cds
    ADD CONSTRAINT cds_pkey PRIMARY KEY (cds_id);


--
-- Name: chadoprop chadoprop_c1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.chadoprop
    ADD CONSTRAINT chadoprop_c1 UNIQUE (type_id, rank);


--
-- Name: chadoprop chadoprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.chadoprop
    ADD CONSTRAINT chadoprop_pkey PRIMARY KEY (chadoprop_id);


--
-- Name: clone clone_name_library_id_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.clone
    ADD CONSTRAINT clone_name_library_id_unique UNIQUE (clone_name, library_id);


--
-- Name: clone clone_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.clone
    ADD CONSTRAINT clone_pkey PRIMARY KEY (clone_id);


--
-- Name: cloning_vector cloning_vector_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cloning_vector
    ADD CONSTRAINT cloning_vector_name_key UNIQUE (name);


--
-- Name: cloning_vector cloning_vector_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cloning_vector
    ADD CONSTRAINT cloning_vector_pkey PRIMARY KEY (cloning_vector_id);


--
-- Name: common_name common_name_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_name
    ADD CONSTRAINT common_name_pkey PRIMARY KEY (common_name_id);


--
-- Name: common_name common_name_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_name
    ADD CONSTRAINT common_name_unique UNIQUE (common_name);


--
-- Name: common_nameprop common_nameprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_nameprop
    ADD CONSTRAINT common_nameprop_pkey PRIMARY KEY (common_nameprop_id);


--
-- Name: cos_markers cos_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cos_markers
    ADD CONSTRAINT cos_markers_pkey PRIMARY KEY (cos_marker_id);


--
-- Name: cosii_ortholog cosii_ortholog_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cosii_ortholog
    ADD CONSTRAINT cosii_ortholog_pkey PRIMARY KEY (cosii_unigene_id);


--
-- Name: derived_from_source derived_from_source_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.derived_from_source
    ADD CONSTRAINT derived_from_source_pkey PRIMARY KEY (derived_from_source_id);


--
-- Name: derived_from_source derived_from_source_source_schema_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.derived_from_source
    ADD CONSTRAINT derived_from_source_source_schema_key UNIQUE (source_schema, source_table, source_col);


--
-- Name: domain_match domain_match_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain_match
    ADD CONSTRAINT domain_match_pkey PRIMARY KEY (domain_match_id);


--
-- Name: domain domain_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain
    ADD CONSTRAINT domain_pkey PRIMARY KEY (domain_id);


--
-- Name: enzyme_restriction_sites enzyme_restriction_sites_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_pkey PRIMARY KEY (enzyme_restriction_sites_id);


--
-- Name: enzymes enzymes_enzyme_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.enzymes
    ADD CONSTRAINT enzymes_enzyme_name_key UNIQUE (enzyme_name);


--
-- Name: enzymes enzymes_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.enzymes
    ADD CONSTRAINT enzymes_pkey PRIMARY KEY (enzyme_id);


--
-- Name: est_dbxref est_dbxref_est_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est_dbxref
    ADD CONSTRAINT est_dbxref_est_id_key UNIQUE (est_id, dbxref_id);


--
-- Name: est_dbxref est_dbxref_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est_dbxref
    ADD CONSTRAINT est_dbxref_pkey PRIMARY KEY (est_dbxref_id);


--
-- Name: est est_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est
    ADD CONSTRAINT est_pkey PRIMARY KEY (est_id);


--
-- Name: ests_mapped_by_clone ests_mapped_by_clone_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ests_mapped_by_clone
    ADD CONSTRAINT ests_mapped_by_clone_pkey PRIMARY KEY (embc_id);


--
-- Name: experiment_type experiment_type_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.experiment_type
    ADD CONSTRAINT experiment_type_pkey PRIMARY KEY (experiment_type_id);


--
-- Name: facility facility_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.facility
    ADD CONSTRAINT facility_pkey PRIMARY KEY (facility_id);


--
-- Name: family_build family_build_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_build
    ADD CONSTRAINT family_build_pkey PRIMARY KEY (family_build_id);


--
-- Name: family_member family_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_member
    ADD CONSTRAINT family_member_pkey PRIMARY KEY (family_member_id);


--
-- Name: family family_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family
    ADD CONSTRAINT family_pkey PRIMARY KEY (family_id);


--
-- Name: family_tree family_tree_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_tree
    ADD CONSTRAINT family_tree_pkey PRIMARY KEY (family_tree_id);


--
-- Name: fish_chromatin_density_constants fish_chromatin_density_constants_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_chromatin_density_constants
    ADD CONSTRAINT fish_chromatin_density_constants_pkey PRIMARY KEY (arm);


--
-- Name: fish_experimenter fish_experimenter_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_experimenter
    ADD CONSTRAINT fish_experimenter_pkey PRIMARY KEY (fish_experimenter_id);


--
-- Name: fish_experimenter fish_expermenter_name_uniq; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_experimenter
    ADD CONSTRAINT fish_expermenter_name_uniq UNIQUE (fish_experimenter_name);


--
-- Name: fish_file fish_file_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_file
    ADD CONSTRAINT fish_file_pkey PRIMARY KEY (fish_file_id);


--
-- Name: fish_image fish_image_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_image
    ADD CONSTRAINT fish_image_pkey PRIMARY KEY (fish_image_id);


--
-- Name: fish_karyotype_constants_old fish_karyotype_constants_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_karyotype_constants_old
    ADD CONSTRAINT fish_karyotype_constants_pkey PRIMARY KEY (chromo_num);


--
-- Name: fish_karyotype_constants fish_karyotype_constants_pkey1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_karyotype_constants
    ADD CONSTRAINT fish_karyotype_constants_pkey1 PRIMARY KEY (fish_experimenter_id, chromo_num, chromo_arm);


--
-- Name: fish_result_composite fish_result_composite_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result_composite
    ADD CONSTRAINT fish_result_composite_pkey PRIMARY KEY (fish_result_id);


--
-- Name: fish_result fish_result_fish_experimenter_clone_id_experiment_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT fish_result_fish_experimenter_clone_id_experiment_name UNIQUE (fish_experimenter_id, clone_id, experiment_name);


--
-- Name: fish_result_image fish_result_image_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result_image
    ADD CONSTRAINT fish_result_image_pkey PRIMARY KEY (fish_result_image_id);


--
-- Name: fish_result fish_result_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT fish_result_pkey PRIMARY KEY (fish_result_id);


--
-- Name: go go_go_accession_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.go
    ADD CONSTRAINT go_go_accession_key UNIQUE (go_accession);


--
-- Name: go go_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.go
    ADD CONSTRAINT go_pkey PRIMARY KEY (go_id);


--
-- Name: group_linkage group_linkage_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.group_linkage
    ADD CONSTRAINT group_linkage_pkey PRIMARY KEY (group_linkage_id);


--
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (group_id);


--
-- Name: id_linkage id_linkage_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.id_linkage
    ADD CONSTRAINT id_linkage_pkey PRIMARY KEY (id_linkage_id);


--
-- Name: interpro_go interpro_go_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro_go
    ADD CONSTRAINT interpro_go_pkey PRIMARY KEY (interpro_go_id);


--
-- Name: interpro interpro_interpro_accession_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro
    ADD CONSTRAINT interpro_interpro_accession_key UNIQUE (interpro_accession);


--
-- Name: interpro interpro_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro
    ADD CONSTRAINT interpro_pkey PRIMARY KEY (interpro_id);


--
-- Name: deprecated_marker_confidences legacy_conf_id_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_confidences
    ADD CONSTRAINT legacy_conf_id_unique UNIQUE (legacy_conf_id);


--
-- Name: clone library_id_clone_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.clone
    ADD CONSTRAINT library_id_clone_name_key UNIQUE (library_id, clone_name);


--
-- Name: library library_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library library_shortname_idx; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library
    ADD CONSTRAINT library_shortname_idx UNIQUE (library_shortname);


--
-- Name: linkage_group linkage_group_map_version_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_key UNIQUE (map_version_id, lg_order);


--
-- Name: linkage_group linkage_group_map_version_id_key1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_key1 UNIQUE (map_version_id, lg_name);


--
-- Name: linkage_group linkage_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_pkey PRIMARY KEY (lg_id);


--
-- Name: deprecated_linkage_groups linkage_groups_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_linkage_groups
    ADD CONSTRAINT linkage_groups_pkey PRIMARY KEY (lg_id);


--
-- Name: loc_types loc_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.loc_types
    ADD CONSTRAINT loc_types_pkey PRIMARY KEY (loc_type_id);


--
-- Name: manual_annotations manual_annotations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.manual_annotations
    ADD CONSTRAINT manual_annotations_pkey PRIMARY KEY (manual_annotations_id);


--
-- Name: manual_censor_reasons manual_censor_reasons_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.manual_censor_reasons
    ADD CONSTRAINT manual_censor_reasons_pkey PRIMARY KEY (censor_id);


--
-- Name: deprecated_map_cross map_cross_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_map_cross
    ADD CONSTRAINT map_cross_pkey PRIMARY KEY (map_cross_id);


--
-- Name: map map_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_pkey PRIMARY KEY (map_id);


--
-- Name: map_version map_version_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map_version
    ADD CONSTRAINT map_version_pkey PRIMARY KEY (map_version_id);


--
-- Name: deprecated_mapdata mapdata_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_mapdata
    ADD CONSTRAINT mapdata_pkey PRIMARY KEY (loc_id);


--
-- Name: deprecated_maps maps_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_maps
    ADD CONSTRAINT maps_pkey PRIMARY KEY (map_id);


--
-- Name: marker_alias marker_alias_alias_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_alias
    ADD CONSTRAINT marker_alias_alias_key UNIQUE (alias);


--
-- Name: marker_alias marker_alias_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_alias
    ADD CONSTRAINT marker_alias_pkey PRIMARY KEY (alias_id);


--
-- Name: marker_collectible marker_collectible_marker_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collectible
    ADD CONSTRAINT marker_collectible_marker_id_key UNIQUE (marker_id, mc_id);


--
-- Name: marker_collectible marker_collectible_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collectible
    ADD CONSTRAINT marker_collectible_pkey PRIMARY KEY (marker_collectible_dummy_id);


--
-- Name: marker_collection marker_collection_mc_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collection
    ADD CONSTRAINT marker_collection_mc_name_key UNIQUE (mc_name);


--
-- Name: marker_collection marker_collection_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collection
    ADD CONSTRAINT marker_collection_pkey PRIMARY KEY (mc_id);


--
-- Name: marker_confidence marker_confidence_confidence_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_confidence
    ADD CONSTRAINT marker_confidence_confidence_name_key UNIQUE (confidence_name);


--
-- Name: marker_confidence marker_confidence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_confidence
    ADD CONSTRAINT marker_confidence_pkey PRIMARY KEY (confidence_id);


--
-- Name: deprecated_marker_confidences marker_confidences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_confidences
    ADD CONSTRAINT marker_confidences_pkey PRIMARY KEY (confidence_id);


--
-- Name: marker_derived_from marker_derived_from_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_derived_from
    ADD CONSTRAINT marker_derived_from_pkey PRIMARY KEY (marker_derived_dummy_id);


--
-- Name: marker_experiment marker_experiment_pcr_experiment_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_pcr_experiment_id_key UNIQUE (pcr_experiment_id, rflp_experiment_id, location_id);


--
-- Name: marker_experiment marker_experiment_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_pkey PRIMARY KEY (marker_experiment_id);


--
-- Name: marker_location marker_location_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_location
    ADD CONSTRAINT marker_location_pkey PRIMARY KEY (location_id);


--
-- Name: deprecated_marker_locations marker_locations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_locations
    ADD CONSTRAINT marker_locations_pkey PRIMARY KEY (marker_location_id);


--
-- Name: marker marker_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker
    ADD CONSTRAINT marker_pkey PRIMARY KEY (marker_id);


--
-- Name: deprecated_marker_types marker_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_types
    ADD CONSTRAINT marker_types_pkey PRIMARY KEY (marker_type_id);


--
-- Name: deprecated_markers markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_markers
    ADD CONSTRAINT markers_pkey PRIMARY KEY (marker_id);


--
-- Name: metadata metadata_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.metadata
    ADD CONSTRAINT metadata_pkey PRIMARY KEY (metadata_id);


--
-- Name: microarray microarray_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.microarray
    ADD CONSTRAINT microarray_pkey PRIMARY KEY (microarray_id);


--
-- Name: misc misc_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.misc
    ADD CONSTRAINT misc_pkey PRIMARY KEY (misc_unique_id);


--
-- Name: organism organism_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organismgroup_member organismgroup_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup_member
    ADD CONSTRAINT organismgroup_member_pkey PRIMARY KEY (organismgroup_member_id);


--
-- Name: organismgroup organismgroup_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup
    ADD CONSTRAINT organismgroup_pkey PRIMARY KEY (organismgroup_id);


--
-- Name: p_markers p_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.p_markers
    ADD CONSTRAINT p_markers_pkey PRIMARY KEY (pid);


--
-- Name: pcr_exp_accession pcr_exp_accession_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_exp_accession
    ADD CONSTRAINT pcr_exp_accession_pkey PRIMARY KEY (pcr_exp_accession_id);


--
-- Name: pcr_experiment pcr_experiment_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT pcr_experiment_pkey PRIMARY KEY (pcr_experiment_id);


--
-- Name: pcr_experiment_sequence pcr_experiment_sequence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_pkey PRIMARY KEY (pcr_experiment_sequence_id);


--
-- Name: pcr_product pcr_product_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_product
    ADD CONSTRAINT pcr_product_pkey PRIMARY KEY (pcr_product_id);


--
-- Name: primer_unigene_match primer_unigene_match_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.primer_unigene_match
    ADD CONSTRAINT primer_unigene_match_pkey PRIMARY KEY (primer_unigene_match_id);


--
-- Name: qc_report qc_report_est_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.qc_report
    ADD CONSTRAINT qc_report_est_id_key UNIQUE (est_id);


--
-- Name: qc_report qc_report_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.qc_report
    ADD CONSTRAINT qc_report_pkey PRIMARY KEY (qc_id);


--
-- Name: rflp_markers rflp_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_markers
    ADD CONSTRAINT rflp_markers_pkey PRIMARY KEY (rflp_id);


--
-- Name: rflp_sequences rflp_sequences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_sequences
    ADD CONSTRAINT rflp_sequences_pkey PRIMARY KEY (seq_id);


--
-- Name: rflp_unigene_associations rflp_unigene_associations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_unigene_associations
    ADD CONSTRAINT rflp_unigene_associations_pkey PRIMARY KEY (rflp_unigene_assoc_id);


--
-- Name: seqread seqread_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.seqread
    ADD CONSTRAINT seqread_pkey PRIMARY KEY (read_id);


--
-- Name: sequence sequence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.sequence
    ADD CONSTRAINT sequence_pkey PRIMARY KEY (sequence_id);


--
-- Name: sequence sequence_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.sequence
    ADD CONSTRAINT sequence_unique UNIQUE (sequence);


--
-- Name: snp_file snp_file_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp_file
    ADD CONSTRAINT snp_file_pkey PRIMARY KEY (snp_file_id);


--
-- Name: snp snp_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_pkey PRIMARY KEY (snp_id);


--
-- Name: snpprop snpprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snpprop
    ADD CONSTRAINT snpprop_pkey PRIMARY KEY (snpprop_id);


--
-- Name: ssr ssr_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr
    ADD CONSTRAINT ssr_pkey PRIMARY KEY (ssr_id);


--
-- Name: ssr_primer_unigene_matches ssr_primer_unigene_matches_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_primer_unigene_matches
    ADD CONSTRAINT ssr_primer_unigene_matches_pkey PRIMARY KEY (ssr_primer_unigene_match_id);


--
-- Name: ssr_repeats ssr_repeats_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_repeats
    ADD CONSTRAINT ssr_repeats_pkey PRIMARY KEY (repeat_id);


--
-- Name: submit_user submit_user_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.submit_user
    ADD CONSTRAINT submit_user_pkey PRIMARY KEY (submit_user_id);


--
-- Name: taxonomy taxonomy_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (tax_id);


--
-- Name: temp_caps_correspondence temp_caps_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_caps_correspondence
    ADD CONSTRAINT temp_caps_correspondence_pkey PRIMARY KEY (tcc_id);


--
-- Name: temp_map_correspondence temp_map_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_pkey PRIMARY KEY (tmc_id);


--
-- Name: temp_marker_correspondence temp_marker_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_marker_correspondence
    ADD CONSTRAINT temp_marker_correspondence_pkey PRIMARY KEY (tmc_id);


--
-- Name: tigrtc_index tigrtc_index_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_index
    ADD CONSTRAINT tigrtc_index_pkey PRIMARY KEY (tcindex_id);


--
-- Name: tigrtc_membership tigrtc_membership_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_membership
    ADD CONSTRAINT tigrtc_membership_pkey PRIMARY KEY (tigrtc_membership_id);


--
-- Name: tigrtc_tracking tigrtc_tracking_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tigrtc_tracking
    ADD CONSTRAINT tigrtc_tracking_pkey PRIMARY KEY (tigrtc_tracking_id);


--
-- Name: tm_markers tm_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tm_markers
    ADD CONSTRAINT tm_markers_pkey PRIMARY KEY (tm_id);


--
-- Name: tm_markers_sequences tm_markers_sequences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tm_markers_sequences
    ADD CONSTRAINT tm_markers_sequences_pkey PRIMARY KEY (tm_marker_seq_id);


--
-- Name: trim_feature trim_feature_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.trim_feature
    ADD CONSTRAINT trim_feature_pkey PRIMARY KEY (feature_id);


--
-- Name: trim_feature_types trim_feature_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.trim_feature_types
    ADD CONSTRAINT trim_feature_types_pkey PRIMARY KEY (trim_type_id);


--
-- Name: types types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.types
    ADD CONSTRAINT types_pkey PRIMARY KEY (type_id);


--
-- Name: unigene_build unigene_build_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_pkey PRIMARY KEY (unigene_build_id);


--
-- Name: unigene_consensi unigene_consensi_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_consensi
    ADD CONSTRAINT unigene_consensi_pkey PRIMARY KEY (consensi_id);


--
-- Name: unigene_member unigene_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_member
    ADD CONSTRAINT unigene_member_pkey PRIMARY KEY (unigene_member_id);


--
-- Name: unigene unigene_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene
    ADD CONSTRAINT unigene_pkey PRIMARY KEY (unigene_id);


--
-- Name: pcr_product unique_acc_enz_mult_pred_size; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_product
    ADD CONSTRAINT unique_acc_enz_mult_pred_size UNIQUE (pcr_exp_accession_id, enzyme_id, multiple_flag, band_size, predicted);


--
-- Name: accession unique_accession_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession
    ADD CONSTRAINT unique_accession_name UNIQUE (accession_name_id);


--
-- Name: organism unique_organism_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT unique_organism_name UNIQUE (organism_name);


--
-- Name: bac_status bac_id_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status
    ADD CONSTRAINT bac_id_key UNIQUE (bac_id);


--
-- Name: bac_status_log bac_status_log_id_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status_log
    ADD CONSTRAINT bac_status_log_id_key PRIMARY KEY (bac_status_log_id);


--
-- Name: bac_status bac_status_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status
    ADD CONSTRAINT bac_status_pkey PRIMARY KEY (bac_status_id);


--
-- Name: clone_il_mapping_bin_log clone_il_mapping_bin_log_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_pkey PRIMARY KEY (sp_clone_il_mapping_bin_log_id);


--
-- Name: sp_person cookie_string_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person
    ADD CONSTRAINT cookie_string_unique UNIQUE (cookie_string);


--
-- Name: sp_person cookie_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person
    ADD CONSTRAINT cookie_unique UNIQUE (cookie_string);


--
-- Name: forum_post forum_post_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_post
    ADD CONSTRAINT forum_post_pkey PRIMARY KEY (forum_post_id);


--
-- Name: forum_topic forum_topic_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_topic
    ADD CONSTRAINT forum_topic_pkey PRIMARY KEY (forum_topic_id);


--
-- Name: list_item list_item_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list_item
    ADD CONSTRAINT list_item_pkey PRIMARY KEY (list_item_id);


--
-- Name: list list_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list
    ADD CONSTRAINT list_pkey PRIMARY KEY (list_id);


--
-- Name: sp_dataset sp_dataset_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_dataset
    ADD CONSTRAINT sp_dataset_pkey PRIMARY KEY (sp_dataset_id);


--
-- Name: sp_group sp_group_name_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_group
    ADD CONSTRAINT sp_group_name_key UNIQUE (name);


--
-- Name: sp_group sp_group_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_group
    ADD CONSTRAINT sp_group_pkey PRIMARY KEY (sp_group_id);


--
-- Name: sp_login_old sp_login_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_login_old
    ADD CONSTRAINT sp_login_pkey PRIMARY KEY (sp_login_id);


--
-- Name: sp_organisms sp_organisms_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organisms
    ADD CONSTRAINT sp_organisms_pkey PRIMARY KEY (organism_id);


--
-- Name: sp_organization_person sp_organization_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organization_person
    ADD CONSTRAINT sp_organization_person_pkey PRIMARY KEY (sp_organization_person_id);


--
-- Name: sp_organization sp_organization_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organization
    ADD CONSTRAINT sp_organization_pkey PRIMARY KEY (sp_organization_id);


--
-- Name: sp_papers sp_papers_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_papers
    ADD CONSTRAINT sp_papers_pkey PRIMARY KEY (sp_paper_id);


--
-- Name: sp_person_organisms sp_person_organisms_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_organisms
    ADD CONSTRAINT sp_person_organisms_pkey PRIMARY KEY (sp_person_organisms_id);


--
-- Name: sp_person sp_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person
    ADD CONSTRAINT sp_person_pkey PRIMARY KEY (sp_person_id);


--
-- Name: sp_person_roles sp_person_roles_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_roles
    ADD CONSTRAINT sp_person_roles_pkey PRIMARY KEY (sp_person_role_id);


--
-- Name: sp_person sp_person_username_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person
    ADD CONSTRAINT sp_person_username_key UNIQUE (username);


--
-- Name: sp_project_organization sp_project_organization_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_organization
    ADD CONSTRAINT sp_project_organization_pkey PRIMARY KEY (sp_project_organization_id);


--
-- Name: sp_project_person sp_project_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_person
    ADD CONSTRAINT sp_project_person_pkey PRIMARY KEY (sp_project_person_id);


--
-- Name: sp_project sp_project_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project
    ADD CONSTRAINT sp_project_pkey PRIMARY KEY (sp_project_id);


--
-- Name: sp_roles sp_roles_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_roles
    ADD CONSTRAINT sp_roles_pkey PRIMARY KEY (sp_role_id);


--
-- Name: user_map_data user_map_data_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map_data
    ADD CONSTRAINT user_map_data_pkey PRIMARY KEY (user_map_data_id);


--
-- Name: user_map user_map_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map
    ADD CONSTRAINT user_map_pkey PRIMARY KEY (user_map_id);


--
-- Name: sp_login_old username_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_login_old
    ADD CONSTRAINT username_unique UNIQUE (username);


--
-- Name: facility facility_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.facility
    ADD CONSTRAINT facility_pkey PRIMARY KEY (facility_id);


--
-- Name: library library_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: seqread read_id_key; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.seqread
    ADD CONSTRAINT read_id_key UNIQUE (read_id);


--
-- Name: seqread seqread_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.seqread
    ADD CONSTRAINT seqread_pkey PRIMARY KEY (submit_read_id);


--
-- Name: submit_user submit_user_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.submit_user
    ADD CONSTRAINT submit_user_pkey PRIMARY KEY (submit_user_id);


--
-- Name: ftype ftype_ftype; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.ftype
    ADD CONSTRAINT ftype_ftype UNIQUE (fmethod, fsource);


--
-- Name: fgroup gclass_fgroup; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fgroup
    ADD CONSTRAINT gclass_fgroup UNIQUE (gclass, gname);


--
-- Name: fattribute pk_fattribute; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fattribute
    ADD CONSTRAINT pk_fattribute PRIMARY KEY (fattribute_id);


--
-- Name: fdata pk_fdata; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fdata
    ADD CONSTRAINT pk_fdata PRIMARY KEY (fid);


--
-- Name: fdna pk_fdna; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fdna
    ADD CONSTRAINT pk_fdna PRIMARY KEY (fref, foffset);


--
-- Name: fgroup pk_fgroup; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fgroup
    ADD CONSTRAINT pk_fgroup PRIMARY KEY (gid);


--
-- Name: fmeta pk_fmeta; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.fmeta
    ADD CONSTRAINT pk_fmeta PRIMARY KEY (fname);


--
-- Name: ftype pk_ftype; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY tomato_gff.ftype
    ADD CONSTRAINT pk_ftype PRIMARY KEY (ftypeid);


--
-- Name: object_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX object_id_index ON biosource.bs_sample_relationship USING btree (object_id);


--
-- Name: protocol_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_id_index ON biosource.bs_protocol USING btree (protocol_id);


--
-- Name: protocol_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_pub_id_index ON biosource.bs_protocol_pub USING btree (protocol_pub_id);


--
-- Name: protocol_step_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_step_dbxref_id_index ON biosource.bs_protocol_step_dbxref USING btree (protocol_step_dbxref_id);


--
-- Name: protocol_step_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_step_id_index ON biosource.bs_protocol_step USING btree (protocol_step_id);


--
-- Name: sample_cvterm_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_cvterm_id_index ON biosource.bs_sample_cvterm USING btree (sample_cvterm_id);


--
-- Name: sample_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_dbxref_id_index ON biosource.bs_sample_dbxref USING btree (sample_dbxref_id);


--
-- Name: sample_element_cvterm_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_cvterm_id_index ON biosource.bs_sample_element_cvterm USING btree (sample_element_cvterm_id);


--
-- Name: sample_element_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_dbxref_id_index ON biosource.bs_sample_element_dbxref USING btree (sample_element_dbxref_id);


--
-- Name: sample_element_file_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_file_id_index ON biosource.bs_sample_element_file USING btree (sample_element_file_id);


--
-- Name: sample_element_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_id_index ON biosource.bs_sample_element USING btree (sample_element_id);


--
-- Name: sample_element_relation_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_relation_id_index ON biosource.bs_sample_element_relation USING btree (sample_element_relation_id);


--
-- Name: sample_file_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_file_id_index ON biosource.bs_sample_file USING btree (sample_file_id);


--
-- Name: sample_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_id_index ON biosource.bs_sample USING btree (sample_id);


--
-- Name: sample_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_pub_id_index ON biosource.bs_sample_pub USING btree (sample_pub_id);


--
-- Name: sample_relationship_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_relationship_id_index ON biosource.bs_sample_relationship USING btree (sample_relationship_id);


--
-- Name: subject_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX subject_id_index ON biosource.bs_sample_relationship USING btree (subject_id);


--
-- Name: tool_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX tool_id_index ON biosource.bs_tool USING btree (tool_id);


--
-- Name: tool_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX tool_pub_id_index ON biosource.bs_tool_pub USING btree (tool_pub_id);


--
-- Name: type_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX type_id_index ON biosource.bs_sample_relationship USING btree (type_id);


--
-- Name: cluster_analysis_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_analysis_id_index ON gem.ge_cluster_analysis USING btree (cluster_analysis_id);


--
-- Name: cluster_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_member_id_index ON gem.ge_cluster_member USING btree (cluster_member_id);


--
-- Name: cluster_profile_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_profile_id_index ON gem.ge_cluster_profile USING btree (cluster_profile_id);


--
-- Name: correlation_analysis_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX correlation_analysis_id_index ON gem.ge_correlation_analysis USING btree (correlation_analysis_id);


--
-- Name: correlation_analysis_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX correlation_analysis_member_id_index ON gem.ge_correlation_member USING btree (correlation_member_id);


--
-- Name: data_analysis_process_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX data_analysis_process_id_index ON gem.ge_data_analysis_process USING btree (data_analysis_process_id);


--
-- Name: diff_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX diff_expression_id_index ON gem.ge_diff_expression USING btree (diff_expression_id);


--
-- Name: experiment_analysis_group_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_analysis_group_id_index ON gem.ge_experiment_analysis_group USING btree (experiment_analysis_group_id);


--
-- Name: experiment_analysis_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_analysis_member_id_index ON gem.ge_experiment_analysis_member USING btree (experiment_analysis_member_id);


--
-- Name: experiment_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_dbxref_id_index ON gem.ge_experiment_dbxref USING btree (experiment_dbxref_id);


--
-- Name: experiment_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_id_index ON gem.ge_experiment USING btree (experiment_id);


--
-- Name: experimental_design_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_dbxref_id_index ON gem.ge_experimental_design_dbxref USING btree (experimental_design_dbxref_id);


--
-- Name: experimental_design_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_id_index ON gem.ge_experimental_design USING btree (experimental_design_id);


--
-- Name: experimental_design_pub_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_pub_id_index ON gem.ge_experimental_design_pub USING btree (experimental_design_pub_id);


--
-- Name: expression_by_experiment_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX expression_by_experiment_id_index ON gem.ge_expression_by_experiment USING btree (expression_by_experiment_id);


--
-- Name: fluorescanning_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX fluorescanning_id_index ON gem.ge_fluorescanning USING btree (fluorescanning_id);


--
-- Name: hybridization_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX hybridization_id_index ON gem.ge_hybridization USING btree (hybridization_id);


--
-- Name: platform_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_dbxref_id_index ON gem.ge_platform_dbxref USING btree (platform_dbxref_id);


--
-- Name: platform_design_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_design_id_index ON gem.ge_platform_design USING btree (platform_design_id);


--
-- Name: platform_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_id_index ON gem.ge_platform USING btree (platform_id);


--
-- Name: platform_pub_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_pub_id_index ON gem.ge_platform_pub USING btree (platform_pub_id);


--
-- Name: probe_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_expression_id_index ON gem.ge_probe_expression USING btree (probe_expression_id);


--
-- Name: probe_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_id_index ON gem.ge_probe USING btree (probe_id);


--
-- Name: probe_name_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_name_index ON gem.ge_probe USING btree (probe_name);


--
-- Name: probe_platform_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_platform_id_index ON gem.ge_probe USING btree (platform_id);


--
-- Name: probe_spot_coordinate_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_coordinate_id_index ON gem.ge_probe_spot_coordinate USING btree (probe_spot_coordinate_id);


--
-- Name: probe_spot_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_id_index ON gem.ge_probe_spot USING btree (probe_spot_id);


--
-- Name: probe_spot_probe_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_probe_id_index ON gem.ge_probe_spot USING btree (probe_id);


--
-- Name: profile_element_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX profile_element_id_index ON gem.ge_profile_element USING btree (profile_element_id);


--
-- Name: target_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_dbxref_id_index ON gem.ge_target_dbxref USING btree (target_dbxref_id);


--
-- Name: target_element_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_element_id_index ON gem.ge_target_element USING btree (target_element_id);


--
-- Name: target_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_id_index ON gem.ge_target USING btree (target_id);


--
-- Name: technology_type_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX technology_type_id_index ON gem.ge_technology_type USING btree (technology_type_id);


--
-- Name: template_dbiref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_dbiref_id_index ON gem.ge_template_dbiref USING btree (template_dbiref_id);


--
-- Name: template_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_dbxref_id_index ON gem.ge_template_dbxref USING btree (template_dbxref_id);


--
-- Name: template_diff_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_diff_expression_id_index ON gem.ge_template_diff_expression USING btree (template_diff_expression_id);


--
-- Name: template_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_expression_id_index ON gem.ge_template_expression USING btree (template_expression_id);


--
-- Name: template_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_id_index ON gem.ge_template USING btree (template_id);


--
-- Name: template_name_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_name_index ON gem.ge_template USING btree (template_name);


--
-- Name: accession_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX accession_id_idx ON genomic.library USING btree (accession_id);


--
-- Name: blast_defline_identifier_defline_fulltext_index; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX blast_defline_identifier_defline_fulltext_index ON genomic.blast_defline USING gist (identifier_defline_fulltext);


--
-- Name: blast_query_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX blast_query_id_idx ON genomic.blast_hit USING btree (blast_query_id);


--
-- Name: byname_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX byname_idx ON genomic.clone USING btree (platenum, wellrow, wellcol, clone_type_id);


--
-- Name: chromat_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX chromat_id_idx ON genomic.gss USING btree (chromat_id);


--
-- Name: clone_feature_feature_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_feature_feature_id_idx ON genomic.clone_feature USING btree (feature_id);


--
-- Name: clone_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_id_idx ON genomic.chromat USING btree (clone_id);


--
-- Name: clone_type_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_type_id_idx ON genomic.clone USING btree (clone_type_id);


--
-- Name: defline_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX defline_id_idx ON genomic.blast_hit USING btree (blast_defline_id);


--
-- Name: defline_query_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX defline_query_idx ON genomic.blast_hit USING btree (blast_defline_id, blast_query_id);


--
-- Name: evalue_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX evalue_idx ON genomic.blast_hit USING btree (evalue);


--
-- Name: filename_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX filename_idx ON genomic.chromat USING btree (filename);


--
-- Name: gss_flags_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_flags_idx ON genomic.gss USING btree (flags);


--
-- Name: gss_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_id_idx ON genomic.gss_submitted_to_genbank USING btree (gss_id);


--
-- Name: gss_id_idx2; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_id_idx2 ON genomic.qc_report USING btree (gss_id);


--
-- Name: identifier_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX identifier_idx ON genomic.blast_defline USING btree (identifier);


--
-- Name: library_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX library_id_idx ON genomic.clone USING btree (library_id);


--
-- Name: score_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX score_idx ON genomic.blast_hit USING btree (score);


--
-- Name: shortname_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX shortname_idx ON genomic.query_source_type USING btree (shortname);


--
-- Name: source_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX source_idx ON genomic.blast_query USING btree (query_source_type_id, source_id);


--
-- Name: status_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX status_idx ON genomic.gss USING btree (status);


--
-- Name: ex_tag_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX ex_tag_idx1_idx ON insitu.ex_tag USING btree (experiment_id);


--
-- Name: ex_tag_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX ex_tag_idx2_idx ON insitu.ex_tag USING btree (tag_id);


--
-- Name: experiment_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX experiment_idx1_idx ON insitu.experiment USING btree (probe_id);


--
-- Name: image_tag_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX image_tag_idx1_idx ON insitu.image_tag USING btree (image_id);


--
-- Name: image_tag_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX image_tag_idx2_idx ON insitu.image_tag USING btree (tag_id);


--
-- Name: tag_implication_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX tag_implication_idx1_idx ON insitu.tag_implication USING btree (tag_id);


--
-- Name: tag_implication_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX tag_implication_idx2_idx ON insitu.tag_implication USING btree (implied_id);


--
-- Name: dbipath_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbipath_id_index ON metadata.md_dbipath USING btree (dbipath_id);


--
-- Name: dbiref_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbiref_id_index ON metadata.md_dbiref USING btree (dbiref_id);


--
-- Name: dbversion_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbversion_id_index ON metadata.md_dbversion USING btree (dbversion_id);


--
-- Name: file_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX file_id_index ON metadata.md_files USING btree (file_id);


--
-- Name: group_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX group_id_index ON metadata.md_groups USING btree (group_id);


--
-- Name: groupmember_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX groupmember_id_index ON metadata.md_groupmembers USING btree (groupmember_id);


--
-- Name: metadata_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX metadata_id_index ON metadata.md_metadata USING btree (metadata_id);


--
-- Name: gen_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX gen_id_idx ON pheno_population.plants USING btree (gen_id);


--
-- Name: image_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX image_id_idx ON pheno_population.data_points USING btree (image_id);


--
-- Name: loc_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX loc_id_idx ON pheno_population.plants USING btree (loc_id);


--
-- Name: organ_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX organ_id_idx ON pheno_population.properties USING btree (organ_id);


--
-- Name: organ_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX organ_id_idx2 ON pheno_population.samples USING btree (organ_id);


--
-- Name: plant_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX plant_id_idx ON pheno_population.samples USING btree (plant_id);


--
-- Name: pop_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX pop_id_idx ON pheno_population.genotypes USING btree (pop_id);


--
-- Name: prop_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX prop_id_idx ON pheno_population.data_points USING btree (prop_id);


--
-- Name: sample_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX sample_id_idx ON pheno_population.data_points USING btree (sample_id);


--
-- Name: sample_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX sample_id_idx2 ON pheno_population.images USING btree (sample_id);


--
-- Name: source_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX source_id_idx ON pheno_population.data_points USING btree (source_id);


--
-- Name: source_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX source_id_idx2 ON pheno_population.images USING btree (source_id);


--
-- Name: background_accession_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX background_accession_id_idx ON phenome.genotype_experiment USING btree (background_accession_id);


--
-- Name: cross_type_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX cross_type_idx1 ON phenome.cross_type USING btree (cross_type);


--
-- Name: genotype_individual_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX genotype_individual_id_idx ON phenome.genotype USING btree (individual_id);


--
-- Name: genotype_reference_map_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX genotype_reference_map_id_idx ON phenome.genotype USING btree (reference_map_id);


--
-- Name: phenome_genotype_marker_id_nn_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_nn_idx ON phenome.genotype_region USING btree (marker_id_nn);


--
-- Name: phenome_genotype_marker_id_ns_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_ns_idx ON phenome.genotype_region USING btree (marker_id_ns);


--
-- Name: phenome_genotype_marker_id_sn_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_sn_idx ON phenome.genotype_region USING btree (marker_id_sn);


--
-- Name: phenome_genotype_marker_id_ss_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_ss_idx ON phenome.genotype_region USING btree (marker_id_ss);


--
-- Name: phenome_genotype_region_genotype_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_genotype_id_idx ON phenome.genotype_region USING btree (genotype_id);


--
-- Name: phenome_genotype_region_name; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_name ON phenome.genotype_region USING btree (name);


--
-- Name: phenome_genotype_region_type; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_type ON phenome.genotype_region USING btree (type);


--
-- Name: phenome_genotype_region_zygocity_code; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_zygocity_code ON phenome.genotype_region USING btree (zygocity_code);


--
-- Name: phenome_individual_name_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_individual_name_idx ON phenome.individual USING btree (name);


--
-- Name: phenome_population_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_population_id_idx ON phenome.individual USING btree (population_id);


--
-- Name: reference_map_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX reference_map_id_idx ON phenome.genotype_experiment USING btree (reference_map_id);


--
-- Name: unit_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX unit_idx1 ON phenome.unit USING btree (name);


--
-- Name: user_trait_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX user_trait_idx1 ON phenome.user_trait USING btree (name);


--
-- Name: bac_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx ON physical.bac_associations USING btree (bac_id, bac_contig_id, plausible);


--
-- Name: bac_id_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx2 ON physical.bac_consensus_sequences USING btree (bac_id, consensus_seq_name, length, includes_sp6_end, includes_t7_end);


--
-- Name: bac_id_idx3; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx3 ON physical.fpc_data USING btree (bac_id, bac_name, gel_number, creation_date, modification_date);


--
-- Name: bac_id_idx4; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx4 ON physical.overgo_associations USING btree (bac_id);


--
-- Name: bap_bac_assoc_id_idx_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bap_bac_assoc_id_idx_idx ON physical.ba_plausibility USING btree (bac_assoc_id);


--
-- Name: conflict_group_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX conflict_group_id_idx ON physical.tentative_association_conflict_groups USING btree (conflict_group_id, tentative_assoc_id);


--
-- Name: contig_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX contig_name_idx ON physical.bac_contigs USING btree (contig_name, fpc_version);


--
-- Name: cornell_clone_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX cornell_clone_name_idx ON physical.bacs USING btree (cornell_clone_name, arizona_clone_name, species_id, genbank_accession, bad_clone, estimated_length);


--
-- Name: end_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX end_id_idx ON physical.bac_end_sequences USING btree (end_id, length);


--
-- Name: net_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX net_id_idx ON physical.users USING btree (net_id);


--
-- Name: oap_overgo_assoc_id_idx_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX oap_overgo_assoc_id_idx_idx ON physical.oa_plausibility USING btree (overgo_assoc_id);


--
-- Name: overgo_plate_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_plate_id_idx ON physical.overgo_results USING btree (overgo_plate_id, bac_id, overgo_pool);


--
-- Name: overgo_plate_id_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_plate_id_idx2 ON physical.probe_markers USING btree (overgo_plate_id, overgo_plate_row, overgo_plate_col, marker_id);


--
-- Name: overgo_version_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx ON physical.deprecated_probes USING btree (overgo_version, overgo_probe_id);


--
-- Name: overgo_version_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx2 ON physical.overgo_associations USING btree (overgo_version, overgo_probe_id, bac_id, plausible);


--
-- Name: overgo_version_idx3; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx3 ON physical.tentative_overgo_associations USING btree (overgo_version, overgo_probe_id, bac_id);


--
-- Name: plate_number_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX plate_number_idx ON physical.overgo_plates USING btree (plate_number);


--
-- Name: short_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX short_name_idx ON physical.species USING btree (short_name);


--
-- Name: updated_by_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX updated_by_idx ON physical.fpc_version USING btree (updated_by, current);


--
-- Name: updated_by_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX updated_by_idx2 ON physical.overgo_version USING btree (updated_by, current);


--
-- Name: accession_id_geno_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX accession_id_geno_idx ON public.materialized_genoview USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accession_id_pheno_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX accession_id_pheno_idx ON public.materialized_phenoview USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accessions_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessions_idx ON public.accessions USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accessionsxbreeding_programs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxbreeding_programs_idx ON public.accessionsxbreeding_programs USING btree (accession_id, breeding_program_id) WITH (fillfactor='100');


--
-- Name: accessionsxgenotyping_protocols_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxgenotyping_protocols_idx ON public.accessionsxgenotyping_protocols USING btree (accession_id, genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: accessionsxlocations_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxlocations_idx ON public.accessionsxlocations USING btree (accession_id, location_id) WITH (fillfactor='100');


--
-- Name: accessionsxplants_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxplants_idx ON public.accessionsxplants USING btree (accession_id, plant_id) WITH (fillfactor='100');


--
-- Name: accessionsxplots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxplots_idx ON public.accessionsxplots USING btree (accession_id, plot_id) WITH (fillfactor='100');


--
-- Name: accessionsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxseedlots_idx ON public.accessionsxseedlots USING btree (accession_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxtrait_components_idx ON public.accessionsxtrait_components USING btree (accession_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: accessionsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxtraits_idx ON public.accessionsxtraits USING btree (accession_id, trait_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxtrial_designs_idx ON public.accessionsxtrial_designs USING btree (accession_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxtrial_types_idx ON public.accessionsxtrial_types USING btree (accession_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxtrials_idx ON public.accessionsxtrials USING btree (accession_id, trial_id) WITH (fillfactor='100');


--
-- Name: accessionsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX accessionsxyears_idx ON public.accessionsxyears USING btree (accession_id, year_id) WITH (fillfactor='100');


--
-- Name: analysisfeature_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisfeature_idx1 ON public.analysisfeature USING btree (feature_id);


--
-- Name: analysisfeature_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisfeature_idx2 ON public.analysisfeature USING btree (analysis_id);


--
-- Name: analysisprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisprop_idx1 ON public.analysisprop USING btree (analysis_id);


--
-- Name: analysisprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisprop_idx2 ON public.analysisprop USING btree (type_id);


--
-- Name: ara_annotation_fulltext; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_annotation_fulltext ON public.ara_annotation USING gist (fulltext);


--
-- Name: ara_annotation_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_annotation_locus ON public.ara_annotation USING btree (locus);


--
-- Name: ara_domain_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_domain_agi ON public.ara_domain USING btree (agi);


--
-- Name: ara_domain_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_domain_locus ON public.ara_domain USING btree (locus);


--
-- Name: ara_gfp_ms_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_gfp_ms_agi ON public.ara_gfp_ms USING btree (agi);


--
-- Name: ara_gfp_ms_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_gfp_ms_locus ON public.ara_gfp_ms USING btree (locus);


--
-- Name: ara_interactome_all_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_interactome_all_locus ON public.ara_interactome_all USING btree (locus);


--
-- Name: ara_interactome_unique_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_interactome_unique_locus ON public.ara_interactome_unique USING btree (locus);


--
-- Name: ara_intron_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_intron_agi ON public.ara_intron USING btree (agi);


--
-- Name: ara_intron_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_intron_locus ON public.ara_intron USING btree (locus);


--
-- Name: ara_map_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_map_locus ON public.ara_map USING btree (locus);


--
-- Name: ara_myristoylation_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_myristoylation_locus ON public.ara_myristoylation USING btree (locus);


--
-- Name: ara_properties_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_properties_locus ON public.ara_properties USING btree (locus);


--
-- Name: ara_scop_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_scop_agi ON public.ara_scop USING btree (agi);


--
-- Name: ara_scop_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_scop_locus ON public.ara_scop USING btree (locus);


--
-- Name: ara_sequence_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_sequence_locus ON public.ara_sequence USING btree (locus);


--
-- Name: ara_signalp_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_signalp_agi ON public.ara_signalp USING btree (agi);


--
-- Name: ara_signalp_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_signalp_locus ON public.ara_signalp USING btree (locus);


--
-- Name: ara_targetp_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_targetp_locus ON public.ara_targetp USING btree (locus);


--
-- Name: binloc_boxrange; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX binloc_boxrange ON public.featureloc USING gist (public.boxrange(fmin, fmax));


--
-- Name: breeding_program_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX breeding_program_id_idx ON public.materialized_phenoview USING btree (breeding_program_id) WITH (fillfactor='100');


--
-- Name: breeding_programs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programs_idx ON public.breeding_programs USING btree (breeding_program_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxgenotyping_protocols_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxgenotyping_protocols_idx ON public.breeding_programsxgenotyping_protocols USING btree (breeding_program_id, genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxlocations_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxlocations_idx ON public.breeding_programsxlocations USING btree (breeding_program_id, location_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxplants_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxplants_idx ON public.breeding_programsxplants USING btree (breeding_program_id, plant_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxplots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxplots_idx ON public.breeding_programsxplots USING btree (breeding_program_id, plot_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxseedlots_idx ON public.breeding_programsxseedlots USING btree (breeding_program_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxtrait_components_idx ON public.breeding_programsxtrait_components USING btree (breeding_program_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxtraits_idx ON public.breeding_programsxtraits USING btree (breeding_program_id, trait_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxtrial_designs_idx ON public.breeding_programsxtrial_designs USING btree (breeding_program_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxtrial_types_idx ON public.breeding_programsxtrial_types USING btree (breeding_program_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxtrials_idx ON public.breeding_programsxtrials USING btree (breeding_program_id, trial_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX breeding_programsxyears_idx ON public.breeding_programsxyears USING btree (breeding_program_id, year_id) WITH (fillfactor='100');


--
-- Name: contact_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx1 ON public.contact_relationship USING btree (type_id);


--
-- Name: contact_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx2 ON public.contact_relationship USING btree (subject_id);


--
-- Name: contact_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx3 ON public.contact_relationship USING btree (object_id);


--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.cvterm_c1 IS 'a name can mean different things in
different contexts; for example "chromosome" in SO and GO. A name
should be unique within an ontology/cv. A name may exist twice in a
cv, in both obsolete and non-obsolete forms - these will be for
different cvterms with different OBO identifiers; so GO documentation
for more details on obsoletion. Note that occasionally multiple
obsolete terms with the same name will exist in the same cv. If this
is a possibility for the ontology under consideration (eg GO) then the
ID should be appended to the name to ensure uniqueness';


--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.cvterm_c2 IS 'the OBO identifier is globally unique';


--
-- Name: cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_dbxref_idx1 ON public.cvterm_dbxref USING btree (cvterm_id);


--
-- Name: cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_dbxref_idx2 ON public.cvterm_dbxref USING btree (dbxref_id);


--
-- Name: cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx1 ON public.cvterm USING btree (cv_id);


--
-- Name: cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx2 ON public.cvterm USING btree (name);


--
-- Name: cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx3 ON public.cvterm USING btree (dbxref_id);


--
-- Name: cvterm_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx1 ON public.cvterm_relationship USING btree (type_id);


--
-- Name: cvterm_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx2 ON public.cvterm_relationship USING btree (subject_id);


--
-- Name: cvterm_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx3 ON public.cvterm_relationship USING btree (object_id);


--
-- Name: cvtermpath_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx1 ON public.cvtermpath USING btree (type_id);


--
-- Name: cvtermpath_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx2 ON public.cvtermpath USING btree (subject_id);


--
-- Name: cvtermpath_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx3 ON public.cvtermpath USING btree (object_id);


--
-- Name: cvtermpath_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx4 ON public.cvtermpath USING btree (cv_id);


--
-- Name: cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermprop_idx1 ON public.cvtermprop USING btree (cvterm_id);


--
-- Name: cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermprop_idx2 ON public.cvtermprop USING btree (type_id);


--
-- Name: cvtermsynonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermsynonym_idx1 ON public.cvtermsynonym USING btree (cvterm_id);


--
-- Name: cxgn_bac_pipeline_genbank_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_genbank_log_key ON public.cxgn_bac_pipeline_genbank_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_loading_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_loading_log_key ON public.cxgn_bac_pipeline_loading_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_processing_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_processing_log_key ON public.cxgn_bac_pipeline_processing_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_processing_log_timestamp; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_processing_log_timestamp ON public.cxgn_bac_pipeline_processing_log USING btree ("timestamp");


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_indexedlog_test_feel_free_to_delete_me_key ON public.cxgn_indexedlog_test_feel_free_to_delete_me USING btree (search_key, deleted);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx1 ON public.dbxref USING btree (db_id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx2 ON public.dbxref USING btree (accession);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx3 ON public.dbxref USING btree (version);


--
-- Name: dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxrefprop_idx1 ON public.dbxrefprop USING btree (dbxref_id);


--
-- Name: dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxrefprop_idx2 ON public.dbxrefprop USING btree (type_id);


--
-- Name: environment_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_cvterm_idx1 ON public.environment_cvterm USING btree (environment_id);


--
-- Name: environment_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_cvterm_idx2 ON public.environment_cvterm USING btree (cvterm_id);


--
-- Name: environment_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_idx1 ON public.environment USING btree (uniquename);


--
-- Name: feature_cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_dbxref_idx1 ON public.feature_cvterm_dbxref USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_dbxref_idx2 ON public.feature_cvterm_dbxref USING btree (dbxref_id);


--
-- Name: feature_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx1 ON public.feature_cvterm USING btree (feature_id);


--
-- Name: feature_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx2 ON public.feature_cvterm USING btree (cvterm_id);


--
-- Name: feature_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx3 ON public.feature_cvterm USING btree (pub_id);


--
-- Name: feature_cvterm_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_pub_idx1 ON public.feature_cvterm_pub USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_pub_idx2 ON public.feature_cvterm_pub USING btree (pub_id);


--
-- Name: feature_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvtermprop_idx1 ON public.feature_cvtermprop USING btree (feature_cvterm_id);


--
-- Name: feature_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvtermprop_idx2 ON public.feature_cvtermprop USING btree (type_id);


--
-- Name: feature_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_dbxref_idx1 ON public.feature_dbxref USING btree (feature_id);


--
-- Name: feature_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_dbxref_idx2 ON public.feature_dbxref USING btree (dbxref_id);


--
-- Name: feature_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_genotype_idx1 ON public.feature_genotype USING btree (feature_id);


--
-- Name: feature_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_genotype_idx2 ON public.feature_genotype USING btree (genotype_id);


--
-- Name: feature_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx1 ON public.feature USING btree (dbxref_id);


--
-- Name: feature_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx2 ON public.feature USING btree (organism_id);


--
-- Name: feature_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx3 ON public.feature USING btree (type_id);


--
-- Name: feature_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx4 ON public.feature USING btree (uniquename);


--
-- Name: feature_idx5; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx5 ON public.feature USING btree (lower((name)::text));


--
-- Name: feature_idx6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx6 ON public.feature USING btree (lower(uniquename));


--
-- Name: feature_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_name_ind1 ON public.feature USING btree (name);


--
-- Name: feature_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_pub_idx1 ON public.feature_pub USING btree (feature_id);


--
-- Name: feature_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_pub_idx2 ON public.feature_pub USING btree (pub_id);


--
-- Name: feature_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx1 ON public.feature_relationship USING btree (subject_id);


--
-- Name: feature_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx2 ON public.feature_relationship USING btree (object_id);


--
-- Name: feature_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx3 ON public.feature_relationship USING btree (type_id);


--
-- Name: feature_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_pub_idx1 ON public.feature_relationship_pub USING btree (feature_relationship_id);


--
-- Name: feature_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_pub_idx2 ON public.feature_relationship_pub USING btree (pub_id);


--
-- Name: feature_relationshipprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_idx1 ON public.feature_relationshipprop USING btree (feature_relationship_id);


--
-- Name: feature_relationshipprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_idx2 ON public.feature_relationshipprop USING btree (type_id);


--
-- Name: feature_relationshipprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_pub_idx1 ON public.feature_relationshipprop_pub USING btree (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_pub_idx2 ON public.feature_relationshipprop_pub USING btree (pub_id);


--
-- Name: feature_synonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx1 ON public.feature_synonym USING btree (synonym_id);


--
-- Name: feature_synonym_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx2 ON public.feature_synonym USING btree (feature_id);


--
-- Name: feature_synonym_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx3 ON public.feature_synonym USING btree (pub_id);


--
-- Name: featureloc_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx1 ON public.featureloc USING btree (feature_id);


--
-- Name: featureloc_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx2 ON public.featureloc USING btree (srcfeature_id);


--
-- Name: featureloc_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx3 ON public.featureloc USING btree (srcfeature_id, fmin, fmax);


--
-- Name: featureloc_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_pub_idx1 ON public.featureloc_pub USING btree (featureloc_id);


--
-- Name: featureloc_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_pub_idx2 ON public.featureloc_pub USING btree (pub_id);


--
-- Name: INDEX featureprop_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.featureprop_c1 IS 'for any one feature, multivalued
property-value pairs must be differentiated by rank';


--
-- Name: featureprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_idx1 ON public.featureprop USING btree (feature_id);


--
-- Name: featureprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_idx2 ON public.featureprop USING btree (type_id);


--
-- Name: featureprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_pub_idx1 ON public.featureprop_pub USING btree (featureprop_id);


--
-- Name: featureprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_pub_idx2 ON public.featureprop_pub USING btree (pub_id);


--
-- Name: fpc_band_fpc_fingerprint_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_band_fpc_fingerprint_id_idx1 ON public.fpc_band USING btree (fpc_fingerprint_id);


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_build_fpc_fingerprint_fpc_build_id_idx1 ON public.fpc_build_fpc_fingerprint USING btree (fpc_build_id);


--
-- Name: fpc_build_fpc_fingerprint_fpc_fingerprint_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_build_fpc_fingerprint_fpc_fingerprint_id_idx1 ON public.fpc_build_fpc_fingerprint USING btree (fpc_fingerprint_id);


--
-- Name: fpc_fingerprint_clone_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_clone_id_idx1 ON public.fpc_fingerprint USING btree (clone_id);


--
-- Name: fpc_fingerprint_enzyme_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_enzyme_id_idx1 ON public.fpc_fingerprint USING btree (enzyme_id);


--
-- Name: fpc_fingerprint_gel_name_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_gel_name_idx1 ON public.fpc_fingerprint USING btree (gel_name);


--
-- Name: genotype_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotype_id_idx ON public.materialized_genoview USING btree (genotype_id) WITH (fillfactor='100');


--
-- Name: genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotype_idx1 ON public.genotype USING btree (uniquename);


--
-- Name: genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotype_idx2 ON public.genotype USING btree (name);


--
-- Name: genotypeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotypeprop_idx1 ON public.genotypeprop USING btree (genotype_id);


--
-- Name: genotypeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotypeprop_idx2 ON public.genotypeprop USING btree (type_id);


--
-- Name: genotyping_protocol_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotyping_protocol_id_idx ON public.materialized_genoview USING btree (genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocols_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocols_idx ON public.genotyping_protocols USING btree (genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxlocations_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxlocations_idx ON public.genotyping_protocolsxlocations USING btree (genotyping_protocol_id, location_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxplants_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxplants_idx ON public.genotyping_protocolsxplants USING btree (genotyping_protocol_id, plant_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxplots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxplots_idx ON public.genotyping_protocolsxplots USING btree (genotyping_protocol_id, plot_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxseedlots_idx ON public.genotyping_protocolsxseedlots USING btree (genotyping_protocol_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxtrait_components_idx ON public.genotyping_protocolsxtrait_components USING btree (genotyping_protocol_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxtraits_idx ON public.genotyping_protocolsxtraits USING btree (genotyping_protocol_id, trait_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxtrial_designs_idx ON public.genotyping_protocolsxtrial_designs USING btree (genotyping_protocol_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxtrial_types_idx ON public.genotyping_protocolsxtrial_types USING btree (genotyping_protocol_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxtrials_idx ON public.genotyping_protocolsxtrials USING btree (genotyping_protocol_id, trial_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX genotyping_protocolsxyears_idx ON public.genotyping_protocolsxyears USING btree (genotyping_protocol_id, year_id) WITH (fillfactor='100');


--
-- Name: itag_loading_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX itag_loading_log_key ON public.itag_loading_log USING btree (search_key, deleted);


--
-- Name: location_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX location_id_idx ON public.materialized_phenoview USING btree (location_id) WITH (fillfactor='100');


--
-- Name: locations_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locations_idx ON public.locations USING btree (location_id) WITH (fillfactor='100');


--
-- Name: locationsxplants_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxplants_idx ON public.locationsxplants USING btree (location_id, plant_id) WITH (fillfactor='100');


--
-- Name: locationsxplots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxplots_idx ON public.locationsxplots USING btree (location_id, plot_id) WITH (fillfactor='100');


--
-- Name: locationsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxseedlots_idx ON public.locationsxseedlots USING btree (location_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: locationsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxtrait_components_idx ON public.locationsxtrait_components USING btree (location_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: locationsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxtraits_idx ON public.locationsxtraits USING btree (location_id, trait_id) WITH (fillfactor='100');


--
-- Name: locationsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxtrial_designs_idx ON public.locationsxtrial_designs USING btree (location_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: locationsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxtrial_types_idx ON public.locationsxtrial_types USING btree (location_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: locationsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxtrials_idx ON public.locationsxtrials USING btree (location_id, trial_id) WITH (fillfactor='100');


--
-- Name: locationsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX locationsxyears_idx ON public.locationsxyears USING btree (location_id, year_id) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_germplasm_stock_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX materialized_phenotype_jsonb_table_germplasm_stock_idx ON public.materialized_phenotype_jsonb_table USING btree (germplasm_stock_id) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_germplasm_uniquename_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX materialized_phenotype_jsonb_table_germplasm_uniquename_idx ON public.materialized_phenotype_jsonb_table USING btree (germplasm_uniquename) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_obsunit_stock_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX materialized_phenotype_jsonb_table_obsunit_stock_idx ON public.materialized_phenotype_jsonb_table USING btree (observationunit_stock_id) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_obsunit_uniquename_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX materialized_phenotype_jsonb_table_obsunit_uniquename_idx ON public.materialized_phenotype_jsonb_table USING btree (observationunit_uniquename) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_trial_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX materialized_phenotype_jsonb_table_trial_idx ON public.materialized_phenotype_jsonb_table USING btree (trial_id) WITH (fillfactor='100');


--
-- Name: materialized_phenotype_jsonb_table_trial_name_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX materialized_phenotype_jsonb_table_trial_name_idx ON public.materialized_phenotype_jsonb_table USING btree (trial_name) WITH (fillfactor='100');


--
-- Name: materialized_stockprop_stock_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX materialized_stockprop_stock_idx ON public.materialized_stockprop USING btree (stock_id) WITH (fillfactor='100');


--
-- Name: nd_experiment_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX nd_experiment_pub_idx1 ON public.nd_experiment_pub USING btree (nd_experiment_id);


--
-- Name: nd_experiment_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX nd_experiment_pub_idx2 ON public.nd_experiment_pub USING btree (pub_id);


--
-- Name: organism_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_dbxref_idx1 ON public.organism_dbxref USING btree (organism_id);


--
-- Name: organism_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_dbxref_idx2 ON public.organism_dbxref USING btree (dbxref_id);


--
-- Name: organism_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx1 ON public.organism_relationship USING btree (subject_id);


--
-- Name: organism_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx2 ON public.organism_relationship USING btree (object_id);


--
-- Name: organism_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx3 ON public.organism_relationship USING btree (type_id);


--
-- Name: organismpath_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx1 ON public.organismpath USING btree (type_id);


--
-- Name: organismpath_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx2 ON public.organismpath USING btree (subject_id);


--
-- Name: organismpath_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx3 ON public.organismpath USING btree (object_id);


--
-- Name: organismprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismprop_idx1 ON public.organismprop USING btree (organism_id);


--
-- Name: organismprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismprop_idx2 ON public.organismprop USING btree (type_id);


--
-- Name: phendesc_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx1 ON public.phendesc USING btree (genotype_id);


--
-- Name: phendesc_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx2 ON public.phendesc USING btree (environment_id);


--
-- Name: phendesc_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx3 ON public.phendesc USING btree (pub_id);


--
-- Name: phenotype_c1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX phenotype_c1 ON public.phenotype USING btree (uniquename);


--
-- Name: phenotype_comparison_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_cvterm_idx1 ON public.phenotype_comparison_cvterm USING btree (phenotype_comparison_id);


--
-- Name: phenotype_comparison_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_cvterm_idx2 ON public.phenotype_comparison_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_comparison_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx1 ON public.phenotype_comparison USING btree (genotype1_id);


--
-- Name: phenotype_comparison_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx2 ON public.phenotype_comparison USING btree (genotype2_id);


--
-- Name: phenotype_comparison_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx4 ON public.phenotype_comparison USING btree (pub_id);


--
-- Name: phenotype_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_cvterm_idx1 ON public.phenotype_cvterm USING btree (phenotype_id);


--
-- Name: phenotype_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_cvterm_idx2 ON public.phenotype_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx1 ON public.phenotype USING btree (cvalue_id);


--
-- Name: phenotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx2 ON public.phenotype USING btree (observable_id);


--
-- Name: phenotype_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx3 ON public.phenotype USING btree (attr_id);


--
-- Name: phenotypeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotypeprop_idx1 ON public.phenotypeprop USING btree (phenotype_id);


--
-- Name: phenotypeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotypeprop_idx2 ON public.phenotypeprop USING btree (type_id);


--
-- Name: phenstatement_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenstatement_idx1 ON public.phenstatement USING btree (genotype_id);


--
-- Name: phenstatement_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenstatement_idx2 ON public.phenstatement USING btree (phenotype_id);


--
-- Name: phylonode_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_dbxref_idx1 ON public.phylonode_dbxref USING btree (phylonode_id);


--
-- Name: phylonode_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_dbxref_idx2 ON public.phylonode_dbxref USING btree (dbxref_id);


--
-- Name: phylonode_feature_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_feature_id_idx ON public.phylonode USING btree (feature_id);


--
-- Name: phylonode_organism_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_organism_idx1 ON public.phylonode_organism USING btree (phylonode_id);


--
-- Name: phylonode_organism_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_organism_idx2 ON public.phylonode_organism USING btree (organism_id);


--
-- Name: phylonode_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_pub_idx1 ON public.phylonode_pub USING btree (phylonode_id);


--
-- Name: phylonode_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_pub_idx2 ON public.phylonode_pub USING btree (pub_id);


--
-- Name: phylonode_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx1 ON public.phylonode_relationship USING btree (subject_id);


--
-- Name: phylonode_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx2 ON public.phylonode_relationship USING btree (object_id);


--
-- Name: phylonode_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx3 ON public.phylonode_relationship USING btree (type_id);


--
-- Name: phylonodeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonodeprop_idx1 ON public.phylonodeprop USING btree (phylonode_id);


--
-- Name: phylonodeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonodeprop_idx2 ON public.phylonodeprop USING btree (type_id);


--
-- Name: phylotree_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_idx1 ON public.phylotree USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_pub_idx1 ON public.phylotree_pub USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_pub_idx2 ON public.phylotree_pub USING btree (pub_id);


--
-- Name: plants_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plants_idx ON public.plants USING btree (plant_id) WITH (fillfactor='100');


--
-- Name: plantsxplots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxplots_idx ON public.plantsxplots USING btree (plant_id, plot_id) WITH (fillfactor='100');


--
-- Name: plantsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxseedlots_idx ON public.plantsxseedlots USING btree (plant_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: plantsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxtrait_components_idx ON public.plantsxtrait_components USING btree (plant_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: plantsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxtraits_idx ON public.plantsxtraits USING btree (plant_id, trait_id) WITH (fillfactor='100');


--
-- Name: plantsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxtrial_designs_idx ON public.plantsxtrial_designs USING btree (plant_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: plantsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxtrial_types_idx ON public.plantsxtrial_types USING btree (plant_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: plantsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxtrials_idx ON public.plantsxtrials USING btree (plant_id, trial_id) WITH (fillfactor='100');


--
-- Name: plantsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plantsxyears_idx ON public.plantsxyears USING btree (plant_id, year_id) WITH (fillfactor='100');


--
-- Name: plots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plots_idx ON public.plots USING btree (plot_id) WITH (fillfactor='100');


--
-- Name: plotsxseedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxseedlots_idx ON public.plotsxseedlots USING btree (plot_id, seedlot_id) WITH (fillfactor='100');


--
-- Name: plotsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxtrait_components_idx ON public.plotsxtrait_components USING btree (plot_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: plotsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxtraits_idx ON public.plotsxtraits USING btree (plot_id, trait_id) WITH (fillfactor='100');


--
-- Name: plotsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxtrial_designs_idx ON public.plotsxtrial_designs USING btree (plot_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: plotsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxtrial_types_idx ON public.plotsxtrial_types USING btree (plot_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: plotsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxtrials_idx ON public.plotsxtrials USING btree (plot_id, trial_id) WITH (fillfactor='100');


--
-- Name: plotsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX plotsxyears_idx ON public.plotsxyears USING btree (plot_id, year_id) WITH (fillfactor='100');


--
-- Name: project_contact_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_contact_idx1 ON public.project_contact USING btree (project_id);


--
-- Name: project_contact_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_contact_idx2 ON public.project_contact USING btree (contact_id);


--
-- Name: project_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_pub_idx1 ON public.project_pub USING btree (project_id);


--
-- Name: project_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_pub_idx2 ON public.project_pub USING btree (pub_id);


--
-- Name: pub_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_dbxref_idx1 ON public.pub_dbxref USING btree (pub_id);


--
-- Name: pub_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_dbxref_idx2 ON public.pub_dbxref USING btree (dbxref_id);


--
-- Name: pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_idx1 ON public.pub USING btree (type_id);


--
-- Name: pub_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx1 ON public.pub_relationship USING btree (subject_id);


--
-- Name: pub_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx2 ON public.pub_relationship USING btree (object_id);


--
-- Name: pub_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx3 ON public.pub_relationship USING btree (type_id);


--
-- Name: pubabstract_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubabstract_index ON public.pubabstract USING gist (abstract_tsvector);


--
-- Name: pubauthor_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubauthor_idx2 ON public.pubauthor USING btree (pub_id);


--
-- Name: pubprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubprop_idx1 ON public.pubprop USING btree (pub_id);


--
-- Name: pubprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubprop_idx2 ON public.pubprop USING btree (type_id);


--
-- Name: seedlot_id_pheno_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX seedlot_id_pheno_idx ON public.materialized_phenoview USING btree (seedlot_id) WITH (fillfactor='100');


--
-- Name: seedlots_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlots_idx ON public.seedlots USING btree (seedlot_id) WITH (fillfactor='100');


--
-- Name: seedlotsxtrait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxtrait_components_idx ON public.seedlotsxtrait_components USING btree (seedlot_id, trait_component_id) WITH (fillfactor='100');


--
-- Name: seedlotsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxtraits_idx ON public.seedlotsxtraits USING btree (seedlot_id, trait_id) WITH (fillfactor='100');


--
-- Name: seedlotsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxtrial_designs_idx ON public.seedlotsxtrial_designs USING btree (seedlot_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: seedlotsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxtrial_types_idx ON public.seedlotsxtrial_types USING btree (seedlot_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: seedlotsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxtrials_idx ON public.seedlotsxtrials USING btree (seedlot_id, trial_id) WITH (fillfactor='100');


--
-- Name: seedlotsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX seedlotsxyears_idx ON public.seedlotsxyears USING btree (seedlot_id, year_id) WITH (fillfactor='100');


--
-- Name: stock_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx1 ON public.stock_cvterm USING btree (stock_id);


--
-- Name: stock_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx2 ON public.stock_cvterm USING btree (cvterm_id);


--
-- Name: stock_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx3 ON public.stock_cvterm USING btree (pub_id);


--
-- Name: stock_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvtermprop_idx1 ON public.stock_cvtermprop USING btree (stock_cvterm_id);


--
-- Name: stock_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvtermprop_idx2 ON public.stock_cvtermprop USING btree (type_id);


--
-- Name: stock_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxref_idx1 ON public.stock_dbxref USING btree (stock_id);


--
-- Name: stock_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxref_idx2 ON public.stock_dbxref USING btree (dbxref_id);


--
-- Name: stock_dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxrefprop_idx1 ON public.stock_dbxrefprop USING btree (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxrefprop_idx2 ON public.stock_dbxrefprop USING btree (type_id);


--
-- Name: stock_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_genotype_idx1 ON public.stock_genotype USING btree (stock_id);


--
-- Name: stock_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_genotype_idx2 ON public.stock_genotype USING btree (genotype_id);


--
-- Name: stock_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_id_idx ON public.materialized_phenoview USING btree (stock_id) WITH (fillfactor='100');


--
-- Name: stock_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx1 ON public.stock USING btree (dbxref_id);


--
-- Name: stock_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx2 ON public.stock USING btree (organism_id);


--
-- Name: stock_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx3 ON public.stock USING btree (type_id);


--
-- Name: stock_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx4 ON public.stock USING btree (uniquename);


--
-- Name: stock_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_name_ind1 ON public.stock USING btree (name);


--
-- Name: stock_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_pub_idx1 ON public.stock_pub USING btree (stock_id);


--
-- Name: stock_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_pub_idx2 ON public.stock_pub USING btree (pub_id);


--
-- Name: stock_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx1 ON public.stock_relationship USING btree (subject_id);


--
-- Name: stock_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx2 ON public.stock_relationship USING btree (object_id);


--
-- Name: stock_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx3 ON public.stock_relationship USING btree (type_id);


--
-- Name: stock_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_pub_idx1 ON public.stock_relationship_pub USING btree (stock_relationship_id);


--
-- Name: stock_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_pub_idx2 ON public.stock_relationship_pub USING btree (pub_id);


--
-- Name: stockcollection_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx1 ON public.stockcollection USING btree (contact_id);


--
-- Name: stockcollection_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx2 ON public.stockcollection USING btree (type_id);


--
-- Name: stockcollection_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx3 ON public.stockcollection USING btree (uniquename);


--
-- Name: stockcollection_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_name_ind1 ON public.stockcollection USING btree (name);


--
-- Name: stockcollection_stock_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_stock_idx1 ON public.stockcollection_stock USING btree (stockcollection_id);


--
-- Name: stockcollection_stock_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_stock_idx2 ON public.stockcollection_stock USING btree (stock_id);


--
-- Name: stockcollectionprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollectionprop_idx1 ON public.stockcollectionprop USING btree (stockcollection_id);


--
-- Name: stockcollectionprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollectionprop_idx2 ON public.stockcollectionprop USING btree (type_id);


--
-- Name: stockprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_idx1 ON public.stockprop USING btree (stock_id);


--
-- Name: stockprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_idx2 ON public.stockprop USING btree (type_id);


--
-- Name: stockprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_pub_idx1 ON public.stockprop_pub USING btree (stockprop_id);


--
-- Name: stockprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_pub_idx2 ON public.stockprop_pub USING btree (pub_id);


--
-- Name: stockprop_sgn_allele_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_sgn_allele_id ON public.stockprop USING btree (((value)::numeric)) WHERE (type_id = 57425);


--
-- Name: synonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX synonym_idx1 ON public.synonym USING btree (type_id);


--
-- Name: synonym_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX synonym_idx2 ON public.synonym USING btree (lower((synonym_sgml)::text));


--
-- Name: tmp_cds_handler_fmax; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_fmax ON public.tmp_cds_handler USING btree (fmax);


--
-- Name: tmp_cds_handler_relationship_grandparent; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_relationship_grandparent ON public.tmp_cds_handler_relationship USING btree (grandparent_id);


--
-- Name: tmp_cds_handler_seq_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_seq_id ON public.tmp_cds_handler USING btree (seq_id);


--
-- Name: tmp_gff_load_cache_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx1 ON public.tmp_gff_load_cache USING btree (feature_id);


--
-- Name: tmp_gff_load_cache_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx2 ON public.tmp_gff_load_cache USING btree (uniquename);


--
-- Name: tmp_gff_load_cache_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx3 ON public.tmp_gff_load_cache USING btree (uniquename, type_id, organism_id);


--
-- Name: trait_components_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_components_idx ON public.trait_components USING btree (trait_component_id) WITH (fillfactor='100');


--
-- Name: trait_componentsxtraits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_componentsxtraits_idx ON public.trait_componentsxtraits USING btree (trait_component_id, trait_id) WITH (fillfactor='100');


--
-- Name: trait_componentsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_componentsxtrial_designs_idx ON public.trait_componentsxtrial_designs USING btree (trait_component_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: trait_componentsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_componentsxtrial_types_idx ON public.trait_componentsxtrial_types USING btree (trait_component_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: trait_componentsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_componentsxtrials_idx ON public.trait_componentsxtrials USING btree (trait_component_id, trial_id) WITH (fillfactor='100');


--
-- Name: trait_componentsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trait_componentsxyears_idx ON public.trait_componentsxyears USING btree (trait_component_id, year_id) WITH (fillfactor='100');


--
-- Name: traits_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX traits_idx ON public.traits USING btree (trait_id) WITH (fillfactor='100');


--
-- Name: traitsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX traitsxtrial_designs_idx ON public.traitsxtrial_designs USING btree (trait_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: traitsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX traitsxtrial_types_idx ON public.traitsxtrial_types USING btree (trait_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: traitsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX traitsxtrials_idx ON public.traitsxtrials USING btree (trait_id, trial_id) WITH (fillfactor='100');


--
-- Name: traitsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX traitsxyears_idx ON public.traitsxyears USING btree (trait_id, year_id) WITH (fillfactor='100');


--
-- Name: trial_designs_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_designs_idx ON public.trial_designs USING btree (trial_design_id) WITH (fillfactor='100');


--
-- Name: trial_designsxtrial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_designsxtrial_types_idx ON public.trial_designsxtrial_types USING btree (trial_design_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_designsxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_designsxtrials_idx ON public.trial_designsxtrials USING btree (trial_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: trial_designsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_designsxyears_idx ON public.trial_designsxyears USING btree (trial_design_id, year_id) WITH (fillfactor='100');


--
-- Name: trial_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX trial_id_idx ON public.materialized_phenoview USING btree (trial_id) WITH (fillfactor='100');


--
-- Name: trial_types_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_types_idx ON public.trial_types USING btree (trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_typesxtrials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_typesxtrials_idx ON public.trial_typesxtrials USING btree (trial_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_typesxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trial_typesxyears_idx ON public.trial_typesxyears USING btree (trial_type_id, year_id) WITH (fillfactor='100');


--
-- Name: trials_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trials_idx ON public.trials USING btree (trial_id) WITH (fillfactor='100');


--
-- Name: trialsxyears_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX trialsxyears_idx ON public.trialsxyears USING btree (trial_id, year_id) WITH (fillfactor='100');


--
-- Name: unigene_relations_superceded_by; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX unigene_relations_superceded_by ON public.unigene_relations USING btree (superceded_by);


--
-- Name: unq_geno_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unq_geno_idx ON public.materialized_genoview USING btree (accession_id, genotype_id) WITH (fillfactor='100');


--
-- Name: unq_pheno_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unq_pheno_idx ON public.materialized_phenoview USING btree (stock_id, phenotype_id, trait_id) WITH (fillfactor='100');


--
-- Name: year_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX year_id_idx ON public.materialized_phenoview USING btree (year_id) WITH (fillfactor='100');


--
-- Name: years_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX years_idx ON public.years USING btree (year_id) WITH (fillfactor='100');


--
-- Name: annotation_target_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX annotation_target_id_idx ON sgn.manual_annotations USING btree (annotation_target_id, annotation_target_type_id);


--
-- Name: apply_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX apply_id_idx ON sgn.blast_annotations USING btree (apply_id);


--
-- Name: blast_annotation_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX blast_annotation_id_idx ON sgn.blast_hits USING btree (blast_annotation_id);


--
-- Name: blast_defline_defline_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX blast_defline_defline_fulltext_index ON sgn.blast_defline USING gist (defline_fulltext);


--
-- Name: build_nr_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX build_nr_idx ON sgn.unigene_build USING btree (build_nr);


--
-- Name: cds_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_id_idx ON sgn.domain_match USING btree (cds_id);


--
-- Name: cds_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_id_idx2 ON sgn.family_member USING btree (cds_id);


--
-- Name: cds_protein_feature_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_protein_feature_id_idx ON sgn.cds USING btree (protein_feature_id);


--
-- Name: clone_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_group_id_idx ON sgn.clone USING btree (clone_group_id);


--
-- Name: clone_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_id_idx ON sgn.microarray USING btree (clone_id);


--
-- Name: clone_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_id_idx2 ON sgn.seqread USING btree (clone_id);


--
-- Name: clone_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_name_idx ON sgn.clone USING btree (clone_name);


--
-- Name: cluster_no_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cluster_no_2_idx ON sgn.unigene USING btree (cluster_no, contig_no);


--
-- Name: cluster_no_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cluster_no_idx ON sgn.unigene USING btree (cluster_no);


--
-- Name: common_name_common_name_case_insensitive_unique; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE UNIQUE INDEX common_name_common_name_case_insensitive_unique ON sgn.common_name USING btree (lower((common_name)::text));


--
-- Name: confidence_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX confidence_name_idx ON sgn.deprecated_marker_confidences USING btree (confidence_name, legacy_conf_id);


--
-- Name: consensi_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX consensi_id_idx ON sgn.unigene USING btree (consensi_id);


--
-- Name: content_specific_tag_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX content_specific_tag_idx ON sgn.microarray USING btree (content_specific_tag);


--
-- Name: current_tc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX current_tc_id_idx ON sgn.tigrtc_tracking USING btree (current_tc_id);


--
-- Name: defline_annotation_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX defline_annotation_idx ON sgn.blast_hits USING btree (defline_id, blast_annotation_id);


--
-- Name: defline_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX defline_id_idx ON sgn.blast_hits USING btree (defline_id);


--
-- Name: domain_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX domain_id_idx ON sgn.domain_match USING btree (domain_id);


--
-- Name: enzyme_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX enzyme_name_idx ON sgn.enzymes USING btree (enzyme_name);


--
-- Name: est_dbxref_idx1; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_dbxref_idx1 ON sgn.est_dbxref USING btree (est_id);


--
-- Name: est_dbxref_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_dbxref_idx2 ON sgn.est_dbxref USING btree (dbxref_id);


--
-- Name: est_id_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_2_idx ON sgn.qc_report USING btree (est_id, hqi_start, hqi_length);


--
-- Name: est_id_2_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_2_idx2 ON sgn.trim_feature USING btree (est_id, type);


--
-- Name: est_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_idx ON sgn.trim_feature USING btree (est_id);


--
-- Name: est_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_idx2 ON sgn.unigene_member USING btree (est_id);


--
-- Name: evalue_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX evalue_idx ON sgn.blast_hits USING btree (evalue);


--
-- Name: family_build_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX family_build_id_idx ON sgn.family USING btree (family_build_id);


--
-- Name: family_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX family_id_idx ON sgn.family_member USING btree (family_id);


--
-- Name: flags_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX flags_2_idx ON sgn.est USING btree (flags, status);


--
-- Name: flags_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX flags_idx ON sgn.est USING btree (flags);


--
-- Name: go_accession_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX go_accession_idx ON sgn.go USING btree (go_accession);


--
-- Name: go_accession_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX go_accession_idx2 ON sgn.interpro_go USING btree (go_accession);


--
-- Name: group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX group_id_idx ON sgn.family_build USING btree (group_id);


--
-- Name: group_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX group_id_idx2 ON sgn.group_linkage USING btree (group_id);


--
-- Name: il_info_lg_name; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_lg_name ON sgn.il_info USING btree (lg_name);


--
-- Name: il_info_map_id; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_map_id ON sgn.il_info USING btree (map_id);


--
-- Name: il_info_population_id; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_population_id ON sgn.il_info USING btree (population_id);


--
-- Name: internal_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX internal_id_idx ON sgn.id_linkage USING btree (internal_id);


--
-- Name: interpro_accession_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_accession_idx ON sgn.interpro USING btree (interpro_accession);


--
-- Name: interpro_accession_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_accession_idx2 ON sgn.interpro_go USING btree (interpro_accession);


--
-- Name: interpro_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_id_idx ON sgn.domain USING btree (interpro_id);


--
-- Name: legacy_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX legacy_id_idx ON sgn.deprecated_maps USING btree (legacy_id);


--
-- Name: library_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX library_id_idx ON sgn.clone USING btree (library_id);


--
-- Name: link_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX link_id_idx ON sgn.id_linkage USING btree (link_id);


--
-- Name: manual_annotations_annotation_text_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX manual_annotations_annotation_text_fulltext_index ON sgn.manual_annotations USING gist (annotation_text_fulltext);


--
-- Name: map_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX map_id_idx ON sgn.deprecated_map_cross USING btree (map_id, organism_id);


--
-- Name: map_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX map_id_idx2 ON sgn.deprecated_mapdata USING btree (map_id, lg_id);


--
-- Name: marker_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx ON sgn.cos_markers USING btree (marker_id, cos_id);


--
-- Name: marker_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx2 ON sgn.cosii_ortholog USING btree (marker_id, unigene_id);


--
-- Name: marker_id_idx3; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx3 ON sgn.ests_mapped_by_clone USING btree (marker_id, clone_id);


--
-- Name: marker_id_idx4; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx4 ON sgn.deprecated_marker_locations USING btree (marker_id, loc_id);


--
-- Name: marker_id_idx5; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx5 ON sgn.p_markers USING btree (marker_id, est_clone_id, p_mrkr_name);


--
-- Name: marker_id_idx6; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx6 ON sgn.pcr_experiment USING btree (marker_id, experiment_type_id);


--
-- Name: marker_id_idx7; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx7 ON sgn.ssr USING btree (marker_id, ssr_name);


--
-- Name: marker_id_idx8; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx8 ON sgn.tm_markers USING btree (marker_id, tm_name, old_cos_id);


--
-- Name: marker_type_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_type_idx ON sgn.deprecated_markers USING btree (marker_type, marker_name);


--
-- Name: member_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX member_id_idx ON sgn.group_linkage USING btree (member_id);


--
-- Name: metadata_id_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX metadata_id_index ON sgn.metadata USING btree (metadata_id);


--
-- Name: method_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX method_id_idx ON sgn.domain USING btree (method_id);


--
-- Name: method_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX method_idx ON sgn.cds USING btree (method);


--
-- Name: misc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX misc_id_idx ON sgn.misc USING btree (misc_id);


--
-- Name: organism_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_group_id_idx ON sgn.family_member USING btree (organism_group_id);


--
-- Name: organism_group_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_group_id_idx2 ON sgn.unigene_build USING btree (organism_group_id);


--
-- Name: organism_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_id_idx ON sgn.library USING btree (organism_id);


--
-- Name: pcr_exp_accession_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX pcr_exp_accession_id_idx ON sgn.pcr_product USING btree (pcr_exp_accession_id);


--
-- Name: pcr_experiment_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX pcr_experiment_id_idx ON sgn.pcr_exp_accession USING btree (pcr_experiment_id);


--
-- Name: preferred_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX preferred_idx ON sgn.cds USING btree (preferred);


--
-- Name: read_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX read_id_idx ON sgn.est USING btree (read_id);


--
-- Name: read_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX read_id_idx2 ON sgn.tigrtc_membership USING btree (read_id);


--
-- Name: rflp_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rflp_name_idx ON sgn.rflp_markers USING btree (rflp_name, marker_id, library_name, marker_prefix, vector, cutting_site);


--
-- Name: rflp_seq_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rflp_seq_id_idx ON sgn.rflp_unigene_associations USING btree (rflp_seq_id, unigene_id, align_length);


--
-- Name: rsi_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rsi_idx ON sgn.est USING btree (status, flags, est_id);


--
-- Name: run_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX run_id_idx ON sgn.cds USING btree (run_id);


--
-- Name: run_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX run_id_idx2 ON sgn.domain_match USING btree (run_id);


--
-- Name: score_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX score_idx ON sgn.blast_hits USING btree (score);


--
-- Name: sgn_domain_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_domain_description_fulltext_index ON sgn.domain USING gist (description_fulltext);


--
-- Name: sgn_go_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_go_description_fulltext_index ON sgn.go USING gist (description_fulltext);


--
-- Name: sgn_interpro_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_interpro_description_fulltext_index ON sgn.interpro USING gist (description_fulltext);


--
-- Name: sgn_linkage_group_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_linkage_group_name_idx ON sgn.linkage_group USING btree (lg_name);


--
-- Name: source_data_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX source_data_group_id_idx ON sgn.unigene_build USING btree (source_data_group_id);


--
-- Name: spot_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX spot_id_idx ON sgn.microarray USING btree (spot_id);


--
-- Name: ssr_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX ssr_id_idx ON sgn.ssr_primer_unigene_matches USING btree (ssr_id, unigene_id, primer_direction, match_length, e_value);


--
-- Name: ssr_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX ssr_id_idx2 ON sgn.ssr_repeats USING btree (ssr_id);


--
-- Name: status_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX status_idx ON sgn.est USING btree (status);


--
-- Name: submit_user_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX submit_user_id_idx ON sgn.facility USING btree (submit_user_id);


--
-- Name: submit_user_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX submit_user_id_idx2 ON sgn.library USING btree (submit_user_id);


--
-- Name: target_db_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX target_db_id_idx ON sgn.blast_defline USING btree (target_db_id);


--
-- Name: tc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX tc_id_idx ON sgn.tigrtc_membership USING btree (tc_id);


--
-- Name: tc_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX tc_id_idx2 ON sgn.tigrtc_tracking USING btree (tc_id);


--
-- Name: trace_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX trace_name_idx ON sgn.seqread USING btree (trace_name);


--
-- Name: type_code_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_code_idx ON sgn.loc_types USING btree (type_code);


--
-- Name: type_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_name_idx ON sgn.annotation_target_type USING btree (type_name);


--
-- Name: type_name_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_name_idx2 ON sgn.deprecated_marker_types USING btree (type_name);


--
-- Name: unigene_build_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_build_id_idx ON sgn.unigene USING btree (unigene_build_id, cluster_no);


--
-- Name: unigene_id_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_2_idx ON sgn.unigene_member USING btree (unigene_id, est_id);


--
-- Name: unigene_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx ON sgn.cds USING btree (unigene_id);


--
-- Name: unigene_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx2 ON sgn.domain_match USING btree (unigene_id);


--
-- Name: unigene_id_idx3; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx3 ON sgn.unigene_member USING btree (unigene_id);


--
-- Name: unigene_sequence_name; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_sequence_name ON sgn.unigene USING btree (sequence_name);


--
-- Name: username_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX username_idx ON sgn.submit_user USING btree (username);


--
-- Name: bac_status_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX bac_status_idx ON sgn_people.bac_status USING btree (bac_id, status);


--
-- Name: country_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX country_idx ON sgn_people.sp_person USING btree (country);


--
-- Name: name_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX name_idx ON sgn_people.sp_person USING btree (last_name, first_name);


--
-- Name: organization_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX organization_idx ON sgn_people.sp_person USING btree (organization);


--
-- Name: private_email_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX private_email_idx ON sgn_people.sp_login_old USING btree (private_email);


--
-- Name: sp_user_id_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX sp_user_id_idx ON sgn_people.sp_papers USING btree (person_id);


--
-- Name: sp_user_id_idx2; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX sp_user_id_idx2 ON sgn_people.sp_person_organisms USING btree (sp_person_id);


--
-- Name: status_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX status_idx ON sgn_people.bac_status USING btree (status);


--
-- Name: clone_name_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX clone_name_idx ON sgn_submit.seqread USING btree (clone_name);


--
-- Name: facility_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX facility_id_idx ON sgn_submit.seqread USING btree (facility_id);


--
-- Name: library_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX library_id_idx ON sgn_submit.seqread USING btree (library_id);


--
-- Name: location_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX location_idx ON sgn_submit.seqread USING btree (location);


--
-- Name: organism_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX organism_id_idx ON sgn_submit.library USING btree (organism_id);


--
-- Name: submit_user_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX submit_user_id_idx ON sgn_submit.facility USING btree (submit_user_id);


--
-- Name: submit_user_id_idx2; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX submit_user_id_idx2 ON sgn_submit.library USING btree (submit_user_id);


--
-- Name: trace_name_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX trace_name_idx ON sgn_submit.seqread USING btree (trace_name);


--
-- Name: username_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX username_idx ON sgn_submit.submit_user USING btree (username);


--
-- Name: fattribute_to_feature_fid; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fattribute_to_feature_fid ON tomato_gff.fattribute_to_feature USING btree (fid, fattribute_id);


--
-- Name: fdata_fref_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_fref_idx ON tomato_gff.fdata USING btree (fref, fbin, fstart, fstop, ftypeid, gid);


--
-- Name: fdata_ftypeid_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_ftypeid_idx ON tomato_gff.fdata USING btree (ftypeid);


--
-- Name: fdata_gid_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_gid_idx ON tomato_gff.fdata USING btree (gid);


--
-- Name: fgroup_gclass_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE UNIQUE INDEX fgroup_gclass_idx ON tomato_gff.fgroup USING btree (gclass, gname);


--
-- Name: ftype_fmethod_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX ftype_fmethod_idx ON tomato_gff.ftype USING btree (fmethod);


--
-- Name: ftype_fsource_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX ftype_fsource_idx ON tomato_gff.ftype USING btree (fsource);


--
-- Name: ftype_ftype_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE UNIQUE INDEX ftype_ftype_idx ON tomato_gff.ftype USING btree (fmethod, fsource);


--
-- Name: blast_defline blast_defline_identifier_defline_fulltext_trigger; Type: TRIGGER; Schema: genomic; Owner: postgres
--

CREATE TRIGGER blast_defline_identifier_defline_fulltext_trigger BEFORE INSERT OR UPDATE ON genomic.blast_defline FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('identifier_defline_fulltext', 'pg_catalog.english', 'identifier', 'defline');


--
-- Name: pubabstract abstract_tsvector_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER abstract_tsvector_trigger BEFORE INSERT OR UPDATE ON public.pubabstract FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('abstract_tsvector', 'pg_catalog.english', 'abstract');


--
-- Name: pub title_tsvector_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER title_tsvector_trigger BEFORE INSERT OR UPDATE ON public.pub FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('title_tsvector', 'pg_catalog.english', 'title');


--
-- Name: blast_defline blast_defline_defline_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER blast_defline_defline_fulltext_trigger BEFORE INSERT OR UPDATE ON sgn.blast_defline FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('defline_fulltext', 'pg_catalog.english', 'defline');


--
-- Name: domain domain_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER domain_description_fulltext_trigger BEFORE INSERT OR UPDATE ON sgn.domain FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: go go_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER go_description_fulltext_trigger BEFORE INSERT OR UPDATE ON sgn.go FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: interpro interpro_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER interpro_description_fulltext_trigger BEFORE INSERT OR UPDATE ON sgn.interpro FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: manual_annotations manual_annotations_annotation_text_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER manual_annotations_annotation_text_fulltext_trigger BEFORE INSERT OR UPDATE ON sgn.manual_annotations FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('annotation_text_fulltext', 'pg_catalog.english', 'annotation_text');


--
-- Name: seq clone_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) MATCH FULL;


--
-- Name: annotation person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.annotation
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: comp_analysis person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comp_analysis
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: comment person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.comment
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: feature_set person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.feature_set
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: seq person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation.seq
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bs_protocol bs_protocol_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol
    ADD CONSTRAINT bs_protocol_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_pub bs_protocol_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_pub bs_protocol_pub_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: bs_protocol_pub bs_protocol_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_protocol_step_dbxref bs_protocol_step_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_protocol_step_dbxref bs_protocol_step_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_step_dbxref bs_protocol_step_dbxref_protocol_step_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_protocol_step_id_fkey FOREIGN KEY (protocol_step_id) REFERENCES biosource.bs_protocol_step(protocol_step_id);


--
-- Name: bs_protocol_step bs_protocol_step_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_step bs_protocol_step_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: bs_protocol_step bs_protocol_step_tool_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES biosource.bs_tool(tool_id);


--
-- Name: bs_sample bs_sample_contact_id_order_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_contact_id_order_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bs_sample_cvterm bs_sample_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample_cvterm bs_sample_cvterm_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_cvterm bs_sample_cvterm_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_dbxref bs_sample_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_sample_dbxref bs_sample_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_dbxref bs_sample_dbxref_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_element_cvterm bs_sample_element_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample_element_cvterm bs_sample_element_cvterm_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_cvterm bs_sample_element_cvterm_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES biosource.bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_dbxref bs_sample_element_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_sample_element_dbxref bs_sample_element_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_dbxref bs_sample_element_dbxref_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES biosource.bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_file bs_sample_element_file_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_sample_element_file bs_sample_element_file_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_file bs_sample_element_file_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES biosource.bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element bs_sample_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element
    ADD CONSTRAINT bs_sample_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element bs_sample_element_organism_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element
    ADD CONSTRAINT bs_sample_element_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: bs_sample_element bs_sample_element_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element
    ADD CONSTRAINT bs_sample_element_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: bs_sample_element_relation bs_sample_element_relation_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_relation bs_sample_element_relation_sample_element_id_a_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_sample_element_id_a_fkey FOREIGN KEY (sample_element_id_a) REFERENCES biosource.bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_relation bs_sample_element_relation_sample_element_id_b_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_sample_element_id_b_fkey FOREIGN KEY (sample_element_id_b) REFERENCES biosource.bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element bs_sample_element_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_element
    ADD CONSTRAINT bs_sample_element_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_file bs_sample_file_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_file
    ADD CONSTRAINT bs_sample_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_sample_file bs_sample_file_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_file
    ADD CONSTRAINT bs_sample_file_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_file bs_sample_file_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_file
    ADD CONSTRAINT bs_sample_file_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample bs_sample_metadata_id_order_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_metadata_id_order_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample bs_sample_organism_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: bs_sample bs_sample_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: bs_sample_pub bs_sample_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_pub bs_sample_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_sample_pub bs_sample_pub_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_relationship bs_sample_relationship_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_relationship bs_sample_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_relationship bs_sample_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: bs_sample_relationship bs_sample_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample bs_sample_type_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_sample
    ADD CONSTRAINT bs_sample_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_tool bs_tool_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool
    ADD CONSTRAINT bs_tool_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_tool bs_tool_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool
    ADD CONSTRAINT bs_tool_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_tool_pub bs_tool_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_tool_pub bs_tool_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_tool_pub bs_tool_pub_tool_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY biosource.bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES biosource.bs_tool(tool_id);


--
-- Name: ge_cluster_analysis ge_cluster_analysis_correlation_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_correlation_analysis_id_fkey FOREIGN KEY (correlation_analysis_id) REFERENCES gem.ge_correlation_analysis(correlation_analysis_id);


--
-- Name: ge_cluster_analysis ge_cluster_analysis_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES gem.ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_cluster_analysis ge_cluster_analysis_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_cluster_analysis ge_cluster_analysis_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_cluster_member ge_cluster_member_cluster_profile_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_cluster_profile_id_fkey FOREIGN KEY (cluster_profile_id) REFERENCES gem.ge_cluster_profile(cluster_profile_id);


--
-- Name: ge_cluster_member ge_cluster_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_cluster_member ge_cluster_member_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_cluster_profile ge_cluster_profile_cluster_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_cluster_analysis_id_fkey FOREIGN KEY (cluster_analysis_id) REFERENCES gem.ge_cluster_analysis(cluster_analysis_id);


--
-- Name: ge_cluster_profile ge_cluster_profile_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_cluster_profile ge_cluster_profile_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_analysis ge_correlation_analysis_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES gem.ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_correlation_analysis ge_correlation_analysis_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_member ge_correlation_member_correlation_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_correlation_analysis_id_fkey FOREIGN KEY (correlation_analysis_id) REFERENCES gem.ge_correlation_analysis(correlation_analysis_id);


--
-- Name: ge_correlation_member ge_correlation_member_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_correlation_member ge_correlation_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_member ge_correlation_member_template_a_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_template_a_id_fkey FOREIGN KEY (template_a_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_correlation_member ge_correlation_member_template_b_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_template_b_id_fkey FOREIGN KEY (template_b_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_result_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_result_dataset_id_fkey FOREIGN KEY (result_dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_source_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_source_dataset_id_fkey FOREIGN KEY (source_dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_data_analysis_process ge_data_analysis_process_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_target_id_fkey FOREIGN KEY (target_id) REFERENCES gem.ge_target(target_id);


--
-- Name: ge_diff_expression ge_diff_expression_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES gem.ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_diff_expression ge_diff_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_analysis_group ge_experiment_analysis_group_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_group
    ADD CONSTRAINT ge_experiment_analysis_group_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_analysis_member ge_experiment_analysis_member_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES gem.ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_experiment_analysis_member ge_experiment_analysis_member_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES gem.ge_experiment(experiment_id);


--
-- Name: ge_experiment_analysis_member ge_experiment_analysis_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment ge_experiment_contact_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment
    ADD CONSTRAINT ge_experiment_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: ge_experiment_dbxref ge_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_experiment_dbxref ge_experiment_dbxref_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES gem.ge_experiment(experiment_id);


--
-- Name: ge_experiment_dbxref ge_experiment_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment ge_experiment_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment
    ADD CONSTRAINT ge_experiment_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES gem.ge_experimental_design(experimental_design_id);


--
-- Name: ge_experiment ge_experiment_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experiment
    ADD CONSTRAINT ge_experiment_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_dbxref ge_experimental_design_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_experimental_design_dbxref ge_experimental_design_dbxref_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES gem.ge_experimental_design(experimental_design_id);


--
-- Name: ge_experimental_design_dbxref ge_experimental_design_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design ge_experimental_design_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design
    ADD CONSTRAINT ge_experimental_design_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_pub ge_experimental_design_pub_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES gem.ge_experimental_design(experimental_design_id);


--
-- Name: ge_experimental_design_pub ge_experimental_design_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_pub ge_experimental_design_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: ge_expression_by_experiment ge_expression_by_experiment_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_expression_by_experiment ge_expression_by_experiment_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES gem.ge_experiment(experiment_id);


--
-- Name: ge_expression_by_experiment ge_expression_by_experiment_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_expression_by_experiment ge_expression_by_experiment_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_hybridization_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_hybridization_id_fkey FOREIGN KEY (hybridization_id) REFERENCES gem.ge_hybridization(hybridization_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_fluorescanning ge_fluorescanning_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_hybridization ge_hybridization_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization
    ADD CONSTRAINT ge_hybridization_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_hybridization ge_hybridization_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization
    ADD CONSTRAINT ge_hybridization_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: ge_hybridization ge_hybridization_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization
    ADD CONSTRAINT ge_hybridization_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_hybridization ge_hybridization_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_hybridization
    ADD CONSTRAINT ge_hybridization_target_id_fkey FOREIGN KEY (target_id) REFERENCES gem.ge_target(target_id);


--
-- Name: ge_platform ge_platform_contact_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform
    ADD CONSTRAINT ge_platform_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: ge_platform_dbxref ge_platform_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_platform_dbxref ge_platform_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_dbxref ge_platform_dbxref_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: ge_platform_design ge_platform_design_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_design
    ADD CONSTRAINT ge_platform_design_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_design ge_platform_design_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_design
    ADD CONSTRAINT ge_platform_design_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: ge_platform_design ge_platform_design_sample_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_design
    ADD CONSTRAINT ge_platform_design_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_platform ge_platform_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform
    ADD CONSTRAINT ge_platform_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_pub ge_platform_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_pub ge_platform_pub_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: ge_platform_pub ge_platform_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: ge_platform ge_platform_technology_type_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_platform
    ADD CONSTRAINT ge_platform_technology_type_id_fkey FOREIGN KEY (technology_type_id) REFERENCES gem.ge_technology_type(technology_type_id);


--
-- Name: ge_probe_expression ge_probe_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_probe_expression ge_probe_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_expression ge_probe_expression_probe_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_probe_id_fkey FOREIGN KEY (probe_id) REFERENCES gem.ge_probe(probe_id);


--
-- Name: ge_probe_expression ge_probe_expression_target_element_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_target_element_id_fkey FOREIGN KEY (target_element_id) REFERENCES gem.ge_target_element(target_element_id);


--
-- Name: ge_probe ge_probe_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe ge_probe_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: ge_probe ge_probe_sequence_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_sequence_file_id_fkey FOREIGN KEY (sequence_file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_probe_spot_coordinate ge_probe_spot_coordinate_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_spot_coordinate ge_probe_spot_coordinate_probe_spot_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_probe_spot_id_fkey FOREIGN KEY (probe_spot_id) REFERENCES gem.ge_probe_spot(probe_spot_id);


--
-- Name: ge_probe_spot ge_probe_spot_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_spot ge_probe_spot_probe_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_probe_id_fkey FOREIGN KEY (probe_id) REFERENCES gem.ge_probe(probe_id);


--
-- Name: ge_probe ge_probe_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_probe
    ADD CONSTRAINT ge_probe_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_profile_element ge_profile_element_cluster_profile_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_profile_element
    ADD CONSTRAINT ge_profile_element_cluster_profile_id_fkey FOREIGN KEY (cluster_profile_id) REFERENCES gem.ge_cluster_profile(cluster_profile_id);


--
-- Name: ge_profile_element ge_profile_element_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_profile_element
    ADD CONSTRAINT ge_profile_element_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES gem.ge_experiment(experiment_id);


--
-- Name: ge_profile_element ge_profile_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_profile_element
    ADD CONSTRAINT ge_profile_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_dbxref ge_target_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_target_dbxref ge_target_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_dbxref ge_target_dbxref_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_target_id_fkey FOREIGN KEY (target_id) REFERENCES gem.ge_target(target_id);


--
-- Name: ge_target_element ge_target_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_element ge_target_element_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_target_element ge_target_element_sample_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_target_element ge_target_element_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target_element
    ADD CONSTRAINT ge_target_element_target_id_fkey FOREIGN KEY (target_id) REFERENCES gem.ge_target(target_id);


--
-- Name: ge_target ge_target_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target
    ADD CONSTRAINT ge_target_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES gem.ge_experiment(experiment_id);


--
-- Name: ge_target ge_target_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_target
    ADD CONSTRAINT ge_target_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_technology_type ge_technology_type_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_technology_type
    ADD CONSTRAINT ge_technology_type_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbiref ge_template_dbiref_dbiref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_dbiref_id_fkey FOREIGN KEY (dbiref_id) REFERENCES metadata.md_dbiref(dbiref_id);


--
-- Name: ge_template_dbiref ge_template_dbiref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbiref ge_template_dbiref_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_template_dbxref ge_template_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_template_dbxref ge_template_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbxref ge_template_dbxref_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_template_diff_expression ge_template_diff_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_template_diff_expression ge_template_diff_expression_diff_expression_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_diff_expression_id_fkey FOREIGN KEY (diff_expression_id) REFERENCES gem.ge_diff_expression(diff_expression_id);


--
-- Name: ge_template_diff_expression ge_template_diff_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_diff_expression ge_template_diff_expression_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_template_expression ge_template_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression
    ADD CONSTRAINT ge_template_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_template_expression ge_template_expression_hybridization_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression
    ADD CONSTRAINT ge_template_expression_hybridization_id_fkey FOREIGN KEY (hybridization_id) REFERENCES gem.ge_hybridization(hybridization_id);


--
-- Name: ge_template_expression ge_template_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression
    ADD CONSTRAINT ge_template_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_expression ge_template_expression_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template_expression
    ADD CONSTRAINT ge_template_expression_template_id_fkey FOREIGN KEY (template_id) REFERENCES gem.ge_template(template_id);


--
-- Name: ge_template ge_template_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template
    ADD CONSTRAINT ge_template_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template ge_template_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY gem.ge_template
    ADD CONSTRAINT ge_template_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES gem.ge_platform(platform_id);


--
-- Name: blast_hit blast_hit_blast_query_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_hit
    ADD CONSTRAINT blast_hit_blast_query_id_fkey FOREIGN KEY (blast_query_id) REFERENCES genomic.blast_query(blast_query_id) ON DELETE CASCADE;


--
-- Name: blast_query blast_query_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_query
    ADD CONSTRAINT blast_query_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES sgn.blast_db(blast_db_id) ON DELETE RESTRICT;


--
-- Name: blast_query blast_query_query_source_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.blast_query
    ADD CONSTRAINT blast_query_query_source_type_id_fkey FOREIGN KEY (query_source_type_id) REFERENCES genomic.query_source_type(query_source_type_id) ON DELETE RESTRICT;


--
-- Name: chromat chromat_clone_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.chromat
    ADD CONSTRAINT chromat_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) ON DELETE CASCADE;


--
-- Name: clone clone_clone_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone
    ADD CONSTRAINT clone_clone_type_id_fkey FOREIGN KEY (clone_type_id) REFERENCES genomic.clone_type(clone_type_id) ON DELETE RESTRICT;


--
-- Name: clone_feature clone_feature_clone_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_feature
    ADD CONSTRAINT clone_feature_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) ON DELETE CASCADE;


--
-- Name: clone_feature clone_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone_feature
    ADD CONSTRAINT clone_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: clone clone_library_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.clone
    ADD CONSTRAINT clone_library_id_fkey FOREIGN KEY (library_id) REFERENCES genomic.library(library_id) ON DELETE RESTRICT;


--
-- Name: gss gss_chromat_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss
    ADD CONSTRAINT gss_chromat_id_fkey FOREIGN KEY (chromat_id) REFERENCES genomic.chromat(chromat_id) ON DELETE CASCADE;


--
-- Name: gss_submitted_to_genbank gss_submitted_to_genbank_genbank_submission_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_genbank_submission_id_fkey FOREIGN KEY (genbank_submission_id) REFERENCES genomic.genbank_submission(genbank_submission_id) ON DELETE CASCADE;


--
-- Name: gss_submitted_to_genbank gss_submitted_to_genbank_gss_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_gss_id_fkey FOREIGN KEY (gss_id) REFERENCES genomic.gss(gss_id) ON DELETE RESTRICT;


--
-- Name: library library_accession_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_accession_id_fkey FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id) ON DELETE RESTRICT;


--
-- Name: library library_clone_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_clone_type_id_fkey FOREIGN KEY (clone_type_id) REFERENCES genomic.clone_type(clone_type_id) ON DELETE RESTRICT;


--
-- Name: library library_left_primer_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_left_primer_id_fkey FOREIGN KEY (left_primer_id) REFERENCES genomic.sequencing_primer(sequencing_primer_id);


--
-- Name: library library_organism_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library library_right_primer_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_right_primer_id_fkey FOREIGN KEY (right_primer_id) REFERENCES genomic.sequencing_primer(sequencing_primer_id);


--
-- Name: library_shortname_abbreviation library_shortname_abbreviation_library_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_library_id_fkey FOREIGN KEY (library_id) REFERENCES genomic.library(library_id);


--
-- Name: library library_vector_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.library
    ADD CONSTRAINT library_vector_fkey FOREIGN KEY (vector) REFERENCES sgn.cloning_vector(name);


--
-- Name: qc_report qc_report_gss_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genomic.qc_report
    ADD CONSTRAINT qc_report_gss_id_fkey FOREIGN KEY (gss_id) REFERENCES genomic.gss(gss_id) ON DELETE CASCADE;


--
-- Name: experiment_image experiment_image_experiment_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_image
    ADD CONSTRAINT experiment_image_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES insitu.experiment(experiment_id);


--
-- Name: experiment_image experiment_image_image_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_image
    ADD CONSTRAINT experiment_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: experiment_image experiment_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_image
    ADD CONSTRAINT experiment_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: experiment_tag experiment_tag_experiment_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_tag
    ADD CONSTRAINT experiment_tag_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES insitu.experiment(experiment_id);


--
-- Name: experiment_tag experiment_tag_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_tag
    ADD CONSTRAINT experiment_tag_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: experiment_tag experiment_tag_tag_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY insitu.experiment_tag
    ADD CONSTRAINT experiment_tag_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES metadata.md_tag(tag_id);


--
-- Name: attribution_to attribution_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT attribution_id_fk FOREIGN KEY (attribution_id) REFERENCES metadata.attribution(attribution_id) ON DELETE CASCADE;


--
-- Name: md_dbipath md_dbipath_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbipath
    ADD CONSTRAINT md_dbipath_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_dbiref md_dbiref_dbipath_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbiref
    ADD CONSTRAINT md_dbiref_dbipath_id_fkey FOREIGN KEY (dbipath_id) REFERENCES metadata.md_dbipath(dbipath_id);


--
-- Name: md_dbiref md_dbiref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbiref
    ADD CONSTRAINT md_dbiref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_dbversion md_dbversion_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_dbversion
    ADD CONSTRAINT md_dbversion_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_files md_files_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_files
    ADD CONSTRAINT md_files_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_groupmembers md_groupmembers_dbiref_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groupmembers
    ADD CONSTRAINT md_groupmembers_dbiref_id_fkey FOREIGN KEY (dbiref_id) REFERENCES metadata.md_dbiref(dbiref_id);


--
-- Name: md_groupmembers md_groupmembers_group_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groupmembers
    ADD CONSTRAINT md_groupmembers_group_id_fkey FOREIGN KEY (group_id) REFERENCES metadata.md_groups(group_id);


--
-- Name: md_groupmembers md_groupmembers_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groupmembers
    ADD CONSTRAINT md_groupmembers_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_groups md_groups_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_groups
    ADD CONSTRAINT md_groups_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: md_image_cvterm md_image_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_cvterm
    ADD CONSTRAINT md_image_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: md_image_cvterm md_image_cvterm_image_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_cvterm
    ADD CONSTRAINT md_image_cvterm_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: md_image_cvterm md_image_cvterm_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_cvterm
    ADD CONSTRAINT md_image_cvterm_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_image_organism md_image_organism_image_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_organism
    ADD CONSTRAINT md_image_organism_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: md_image_organism md_image_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_organism
    ADD CONSTRAINT md_image_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: md_image_organism md_image_organism_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image_organism
    ADD CONSTRAINT md_image_organism_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_image md_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_image
    ADD CONSTRAINT md_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_metadata md_metadata_create_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_metadata
    ADD CONSTRAINT md_metadata_create_person_id_fkey FOREIGN KEY (create_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_metadata md_metadata_modified_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_metadata
    ADD CONSTRAINT md_metadata_modified_person_id_fkey FOREIGN KEY (modified_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_tag_image md_tag_image_image_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag_image
    ADD CONSTRAINT md_tag_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: md_tag_image md_tag_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag_image
    ADD CONSTRAINT md_tag_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_tag_image md_tag_image_tag_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag_image
    ADD CONSTRAINT md_tag_image_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES metadata.md_tag(tag_id);


--
-- Name: md_tag md_tag_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.md_tag
    ADD CONSTRAINT md_tag_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: attribution_to organization_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT organization_id_fk FOREIGN KEY (organization_id) REFERENCES sgn_people.sp_organization(sp_organization_id);


--
-- Name: attribution_to person_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: attribution_to project_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT project_id_fk FOREIGN KEY (project_id) REFERENCES sgn_people.sp_project(sp_project_id);


--
-- Name: attribution_to role_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY metadata.attribution_to
    ADD CONSTRAINT role_id_fk FOREIGN KEY (role_id) REFERENCES metadata.roles(role_id);


--
-- Name: allele_alias allele_alias_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_alias
    ADD CONSTRAINT allele_alias_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES phenome.allele(allele_id);


--
-- Name: allele_alias allele_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_alias
    ADD CONSTRAINT allele_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_dbxref allele_dbxref_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref
    ADD CONSTRAINT allele_dbxref_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES phenome.allele(allele_id);


--
-- Name: allele_dbxref allele_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref
    ADD CONSTRAINT allele_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: allele_dbxref allele_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_dbxref
    ADD CONSTRAINT allele_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_history allele_history_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history
    ADD CONSTRAINT allele_history_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES phenome.allele(allele_id) ON DELETE CASCADE;


--
-- Name: allele_history allele_history_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history
    ADD CONSTRAINT allele_history_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id) ON DELETE CASCADE;


--
-- Name: allele_history allele_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history
    ADD CONSTRAINT allele_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_history allele_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele_history
    ADD CONSTRAINT allele_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele allele_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele
    ADD CONSTRAINT allele_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: allele allele_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele
    ADD CONSTRAINT allele_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele allele_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.allele
    ADD CONSTRAINT allele_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: cvterm_pub_ranking cvterm_pub_ranking_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.cvterm_pub_ranking
    ADD CONSTRAINT cvterm_pub_ranking_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: cvterm_pub_ranking cvterm_pub_ranking_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.cvterm_pub_ranking
    ADD CONSTRAINT cvterm_pub_ranking_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: genotype genotype_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: genotype_experiment genotype_experiment_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_experiment
    ADD CONSTRAINT genotype_experiment_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: genotype_experiment genotype_experiment_reference_map_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_experiment
    ADD CONSTRAINT genotype_experiment_reference_map_id_fkey FOREIGN KEY (reference_map_id) REFERENCES sgn.map(map_id) ON DELETE CASCADE;


--
-- Name: genotype_experiment genotype_experiment_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_experiment
    ADD CONSTRAINT genotype_experiment_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: genotype genotype_genotype_experiment_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_genotype_experiment_id_fkey FOREIGN KEY (genotype_experiment_id) REFERENCES phenome.genotype_experiment(genotype_experiment_id);


--
-- Name: genotype genotype_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id) ON DELETE CASCADE;


--
-- Name: genotype genotype_reference_map_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_reference_map_id_fkey FOREIGN KEY (reference_map_id) REFERENCES sgn.map(map_id);


--
-- Name: genotype_region genotype_region_genotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES phenome.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: genotype_region genotype_region_lg_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_lg_id_fkey FOREIGN KEY (lg_id) REFERENCES sgn.linkage_group(lg_id);


--
-- Name: genotype_region genotype_region_marker_id_nn_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_marker_id_nn_fkey FOREIGN KEY (marker_id_nn) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region genotype_region_marker_id_ns_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_marker_id_ns_fkey FOREIGN KEY (marker_id_ns) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region genotype_region_marker_id_sn_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_marker_id_sn_fkey FOREIGN KEY (marker_id_sn) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region genotype_region_marker_id_ss_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_marker_id_ss_fkey FOREIGN KEY (marker_id_ss) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region genotype_region_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype_region
    ADD CONSTRAINT genotype_region_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: genotype genotype_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.genotype
    ADD CONSTRAINT genotype_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: germplasm germplasm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.germplasm
    ADD CONSTRAINT germplasm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: germplasm germplasm_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.germplasm
    ADD CONSTRAINT germplasm_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: germplasm germplasm_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.germplasm
    ADD CONSTRAINT germplasm_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual individual_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_accession_id_fkey FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: individual_alias individual_alias_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_alias
    ADD CONSTRAINT individual_alias_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: individual_alias individual_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_alias
    ADD CONSTRAINT individual_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_allele individual_allele_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele
    ADD CONSTRAINT individual_allele_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES phenome.allele(allele_id);


--
-- Name: individual_allele individual_allele_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele
    ADD CONSTRAINT individual_allele_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: individual_allele individual_allele_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_allele
    ADD CONSTRAINT individual_allele_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual individual_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: individual_dbxref individual_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref
    ADD CONSTRAINT individual_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_hi_individual_dbxref_evidence_i_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_hi_individual_dbxref_evidence_i_fkey FOREIGN KEY (individual_dbxref_evidence_id) REFERENCES phenome.individual_dbxref_evidence(individual_dbxref_evidence_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_individual_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_individual_dbxref_id_fkey FOREIGN KEY (individual_dbxref_id) REFERENCES phenome.individual_dbxref(individual_dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence_history individual_dbxref_evidence_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_individual_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_individual_dbxref_id_fkey FOREIGN KEY (individual_dbxref_id) REFERENCES phenome.individual_dbxref(individual_dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence individual_dbxref_evidence_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref individual_dbxref_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref
    ADD CONSTRAINT individual_dbxref_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: individual_dbxref individual_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_dbxref
    ADD CONSTRAINT individual_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_history individual_history_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_history
    ADD CONSTRAINT individual_history_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id) ON DELETE CASCADE;


--
-- Name: individual_history individual_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_history
    ADD CONSTRAINT individual_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_history individual_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_history
    ADD CONSTRAINT individual_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_image individual_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_image
    ADD CONSTRAINT individual_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: individual_image individual_image_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_image
    ADD CONSTRAINT individual_image_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: individual_image individual_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_image
    ADD CONSTRAINT individual_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_locus individual_locus_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus
    ADD CONSTRAINT individual_locus_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: individual_locus individual_locus_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus
    ADD CONSTRAINT individual_locus_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: individual_locus individual_locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual_locus
    ADD CONSTRAINT individual_locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual individual_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: individual individual_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual individual_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.individual
    ADD CONSTRAINT individual_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: is_public is_public_owner_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.is_public
    ADD CONSTRAINT is_public_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: is_public is_public_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.is_public
    ADD CONSTRAINT is_public_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: locus2locus locus2locus_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_evidence_id_fkey FOREIGN KEY (evidence_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus locus2locus_object_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_object_id_fkey FOREIGN KEY (object_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus2locus locus2locus_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus locus2locus_relationship_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus locus2locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus2locus locus2locus_subject_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus2locus
    ADD CONSTRAINT locus2locus_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_alias locus_alias_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_alias
    ADD CONSTRAINT locus_alias_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_alias locus_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_alias
    ADD CONSTRAINT locus_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus locus_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: locus_dbxref locus_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref
    ADD CONSTRAINT locus_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_evidence_code_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_code_id_fkey FOREIGN KEY (evidence_code_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_evidence_description_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_description_id_fkey FOREIGN KEY (evidence_description_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_evidence_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_relationship_type_id_fkey FOREIGN KEY (relationship_type_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_locus_dbxref_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_locus_dbxref_evidence_id_fkey FOREIGN KEY (locus_dbxref_evidence_id) REFERENCES phenome.locus_dbxref_evidence(locus_dbxref_evidence_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_locus_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_locus_dbxref_id_fkey FOREIGN KEY (locus_dbxref_id) REFERENCES phenome.locus_dbxref(locus_dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence_history locus_dbxref_evidence_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_locus_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_locus_dbxref_id_fkey FOREIGN KEY (locus_dbxref_id) REFERENCES phenome.locus_dbxref(locus_dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence locus_dbxref_evidence_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref locus_dbxref_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref
    ADD CONSTRAINT locus_dbxref_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_dbxref locus_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_dbxref
    ADD CONSTRAINT locus_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_history locus_history_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_history
    ADD CONSTRAINT locus_history_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id) ON DELETE CASCADE;


--
-- Name: locus_history locus_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_history
    ADD CONSTRAINT locus_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_history locus_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_history
    ADD CONSTRAINT locus_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_image locus_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_image
    ADD CONSTRAINT locus_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: locus_image locus_image_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_image
    ADD CONSTRAINT locus_image_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_image locus_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_image
    ADD CONSTRAINT locus_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_marker locus_marker_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_marker
    ADD CONSTRAINT locus_marker_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_marker locus_marker_marker_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_marker
    ADD CONSTRAINT locus_marker_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: locus_marker locus_marker_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_marker
    ADD CONSTRAINT locus_marker_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus locus_organism_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: locus_owner locus_owner_granted_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner
    ADD CONSTRAINT locus_owner_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_owner locus_owner_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner
    ADD CONSTRAINT locus_owner_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id) ON DELETE CASCADE;


--
-- Name: locus_owner locus_owner_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_owner
    ADD CONSTRAINT locus_owner_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_pub_ranking locus_pub_ranking_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_pub_ranking
    ADD CONSTRAINT locus_pub_ranking_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_pub_ranking locus_pub_ranking_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_pub_ranking
    ADD CONSTRAINT locus_pub_ranking_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: locus_pub_ranking_validate locus_pub_ranking_validate_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_pub_ranking_validate
    ADD CONSTRAINT locus_pub_ranking_validate_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_pub_ranking_validate locus_pub_ranking_validate_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_pub_ranking_validate
    ADD CONSTRAINT locus_pub_ranking_validate_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: locus_registry locus_registry_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry
    ADD CONSTRAINT locus_registry_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_registry locus_registry_registry_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry
    ADD CONSTRAINT locus_registry_registry_id_fkey FOREIGN KEY (registry_id) REFERENCES phenome.registry(registry_id);


--
-- Name: locus_registry locus_registry_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_registry
    ADD CONSTRAINT locus_registry_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_unigene locus_unigene_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene
    ADD CONSTRAINT locus_unigene_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: locus_unigene locus_unigene_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene
    ADD CONSTRAINT locus_unigene_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_unigene locus_unigene_unigene_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus_unigene
    ADD CONSTRAINT locus_unigene_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: locus locus_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locus
    ADD CONSTRAINT locus_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locusgroup_member locusgroup_member_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_evidence_id_fkey FOREIGN KEY (evidence_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: locusgroup_member locusgroup_member_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id) ON DELETE CASCADE;


--
-- Name: locusgroup_member locusgroup_member_locusgroup_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_locusgroup_id_fkey FOREIGN KEY (locusgroup_id) REFERENCES phenome.locusgroup(locusgroup_id);


--
-- Name: locusgroup_member locusgroup_member_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locusgroup_member locusgroup_member_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup_member
    ADD CONSTRAINT locusgroup_member_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locusgroup locusgroup_relationship_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup
    ADD CONSTRAINT locusgroup_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: locusgroup locusgroup_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.locusgroup
    ADD CONSTRAINT locusgroup_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: nd_experiment_md_files nd_experiment_md_files_file_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.nd_experiment_md_files
    ADD CONSTRAINT nd_experiment_md_files_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: nd_experiment_md_files nd_experiment_md_files_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.nd_experiment_md_files
    ADD CONSTRAINT nd_experiment_md_files_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id);


--
-- Name: phenotype_user_trait phenotype_user_trait_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_user_trait phenotype_user_trait_user_trait_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_user_trait_id_fkey FOREIGN KEY (user_trait_id) REFERENCES phenome.user_trait(user_trait_id);


--
-- Name: polymorphic_fragment polymorphic_fragment_flanking_marker1_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_flanking_marker1_id_fkey FOREIGN KEY (flanking_marker1_id) REFERENCES sgn.marker(marker_id);


--
-- Name: polymorphic_fragment polymorphic_fragment_flanking_marker2_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_flanking_marker2_id_fkey FOREIGN KEY (flanking_marker2_id) REFERENCES sgn.marker(marker_id);


--
-- Name: polymorphic_fragment polymorphic_fragment_genotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES phenome.genotype(genotype_id);


--
-- Name: polymorphic_fragment polymorphic_fragment_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: population population_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population population_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: population population_cross_type_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_cross_type_id_fkey FOREIGN KEY (cross_type_id) REFERENCES phenome.cross_type(cross_type_id);


--
-- Name: population_dbxref population_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population_dbxref
    ADD CONSTRAINT population_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: population_dbxref population_dbxref_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population_dbxref
    ADD CONSTRAINT population_dbxref_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: population_dbxref population_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population_dbxref
    ADD CONSTRAINT population_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE SET NULL;


--
-- Name: population population_donor_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_donor_parent_id_fkey FOREIGN KEY (donor_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population population_female_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_female_parent_id_fkey FOREIGN KEY (female_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population population_male_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_male_parent_id_fkey FOREIGN KEY (male_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population population_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_person_id_fkey FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: population population_recurrent_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_recurrent_parent_id_fkey FOREIGN KEY (recurrent_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population population_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.population
    ADD CONSTRAINT population_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator pub_curator_assigned_to_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator pub_curator_curated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_curated_by_fkey FOREIGN KEY (curated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator pub_curator_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: pub_curator pub_curator_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.pub_curator
    ADD CONSTRAINT pub_curator_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: registry registry_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.registry
    ADD CONSTRAINT registry_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: registry registry_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.registry
    ADD CONSTRAINT registry_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: stock_allele stock_allele_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_allele
    ADD CONSTRAINT stock_allele_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES phenome.allele(allele_id);


--
-- Name: stock_allele stock_allele_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_allele
    ADD CONSTRAINT stock_allele_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_allele stock_allele_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_allele
    ADD CONSTRAINT stock_allele_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: stock_image stock_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_image
    ADD CONSTRAINT stock_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: stock_image stock_image_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_image
    ADD CONSTRAINT stock_image_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_image stock_image_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_image
    ADD CONSTRAINT stock_image_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: stock_owner stock_owner_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_owner
    ADD CONSTRAINT stock_owner_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_owner stock_owner_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_owner
    ADD CONSTRAINT stock_owner_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: stock_owner stock_owner_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.stock_owner
    ADD CONSTRAINT stock_owner_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: tomato_il_bin tomato_il_bin_n_marker_n_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_n_marker_n_fkey FOREIGN KEY (n_marker_n) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin tomato_il_bin_n_marker_s_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_n_marker_s_fkey FOREIGN KEY (n_marker_s) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin tomato_il_bin_s_marker_n_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_s_marker_n_fkey FOREIGN KEY (s_marker_n) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin tomato_il_bin_s_marker_s_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_s_marker_s_fkey FOREIGN KEY (s_marker_s) REFERENCES sgn.marker(marker_id);


--
-- Name: user_trait user_trait_cv_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait
    ADD CONSTRAINT user_trait_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id);


--
-- Name: user_trait user_trait_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait
    ADD CONSTRAINT user_trait_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL;


--
-- Name: user_trait user_trait_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait
    ADD CONSTRAINT user_trait_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: user_trait_unit user_trait_unit_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait_unit
    ADD CONSTRAINT user_trait_unit_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: user_trait_unit user_trait_unit_unit_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait_unit
    ADD CONSTRAINT user_trait_unit_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES phenome.unit(unit_id) ON DELETE CASCADE;


--
-- Name: user_trait_unit user_trait_unit_user_trait_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.user_trait_unit
    ADD CONSTRAINT user_trait_unit_user_trait_id_fkey FOREIGN KEY (user_trait_id) REFERENCES phenome.user_trait(user_trait_id) ON DELETE CASCADE;


--
-- Name: variant variant_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenome.variant
    ADD CONSTRAINT variant_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES phenome.locus(locus_id);


--
-- Name: bac_associations bac_associations_bac_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.bac_associations
    ADD CONSTRAINT bac_associations_bac_id_fkey FOREIGN KEY (bac_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations computational_associations_clone_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations
    ADD CONSTRAINT computational_associations_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations computational_associations_clone_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations
    ADD CONSTRAINT computational_associations_clone_id_fkey1 FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations computational_associations_marker_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations
    ADD CONSTRAINT computational_associations_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.deprecated_markers(marker_id);


--
-- Name: computational_associations computational_associations_marker_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.computational_associations
    ADD CONSTRAINT computational_associations_marker_id_fkey1 FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: fpc_data fpc_data_bac_contig_id_left_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_data
    ADD CONSTRAINT fpc_data_bac_contig_id_left_fkey FOREIGN KEY (bac_contig_id_left) REFERENCES physical.bac_contigs(bac_contig_id);


--
-- Name: fpc_data fpc_data_bac_contig_id_right_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.fpc_data
    ADD CONSTRAINT fpc_data_bac_contig_id_right_fkey FOREIGN KEY (bac_contig_id_right) REFERENCES physical.bac_contigs(bac_contig_id);


--
-- Name: manual_associations manual_associations_clone_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: manual_associations manual_associations_clone_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_clone_id_fkey1 FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: manual_associations manual_associations_marker_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: manual_associations manual_associations_marker_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_marker_id_fkey1 FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: manual_associations manual_associations_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: manual_associations manual_associations_sp_person_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.manual_associations
    ADD CONSTRAINT manual_associations_sp_person_id_fkey1 FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: probe_markers marker_id_fk; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY physical.probe_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: analysisfeature analysisfeature_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature analysisfeature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop analysisprop_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop analysisprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: blastwatch_queries blastwatch_queries_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_queries
    ADD CONSTRAINT blastwatch_queries_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: blastwatch_results blastwatch_results_blastwatch_queries_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blastwatch_results
    ADD CONSTRAINT blastwatch_results_blastwatch_queries_id_fkey FOREIGN KEY (blastwatch_queries_id) REFERENCES public.blastwatch_queries(blastwatch_queries_id) ON DELETE CASCADE;


--
-- Name: bug bug_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bug
    ADD CONSTRAINT bug_created_by_fkey FOREIGN KEY (created_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bug bug_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bug
    ADD CONSTRAINT bug_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bug bug_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bug
    ADD CONSTRAINT bug_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: contact_relationship contact_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship contact_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship contact_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact contact_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: cvprop cvprop_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop cvprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm cvterm_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref cvterm_dbxref_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm cvterm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermprop cvtermprop_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermprop cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermsynonym cvtermsynonym_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermsynonym cvtermsynonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxref dbxref_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_db_id_fkey FOREIGN KEY (db_id) REFERENCES public.db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop dbxrefprop_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: environment_cvterm environment_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: environment_cvterm environment_cvterm_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: enzyme_restriction_sites enzyme_restriction_sites_enzyme_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_enzyme_id_fkey FOREIGN KEY (enzyme_id) REFERENCES sgn.enzymes(enzyme_id);


--
-- Name: feature_cvterm feature_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm feature_cvterm_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub feature_cvterm_pub_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm feature_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub feature_cvterm_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvtermprop feature_cvtermprop_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvtermprop feature_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref feature_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref feature_dbxref_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature feature_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_genotype feature_genotype_chromosome_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_chromosome_id_fkey FOREIGN KEY (chromosome_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL;


--
-- Name: feature_genotype feature_genotype_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_genotype feature_genotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_genotype feature_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: feature feature_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub feature_pub_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub feature_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub feature_relationship_pub_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES public.feature_relationship(feature_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub feature_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop feature_relationshipprop_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES public.feature_relationship(feature_relationship_id) ON DELETE CASCADE;


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_feature_relationshipprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_feature_relationshipprop_id_fkey FOREIGN KEY (feature_relationshipprop_id) REFERENCES public.feature_relationshipprop(feature_relationshipprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop feature_relationshipprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES public.synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc featureloc_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub featureloc_pub_featureloc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_featureloc_id_fkey FOREIGN KEY (featureloc_id) REFERENCES public.featureloc(featureloc_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub featureloc_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc featureloc_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop featureprop_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub featureprop_pub_featureprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_featureprop_id_fkey FOREIGN KEY (featureprop_id) REFERENCES public.featureprop(featureprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub featureprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: fpc_band fpc_band_fpc_fingerprint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_band
    ADD CONSTRAINT fpc_band_fpc_fingerprint_id_fkey FOREIGN KEY (fpc_fingerprint_id) REFERENCES public.fpc_fingerprint(fpc_fingerprint_id) ON DELETE CASCADE;


--
-- Name: fpc_build_fpc_fingerprint fpc_build_fpc_fingerprint_fpc_build_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_fpc_build_id_fkey FOREIGN KEY (fpc_build_id) REFERENCES public.fpc_build(fpc_build_id) ON DELETE CASCADE;


--
-- Name: fpc_build_fpc_fingerprint fpc_build_fpc_fingerprint_fpc_fingerprint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_fpc_fingerprint_id_fkey FOREIGN KEY (fpc_fingerprint_id) REFERENCES public.fpc_fingerprint(fpc_fingerprint_id) ON DELETE CASCADE;


--
-- Name: fpc_build fpc_build_fpc_series_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_build
    ADD CONSTRAINT fpc_build_fpc_series_id_fkey FOREIGN KEY (fpc_series_id) REFERENCES public.fpc_series(fpc_series_id);


--
-- Name: fpc_contig_clone fpc_contig_clone_clone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: fpc_contig_clone fpc_contig_clone_fpc_contig_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_fpc_contig_id_fkey FOREIGN KEY (fpc_contig_id) REFERENCES public.fpc_contig(fpc_contig_id) ON DELETE CASCADE;


--
-- Name: fpc_contig fpc_contig_fpc_build_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_contig
    ADD CONSTRAINT fpc_contig_fpc_build_id_fkey FOREIGN KEY (fpc_build_id) REFERENCES public.fpc_build(fpc_build_id) ON DELETE CASCADE;


--
-- Name: fpc_fingerprint fpc_fingerprint_clone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) ON DELETE CASCADE;


--
-- Name: fpc_fingerprint fpc_fingerprint_enzyme_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_enzyme_id_fkey FOREIGN KEY (enzyme_id) REFERENCES sgn.enzymes(enzyme_id);


--
-- Name: genotype genotype_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: genotypeprop genotypeprop_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotypeprop genotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact nd_experiment_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact nd_experiment_contact_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype nd_experiment_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype nd_experiment_genotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment nd_experiment_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES public.nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project nd_experiment_project_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project nd_experiment_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol nd_experiment_protocol_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol nd_experiment_protocol_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub nd_experiment_pub_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub nd_experiment_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES public.nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES public.nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment nd_experiment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop nd_experimentprop_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop nd_experimentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop nd_geolocationprop_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES public.nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop nd_geolocationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_reagent_id_fkey FOREIGN KEY (reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol nd_protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop nd_protocolprop_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop nd_protocolprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_object_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_object_reagent_id_fkey FOREIGN KEY (object_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_subject_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_subject_reagent_id_fkey FOREIGN KEY (subject_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent nd_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagent
    ADD CONSTRAINT nd_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop nd_reagentprop_nd_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_nd_reagent_id_fkey FOREIGN KEY (nd_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop nd_reagentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref organism_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref organism_dbxref_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship organism_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship
    ADD CONSTRAINT organism_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship organism_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship
    ADD CONSTRAINT organism_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship organism_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism_relationship
    ADD CONSTRAINT organism_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism organism_sgn_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organism
    ADD CONSTRAINT organism_sgn_organism_id_fkey FOREIGN KEY (sgn_organism_id) REFERENCES sgn.organism(organism_id);


--
-- Name: organismpath organismpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath
    ADD CONSTRAINT organismpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismpath organismpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath
    ADD CONSTRAINT organismpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismpath organismpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismpath
    ADD CONSTRAINT organismpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop organismprop_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phendesc phendesc_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype phenotype_attr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_attr_id_fkey FOREIGN KEY (attr_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_phenotype_comparison_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_phenotype_comparison_id_fkey FOREIGN KEY (phenotype_comparison_id) REFERENCES public.phenotype_comparison(phenotype_comparison_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_environment1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment1_id_fkey FOREIGN KEY (environment1_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_environment2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment2_id_fkey FOREIGN KEY (environment2_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_genotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype1_id_fkey FOREIGN KEY (genotype1_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_genotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype2_id_fkey FOREIGN KEY (genotype2_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_phenotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype1_id_fkey FOREIGN KEY (phenotype1_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_phenotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype2_id_fkey FOREIGN KEY (phenotype2_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_cvalue_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_cvterm phenotype_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvterm phenotype_cvterm_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_individual_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_observable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_observable_id_fkey FOREIGN KEY (observable_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE SET NULL;


--
-- Name: phenotypeprop phenotypeprop_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotypeprop
    ADD CONSTRAINT phenotypeprop_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenotypeprop phenotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenotypeprop
    ADD CONSTRAINT phenotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenstatement phenstatement_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref phylonode_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref phylonode_dbxref_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism phylonode_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism phylonode_organism_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_parent_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_parent_phylonode_id_fkey FOREIGN KEY (parent_phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub phylonode_pub_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub phylonode_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop phylonodeprop_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop phylonodeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub phylotree_pub_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub phylotree_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: project_contact project_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_contact project_contact_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub project_pub_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub project_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_relationship project_relationship_object_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_object_project_id_fkey FOREIGN KEY (object_project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship project_relationship_subject_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_subject_project_id_fkey FOREIGN KEY (subject_project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship project_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: projectprop projectprop_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: projectprop projectprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: pub_dbxref pub_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref pub_dbxref_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub pub_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubabstract pubabstract_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubabstract
    ADD CONSTRAINT pubabstract_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: pubauthor pubauthor_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop pubprop_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvtermprop stock_cvtermprop_stock_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_stock_cvterm_id_fkey FOREIGN KEY (stock_cvterm_id) REFERENCES public.stock_cvterm(stock_cvterm_id) ON DELETE CASCADE;


--
-- Name: stock_cvtermprop stock_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref stock_dbxref_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop stock_dbxrefprop_stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_stock_dbxref_id_fkey FOREIGN KEY (stock_dbxref_id) REFERENCES public.stock_dbxref(stock_dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop stock_dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_genotype stock_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: stock_genotype stock_genotype_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE;


--
-- Name: stock stock_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub stock_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub stock_pub_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES public.stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub stock_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub stock_relationship_pub_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES public.stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection stockcollection_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock stockcollection_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock stockcollection_stock_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES public.stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection stockcollection_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: stockcollectionprop stockcollectionprop_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES public.stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollectionprop stockcollectionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: stockprop_pub stockprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_pub stockprop_pub_stockprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_stockprop_id_fkey FOREIGN KEY (stockprop_id) REFERENCES public.stockprop(stockprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop stockprop_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: synonym synonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: tmp_cds_handler_relationship tmp_cds_handler_relationship_cds_row_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tmp_cds_handler_relationship
    ADD CONSTRAINT tmp_cds_handler_relationship_cds_row_id_fkey FOREIGN KEY (cds_row_id) REFERENCES public.tmp_cds_handler(cds_row_id) ON DELETE CASCADE;


--
-- Name: unigene_dbxref unigene_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: unigene_dbxref unigene_dbxref_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_relations unigene_relations_superceded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_relations
    ADD CONSTRAINT unigene_relations_superceded_by_fkey FOREIGN KEY (superceded_by) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_relations unigene_relations_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_relations
    ADD CONSTRAINT unigene_relations_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_signalp unigene_signalp_cds_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_signalp
    ADD CONSTRAINT unigene_signalp_cds_id_fkey FOREIGN KEY (cds_id) REFERENCES sgn.cds(cds_id);


--
-- Name: unigene_signalp unigene_signalp_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.unigene_signalp
    ADD CONSTRAINT unigene_signalp_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: accession accession_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession
    ADD CONSTRAINT accession_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: pcr_exp_accession accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_exp_accession
    ADD CONSTRAINT accession_id_fk FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id) MATCH FULL;


--
-- Name: accession_names accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession_names
    ADD CONSTRAINT accession_id_fk FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: accession accession_name_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession
    ADD CONSTRAINT accession_name_id_fk FOREIGN KEY (accession_name_id) REFERENCES sgn.accession_names(accession_name_id);


--
-- Name: blast_annotations apply_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_annotations
    ADD CONSTRAINT apply_id_fkey FOREIGN KEY (apply_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: manual_annotations author_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.manual_annotations
    ADD CONSTRAINT author_id_fk FOREIGN KEY (author_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: blast_db_blast_db_group blast_db_blast_db_group_blast_db_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_blast_db_group_id_fkey FOREIGN KEY (blast_db_group_id) REFERENCES sgn.blast_db_group(blast_db_group_id);


--
-- Name: blast_db_blast_db_group blast_db_blast_db_group_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES sgn.blast_db(blast_db_id);


--
-- Name: blast_db blast_db_blast_db_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db
    ADD CONSTRAINT blast_db_blast_db_group_id_fkey FOREIGN KEY (blast_db_group_id) REFERENCES sgn.blast_db_group(blast_db_group_id);


--
-- Name: blast_db_organism blast_db_organism_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_organism
    ADD CONSTRAINT blast_db_organism_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES sgn.blast_db(blast_db_id);


--
-- Name: blast_db_organism blast_db_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_db_organism
    ADD CONSTRAINT blast_db_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: blast_hits blast_hits_blast_annotation_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.blast_hits
    ADD CONSTRAINT blast_hits_blast_annotation_id_fkey FOREIGN KEY (blast_annotation_id) REFERENCES sgn.blast_annotations(blast_annotation_id) ON DELETE CASCADE;


--
-- Name: cds cds_protein_feature_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cds
    ADD CONSTRAINT cds_protein_feature_id_fkey FOREIGN KEY (protein_feature_id) REFERENCES public.feature(feature_id);


--
-- Name: cds cds_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cds
    ADD CONSTRAINT cds_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id) ON DELETE CASCADE;


--
-- Name: chadoprop chadoprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.chadoprop
    ADD CONSTRAINT chadoprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: seqread clone_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.seqread
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES sgn.clone(clone_id);


--
-- Name: ests_mapped_by_clone clone_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ests_mapped_by_clone
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: organism common_name_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT common_name_id_fk FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id) MATCH FULL;


--
-- Name: deprecated_marker_locations confidence_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_locations
    ADD CONSTRAINT confidence_fk FOREIGN KEY (confidence) REFERENCES sgn.deprecated_marker_confidences(legacy_conf_id);


--
-- Name: domain domain_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain
    ADD CONSTRAINT domain_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: domain_match domain_match_cds_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain_match
    ADD CONSTRAINT domain_match_cds_id_fkey FOREIGN KEY (cds_id) REFERENCES sgn.cds(cds_id) ON DELETE CASCADE;


--
-- Name: domain_match domain_match_domain_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain_match
    ADD CONSTRAINT domain_match_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES sgn.domain(domain_id) ON DELETE CASCADE;


--
-- Name: domain_match domain_match_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain_match
    ADD CONSTRAINT domain_match_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES sgn.metadata(metadata_id);


--
-- Name: domain domain_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.domain
    ADD CONSTRAINT domain_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES sgn.metadata(metadata_id);


--
-- Name: pcr_product enzyme_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_product
    ADD CONSTRAINT enzyme_id_fk FOREIGN KEY (enzyme_id) REFERENCES sgn.enzymes(enzyme_id) MATCH FULL;


--
-- Name: est_dbxref est_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est_dbxref
    ADD CONSTRAINT est_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: est_dbxref est_dbxref_est_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est_dbxref
    ADD CONSTRAINT est_dbxref_est_id_fkey FOREIGN KEY (est_id) REFERENCES sgn.est(est_id);


--
-- Name: qc_report est_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.qc_report
    ADD CONSTRAINT est_id_fk FOREIGN KEY (est_id) REFERENCES sgn.est(est_id) MATCH FULL;


--
-- Name: unigene_member est_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_member
    ADD CONSTRAINT est_id_fkey FOREIGN KEY (est_id) REFERENCES sgn.est(est_id);


--
-- Name: pcr_experiment experiment_type_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT experiment_type_id_fk FOREIGN KEY (experiment_type_id) REFERENCES sgn.experiment_type(experiment_type_id) MATCH FULL;


--
-- Name: seqread facility_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.seqread
    ADD CONSTRAINT facility_id_fk FOREIGN KEY (facility_id) REFERENCES sgn.facility(facility_id);


--
-- Name: family family_family_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family
    ADD CONSTRAINT family_family_build_id_fkey FOREIGN KEY (family_build_id) REFERENCES sgn.family_build(family_build_id) ON DELETE CASCADE;


--
-- Name: family_member family_member_family_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_member
    ADD CONSTRAINT family_member_family_id_fkey FOREIGN KEY (family_id) REFERENCES sgn.family(family_id) ON DELETE CASCADE;


--
-- Name: family_tree family_tree_family_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.family_tree
    ADD CONSTRAINT family_tree_family_id_fkey FOREIGN KEY (family_id) REFERENCES sgn.family(family_id);


--
-- Name: fish_result fish_experimenter_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT fish_experimenter_id_fkey FOREIGN KEY (fish_experimenter_id) REFERENCES sgn.fish_experimenter(fish_experimenter_id);


--
-- Name: fish_result fish_result_attribution_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT fish_result_attribution_id_fkey FOREIGN KEY (attribution_id) REFERENCES metadata.attribution(attribution_id);


--
-- Name: fish_result fish_result_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT fish_result_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: fish_result_image fish_result_image_fish_result_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result_image
    ADD CONSTRAINT fish_result_image_fish_result_id_fkey FOREIGN KEY (fish_result_id) REFERENCES sgn.fish_result(fish_result_id) ON DELETE CASCADE;


--
-- Name: fish_result_image fish_result_image_image_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result_image
    ADD CONSTRAINT fish_result_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: facility foriegn; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.facility
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: submit_user foriegn; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.submit_user
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: rflp_markers forward_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_markers
    ADD CONSTRAINT forward_seq_id_fk FOREIGN KEY (forward_seq_id) REFERENCES sgn.rflp_sequences(seq_id);


--
-- Name: interpro_go interpro_go_go_accession_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro_go
    ADD CONSTRAINT interpro_go_go_accession_fkey FOREIGN KEY (go_accession) REFERENCES sgn.go(go_accession) ON DELETE CASCADE;


--
-- Name: interpro_go interpro_go_interpro_accession_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.interpro_go
    ADD CONSTRAINT interpro_go_interpro_accession_fkey FOREIGN KEY (interpro_accession) REFERENCES sgn.interpro(interpro_accession) ON DELETE CASCADE;


--
-- Name: deprecated_mapdata lg_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_mapdata
    ADD CONSTRAINT lg_id_fk FOREIGN KEY (lg_id) REFERENCES sgn.deprecated_linkage_groups(lg_id) MATCH FULL;


--
-- Name: library library_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library
    ADD CONSTRAINT library_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: clone library_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.clone
    ADD CONSTRAINT library_id_fk FOREIGN KEY (library_id) REFERENCES sgn.library(library_id);


--
-- Name: library library_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library
    ADD CONSTRAINT library_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: linkage_group linkage_group_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES sgn.map_version(map_version_id) ON DELETE CASCADE;


--
-- Name: linkage_group linkage_group_north_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_north_location_id_fkey FOREIGN KEY (north_location_id) REFERENCES sgn.marker_location(location_id);


--
-- Name: linkage_group linkage_group_south_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.linkage_group
    ADD CONSTRAINT linkage_group_south_location_id_fkey FOREIGN KEY (south_location_id) REFERENCES sgn.marker_location(location_id);


--
-- Name: deprecated_marker_locations loc_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_locations
    ADD CONSTRAINT loc_id_fk FOREIGN KEY (loc_id) REFERENCES sgn.deprecated_mapdata(loc_id) ON DELETE CASCADE;


--
-- Name: map map_ancestor_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_ancestor_fkey FOREIGN KEY (ancestor) REFERENCES sgn.accession(accession_id);


--
-- Name: deprecated_map_cross map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_map_cross
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES sgn.deprecated_maps(map_id) MATCH FULL;


--
-- Name: deprecated_mapdata map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_mapdata
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES sgn.deprecated_maps(map_id) MATCH FULL;


--
-- Name: deprecated_linkage_groups map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_linkage_groups
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES sgn.deprecated_maps(map_id) MATCH FULL;


--
-- Name: pcr_experiment map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES sgn.map(map_id) MATCH FULL;


--
-- Name: fish_result map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.fish_result
    ADD CONSTRAINT map_id_fkey FOREIGN KEY (map_id) REFERENCES sgn.deprecated_maps(map_id);


--
-- Name: map map_parent1_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_parent1_stock_id_fkey FOREIGN KEY (parent1_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map map_parent2_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_parent2_stock_id_fkey FOREIGN KEY (parent2_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map map_parent_1_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_parent_1_fkey FOREIGN KEY (parent_1) REFERENCES sgn.accession(accession_id);


--
-- Name: map map_parent_2_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_parent_2_fkey FOREIGN KEY (parent_2) REFERENCES sgn.accession(accession_id);


--
-- Name: map map_population_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: map map_population_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map
    ADD CONSTRAINT map_population_stock_id_fkey FOREIGN KEY (population_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map_version map_version_default_threshold_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map_version
    ADD CONSTRAINT map_version_default_threshold_fkey FOREIGN KEY (default_threshold) REFERENCES sgn.deprecated_marker_confidences(confidence_id);


--
-- Name: map_version map_version_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map_version
    ADD CONSTRAINT map_version_map_id_fkey FOREIGN KEY (map_id) REFERENCES sgn.map(map_id) ON DELETE CASCADE;


--
-- Name: map_version map_version_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.map_version
    ADD CONSTRAINT map_version_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id) ON DELETE CASCADE;


--
-- Name: marker_alias marker_alias_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_alias
    ADD CONSTRAINT marker_alias_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: marker_collectible marker_collectible_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collectible
    ADD CONSTRAINT marker_collectible_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: marker_collectible marker_collectible_mc_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_collectible
    ADD CONSTRAINT marker_collectible_mc_id_fkey FOREIGN KEY (mc_id) REFERENCES sgn.marker_collection(mc_id);


--
-- Name: marker_derived_from marker_derived_from_derived_from_source_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_derived_from
    ADD CONSTRAINT marker_derived_from_derived_from_source_id_fkey FOREIGN KEY (derived_from_source_id) REFERENCES sgn.derived_from_source(derived_from_source_id);


--
-- Name: marker_derived_from marker_derived_from_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_derived_from
    ADD CONSTRAINT marker_derived_from_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.deprecated_markers(marker_id);


--
-- Name: marker_experiment marker_experiment_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_location_id_fkey FOREIGN KEY (location_id) REFERENCES sgn.marker_location(location_id) ON DELETE CASCADE;


--
-- Name: marker_experiment marker_experiment_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: marker_experiment marker_experiment_pcr_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_pcr_experiment_id_fkey FOREIGN KEY (pcr_experiment_id) REFERENCES sgn.pcr_experiment(pcr_experiment_id);


--
-- Name: marker_experiment marker_experiment_rflp_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_experiment
    ADD CONSTRAINT marker_experiment_rflp_experiment_id_fkey FOREIGN KEY (rflp_experiment_id) REFERENCES sgn.rflp_markers(rflp_id);


--
-- Name: deprecated_marker_locations marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_marker_locations
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.deprecated_markers(marker_id) MATCH FULL;


--
-- Name: cos_markers marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cos_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: cosii_ortholog marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.cosii_ortholog
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: ests_mapped_by_clone marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ests_mapped_by_clone
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: p_markers marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.p_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: primer_unigene_match marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.primer_unigene_match
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: rflp_markers marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: ssr marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: ssr_repeats marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_repeats
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: tm_markers marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tm_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: pcr_experiment marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id) MATCH FULL;


--
-- Name: marker_location marker_location_confidence_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_location
    ADD CONSTRAINT marker_location_confidence_id_fkey FOREIGN KEY (confidence_id) REFERENCES sgn.marker_confidence(confidence_id);


--
-- Name: marker_location marker_location_lg_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_location
    ADD CONSTRAINT marker_location_lg_id_fkey FOREIGN KEY (lg_id) REFERENCES sgn.linkage_group(lg_id) ON DELETE CASCADE;


--
-- Name: marker_location marker_location_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.marker_location
    ADD CONSTRAINT marker_location_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES sgn.map_version(map_version_id) ON DELETE CASCADE;


--
-- Name: deprecated_markers marker_type_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_markers
    ADD CONSTRAINT marker_type_fk FOREIGN KEY (marker_type) REFERENCES sgn.deprecated_marker_types(marker_type_id) MATCH FULL;


--
-- Name: metadata metadata_create_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.metadata
    ADD CONSTRAINT metadata_create_person_id_fkey FOREIGN KEY (create_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: metadata metadata_modified_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.metadata
    ADD CONSTRAINT metadata_modified_person_id_fkey FOREIGN KEY (modified_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: organism organism_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: organism organism_family_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_family_tax_fkey FOREIGN KEY (family_tax) REFERENCES sgn.taxonomy(tax_id);


--
-- Name: organism organism_genus_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_genus_tax_fkey FOREIGN KEY (genus_tax) REFERENCES sgn.taxonomy(tax_id);


--
-- Name: accession organism_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.accession
    ADD CONSTRAINT organism_id_fk FOREIGN KEY (organism_id) REFERENCES sgn.organism(organism_id) MATCH FULL;


--
-- Name: deprecated_map_cross organism_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.deprecated_map_cross
    ADD CONSTRAINT organism_id_fk FOREIGN KEY (organism_id) REFERENCES sgn.organism(organism_id) MATCH FULL;


--
-- Name: organism organism_order_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_order_tax_fkey FOREIGN KEY (order_tax) REFERENCES sgn.taxonomy(tax_id);


--
-- Name: organism organism_subfamily_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organism
    ADD CONSTRAINT organism_subfamily_tax_fkey FOREIGN KEY (subfamily_tax) REFERENCES sgn.taxonomy(tax_id);


--
-- Name: organismgroup_member organismgroup_member_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup_member
    ADD CONSTRAINT organismgroup_member_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: organismgroup_member organismgroup_member_organismgroup_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.organismgroup_member
    ADD CONSTRAINT organismgroup_member_organismgroup_id_fkey FOREIGN KEY (organismgroup_id) REFERENCES sgn.organismgroup(organismgroup_id);


--
-- Name: common_nameprop organismprop_common_name_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_nameprop
    ADD CONSTRAINT organismprop_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: common_nameprop organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.common_nameprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: pcr_product pcr_exp_accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_product
    ADD CONSTRAINT pcr_exp_accession_id_fk FOREIGN KEY (pcr_exp_accession_id) REFERENCES sgn.pcr_exp_accession(pcr_exp_accession_id) ON DELETE CASCADE;


--
-- Name: pcr_exp_accession pcr_exp_accession_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_exp_accession
    ADD CONSTRAINT pcr_exp_accession_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: pcr_exp_accession pcr_experiment_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_exp_accession
    ADD CONSTRAINT pcr_experiment_id_fk FOREIGN KEY (pcr_experiment_id) REFERENCES sgn.pcr_experiment(pcr_experiment_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence pcr_experiment_sequence_pcr_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_pcr_experiment_id_fkey FOREIGN KEY (pcr_experiment_id) REFERENCES sgn.pcr_experiment(pcr_experiment_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence pcr_experiment_sequence_sequence_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_sequence_id_fkey FOREIGN KEY (sequence_id) REFERENCES sgn.sequence(sequence_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence pcr_experiment_sequence_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: pcr_experiment pcr_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT pcr_experiment_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: pcr_experiment primer_id_fwd_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT primer_id_fwd_fk FOREIGN KEY (primer_id_fwd) REFERENCES sgn.sequence(sequence_id) MATCH FULL;


--
-- Name: pcr_experiment primer_id_rev_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.pcr_experiment
    ADD CONSTRAINT primer_id_rev_fk FOREIGN KEY (primer_id_rev) REFERENCES sgn.sequence(sequence_id) MATCH FULL;


--
-- Name: primer_unigene_match primer_unigene_match_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.primer_unigene_match
    ADD CONSTRAINT primer_unigene_match_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: est read_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.est
    ADD CONSTRAINT read_id_fkey FOREIGN KEY (read_id) REFERENCES sgn.seqread(read_id);


--
-- Name: rflp_markers reverse_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_markers
    ADD CONSTRAINT reverse_seq_id_fk FOREIGN KEY (reverse_seq_id) REFERENCES sgn.rflp_sequences(seq_id);


--
-- Name: rflp_unigene_associations rflp_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_unigene_associations
    ADD CONSTRAINT rflp_seq_id_fk FOREIGN KEY (rflp_seq_id) REFERENCES sgn.rflp_sequences(seq_id);


--
-- Name: snp_file snp_file_file_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp_file
    ADD CONSTRAINT snp_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: snp_file snp_file_snp_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp_file
    ADD CONSTRAINT snp_file_snp_id_fkey FOREIGN KEY (snp_id) REFERENCES sgn.snp(snp_id);


--
-- Name: snp snp_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: snp snp_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: snp snp_reference_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_reference_stock_id_fkey FOREIGN KEY (reference_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: snp snp_sequence_left_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_sequence_left_id_fkey FOREIGN KEY (sequence_left_id) REFERENCES sgn.sequence(sequence_id);


--
-- Name: snp snp_sequence_right_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_sequence_right_id_fkey FOREIGN KEY (sequence_right_id) REFERENCES sgn.sequence(sequence_id);


--
-- Name: snp snp_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snp
    ADD CONSTRAINT snp_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: snpprop snpprop_snp_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snpprop
    ADD CONSTRAINT snpprop_snp_id_fkey FOREIGN KEY (snp_id) REFERENCES sgn.snp(snp_id);


--
-- Name: snpprop snpprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.snpprop
    ADD CONSTRAINT snpprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: ssr_primer_unigene_matches ssr_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_primer_unigene_matches
    ADD CONSTRAINT ssr_id_fk FOREIGN KEY (ssr_id) REFERENCES sgn.ssr(ssr_id);


--
-- Name: ssr_repeats ssr_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_repeats
    ADD CONSTRAINT ssr_id_fk FOREIGN KEY (ssr_id) REFERENCES sgn.ssr(ssr_id);


--
-- Name: temp_map_correspondence temp_map_correspondence_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES sgn.map_version(map_version_id);


--
-- Name: temp_map_correspondence temp_map_correspondence_old_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_old_map_id_fkey FOREIGN KEY (old_map_id) REFERENCES sgn.deprecated_maps(map_id);


--
-- Name: temp_marker_correspondence temp_marker_correspondence_old_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.temp_marker_correspondence
    ADD CONSTRAINT temp_marker_correspondence_old_marker_id_fkey FOREIGN KEY (old_marker_id) REFERENCES sgn.deprecated_markers(marker_id);


--
-- Name: tm_markers tm_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.tm_markers
    ADD CONSTRAINT tm_id_fk FOREIGN KEY (tm_id) REFERENCES sgn.tm_markers(tm_id);


--
-- Name: library type_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.library
    ADD CONSTRAINT type_fkey FOREIGN KEY (type) REFERENCES sgn.types(type_id);


--
-- Name: unigene_build unigene_build_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES sgn.blast_db(blast_db_id);


--
-- Name: unigene_build unigene_build_latest_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_latest_build_id_fkey FOREIGN KEY (latest_build_id) REFERENCES sgn.unigene_build(unigene_build_id);


--
-- Name: unigene_build unigene_build_next_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_next_build_id_fkey FOREIGN KEY (next_build_id) REFERENCES sgn.unigene_build(unigene_build_id);


--
-- Name: unigene_build unigene_build_organism_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_organism_group_id_fkey FOREIGN KEY (organism_group_id) REFERENCES sgn.groups(group_id);


--
-- Name: unigene_build unigene_build_superseding_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_build
    ADD CONSTRAINT unigene_build_superseding_build_id_fkey FOREIGN KEY (superseding_build_id) REFERENCES sgn.unigene_build(unigene_build_id);


--
-- Name: rflp_unigene_associations unigene_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.rflp_unigene_associations
    ADD CONSTRAINT unigene_id_fk FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: ssr_primer_unigene_matches unigene_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.ssr_primer_unigene_matches
    ADD CONSTRAINT unigene_id_fk FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_member unigene_member_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene_member
    ADD CONSTRAINT unigene_member_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene unigene_unigene_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene
    ADD CONSTRAINT unigene_unigene_build_id_fkey FOREIGN KEY (unigene_build_id) REFERENCES sgn.unigene_build(unigene_build_id);


--
-- Name: unigene unigene_unigene_consensi_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sgn.unigene
    ADD CONSTRAINT unigene_unigene_consensi_id_fkey FOREIGN KEY (consensi_id) REFERENCES sgn.unigene_consensi(consensi_id);


--
-- Name: clone_il_mapping_bin_log clone_il_mapping_bin_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_il_mapping_bin_log clone_il_mapping_bin_log_genotype_region_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_genotype_region_id_fkey FOREIGN KEY (genotype_region_id) REFERENCES phenome.genotype_region(genotype_region_id);


--
-- Name: clone_il_mapping_bin_log clone_il_mapping_bin_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: clone_validation_log clone_validation_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_validation_log
    ADD CONSTRAINT clone_validation_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_validation_log clone_validation_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_validation_log
    ADD CONSTRAINT clone_validation_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: clone_verification_log clone_verification_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_verification_log
    ADD CONSTRAINT clone_verification_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_verification_log clone_verification_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.clone_verification_log
    ADD CONSTRAINT clone_verification_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: forum_post forum_topic_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_post
    ADD CONSTRAINT forum_topic_id_fk FOREIGN KEY (forum_topic_id) REFERENCES sgn_people.forum_topic(forum_topic_id);


--
-- Name: list_item list_item_list_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list_item
    ADD CONSTRAINT list_item_list_id_fkey FOREIGN KEY (list_id) REFERENCES sgn_people.list(list_id) ON DELETE CASCADE;


--
-- Name: list list_owner_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list
    ADD CONSTRAINT list_owner_fkey FOREIGN KEY (owner) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: list list_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.list
    ADD CONSTRAINT list_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bac_status person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bac_status_log person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.bac_status_log
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: forum_post person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_post
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: forum_topic person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.forum_topic
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_organization_person person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_organization_person
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_person_organisms person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_organisms
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_project_person person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_person
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_papers person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_papers
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_clone_il_mapping_segment_log sp_clone_il_mapping_segment_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: sp_clone_il_mapping_segment_log sp_clone_il_mapping_segment_log_individual_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: sp_clone_il_mapping_segment_log sp_clone_il_mapping_segment_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_dataset sp_dataset_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_dataset
    ADD CONSTRAINT sp_dataset_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_group_member sp_group_member_sp_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_group_member
    ADD CONSTRAINT sp_group_member_sp_group_id_fkey FOREIGN KEY (sp_group_id) REFERENCES sgn_people.sp_group(sp_group_id) ON DELETE CASCADE;


--
-- Name: sp_group_member sp_group_member_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_group_member
    ADD CONSTRAINT sp_group_member_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: sp_person_roles sp_person_roles_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_roles
    ADD CONSTRAINT sp_person_roles_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: sp_person_roles sp_person_roles_sp_role_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_person_roles
    ADD CONSTRAINT sp_person_roles_sp_role_id_fkey FOREIGN KEY (sp_role_id) REFERENCES sgn_people.sp_roles(sp_role_id) ON DELETE CASCADE;


--
-- Name: sp_project_il_mapping_clone_log sp_project_il_mapping_clone_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: sp_project_il_mapping_clone_log sp_project_il_mapping_clone_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: sp_project_il_mapping_clone_log sp_project_il_mapping_clone_log_sp_project_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_sp_project_id_fkey FOREIGN KEY (sp_project_id) REFERENCES sgn_people.sp_project(sp_project_id);


--
-- Name: sp_project_person sp_project_person_sp_project_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.sp_project_person
    ADD CONSTRAINT sp_project_person_sp_project_id_fkey FOREIGN KEY (sp_project_id) REFERENCES sgn_people.sp_project(sp_project_id);


--
-- Name: user_map_data user_map_data_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map_data
    ADD CONSTRAINT user_map_data_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: user_map_data user_map_data_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map_data
    ADD CONSTRAINT user_map_data_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: user_map_data user_map_data_user_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map_data
    ADD CONSTRAINT user_map_data_user_map_id_fkey FOREIGN KEY (user_map_id) REFERENCES sgn_people.user_map(user_map_id);


--
-- Name: user_map user_map_parent1_accession_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map
    ADD CONSTRAINT user_map_parent1_accession_id_fkey FOREIGN KEY (parent1_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: user_map user_map_parent2_accession_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map
    ADD CONSTRAINT user_map_parent2_accession_id_fkey FOREIGN KEY (parent2_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: user_map user_map_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sgn_people.user_map
    ADD CONSTRAINT user_map_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: facility foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.facility
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: library foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.library
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: submit_user foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY sgn_submit.submit_user
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: SCHEMA annotation; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA annotation TO postgres;


--
-- Name: SCHEMA biosource; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA biosource TO postgres;


--
-- Name: SCHEMA gem; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA gem TO postgres;


--
-- Name: SCHEMA genomic; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA genomic TO postgres;


--
-- Name: SCHEMA insitu; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA insitu TO postgres;


--
-- Name: SCHEMA metadata; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA metadata TO postgres;


--
-- Name: SCHEMA pheno_population; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA pheno_population TO postgres;


--
-- Name: SCHEMA phenome; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA phenome TO postgres;


--
-- Name: SCHEMA physical; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA physical TO postgres;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA public TO postgres;


--
-- Name: SCHEMA sgn; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA sgn TO postgres;


--
-- Name: SCHEMA sgn_people; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA sgn_people TO postgres;


--
-- Name: SCHEMA sgn_submit; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA sgn_submit TO postgres;


--
-- Name: SCHEMA tomato_gff; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA tomato_gff TO postgres;


--
-- Name: TABLE feature; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.feature TO postgres;


--
-- Name: TABLE featureloc; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.featureloc TO postgres;


--
-- Name: TABLE cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE ON TABLE public.cvterm TO postgres;


--
-- Name: TABLE db; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.db TO postgres;


--
-- Name: TABLE dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dbxref TO postgres;


--
-- Name: TABLE feature_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_cvterm TO postgres;


--
-- Name: TABLE feature_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.feature_dbxref TO postgres;


--
-- Name: TABLE feature_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_pub TO postgres;


--
-- Name: TABLE feature_synonym; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_synonym TO postgres;


--
-- Name: TABLE featureprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.featureprop TO postgres;


--
-- Name: TABLE pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.pub TO postgres;


--
-- Name: TABLE synonym; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.synonym TO postgres;


--
-- Name: TABLE gffatts; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.gffatts TO postgres;


--
-- Name: TABLE annotation; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.annotation TO postgres;


--
-- Name: TABLE comment; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.comment TO postgres;


--
-- Name: TABLE comp_analysis; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.comp_analysis TO postgres;


--
-- Name: TABLE dblist; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.dblist TO postgres;


--
-- Name: TABLE dbxref; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.dbxref TO postgres;


--
-- Name: TABLE feature_set; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.feature_set TO postgres;


--
-- Name: TABLE feature_span; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.feature_span TO postgres;


--
-- Name: TABLE organism; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.organism TO postgres;


--
-- Name: TABLE output; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.output TO postgres;


--
-- Name: TABLE person; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.person TO postgres;


--
-- Name: TABLE program; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.program TO postgres;


--
-- Name: TABLE property; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.property TO postgres;


--
-- Name: TABLE result_set; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.result_set TO postgres;


--
-- Name: TABLE result_span; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.result_span TO postgres;


--
-- Name: TABLE seq; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.seq TO postgres;


--
-- Name: TABLE seq_error; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.seq_error TO postgres;


--
-- Name: TABLE seq_relationship; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.seq_relationship TO postgres;


--
-- Name: TABLE synonym; Type: ACL; Schema: annotation; Owner: postgres
--

GRANT SELECT ON TABLE annotation.synonym TO postgres;


--
-- Name: TABLE bs_protocol; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_protocol TO postgres;


--
-- Name: SEQUENCE bs_protocol_protocol_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_protocol_protocol_id_seq TO postgres;


--
-- Name: TABLE bs_protocol_pub; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_protocol_pub TO postgres;


--
-- Name: SEQUENCE bs_protocol_pub_protocol_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_protocol_pub_protocol_pub_id_seq TO postgres;


--
-- Name: TABLE bs_protocol_step; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_protocol_step TO postgres;


--
-- Name: TABLE bs_protocol_step_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_protocol_step_dbxref TO postgres;


--
-- Name: SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_protocol_step_dbxref_protocol_step_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE bs_protocol_step_protocol_step_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_protocol_step_protocol_step_id_seq TO postgres;


--
-- Name: TABLE bs_sample; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample TO postgres;


--
-- Name: TABLE bs_sample_cvterm; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_cvterm TO postgres;


--
-- Name: SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_cvterm_sample_cvterm_id_seq TO postgres;


--
-- Name: TABLE bs_sample_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_dbxref TO postgres;


--
-- Name: SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_dbxref_sample_dbxref_id_seq TO postgres;


--
-- Name: TABLE bs_sample_element; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_element TO postgres;


--
-- Name: TABLE bs_sample_element_cvterm; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_element_cvterm TO postgres;


--
-- Name: SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_element_cvterm_sample_element_cvterm_id_seq TO postgres;


--
-- Name: TABLE bs_sample_element_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_element_dbxref TO postgres;


--
-- Name: SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_element_dbxref_sample_element_dbxref_id_seq TO postgres;


--
-- Name: TABLE bs_sample_element_file; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_element_file TO postgres;


--
-- Name: SEQUENCE bs_sample_element_file_sample_element_file_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_element_file_sample_element_file_id_seq TO postgres;


--
-- Name: TABLE bs_sample_element_relation; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_element_relation TO postgres;


--
-- Name: SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_element_relation_sample_element_relation_id_seq TO postgres;


--
-- Name: SEQUENCE bs_sample_element_sample_element_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_element_sample_element_id_seq TO postgres;


--
-- Name: TABLE bs_sample_file; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_file TO postgres;


--
-- Name: SEQUENCE bs_sample_file_sample_file_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_file_sample_file_id_seq TO postgres;


--
-- Name: TABLE bs_sample_pub; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_pub TO postgres;


--
-- Name: SEQUENCE bs_sample_pub_sample_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_pub_sample_pub_id_seq TO postgres;


--
-- Name: TABLE bs_sample_relationship; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_sample_relationship TO postgres;


--
-- Name: SEQUENCE bs_sample_relationship_sample_relationship_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_relationship_sample_relationship_id_seq TO postgres;


--
-- Name: SEQUENCE bs_sample_sample_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_sample_sample_id_seq TO postgres;


--
-- Name: TABLE bs_tool; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_tool TO postgres;


--
-- Name: TABLE bs_tool_pub; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON TABLE biosource.bs_tool_pub TO postgres;


--
-- Name: SEQUENCE bs_tool_pub_tool_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_tool_pub_tool_pub_id_seq TO postgres;


--
-- Name: SEQUENCE bs_tool_tool_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

GRANT SELECT ON SEQUENCE biosource.bs_tool_tool_id_seq TO postgres;


--
-- Name: TABLE ge_cluster_analysis; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_cluster_analysis TO postgres;


--
-- Name: SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_cluster_analysis_cluster_analysis_id_seq TO postgres;


--
-- Name: TABLE ge_cluster_member; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_cluster_member TO postgres;


--
-- Name: SEQUENCE ge_cluster_member_cluster_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_cluster_member_cluster_member_id_seq TO postgres;


--
-- Name: TABLE ge_cluster_profile; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_cluster_profile TO postgres;


--
-- Name: SEQUENCE ge_cluster_profile_cluster_profile_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_cluster_profile_cluster_profile_id_seq TO postgres;


--
-- Name: TABLE ge_correlation_analysis; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_correlation_analysis TO postgres;


--
-- Name: SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_correlation_analysis_correlation_analysis_id_seq TO postgres;


--
-- Name: TABLE ge_correlation_member; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_correlation_member TO postgres;


--
-- Name: SEQUENCE ge_correlation_member_correlation_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_correlation_member_correlation_member_id_seq TO postgres;


--
-- Name: TABLE ge_data_analysis_process; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_data_analysis_process TO postgres;


--
-- Name: SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_data_analysis_process_data_analysis_process_id_seq TO postgres;


--
-- Name: TABLE ge_diff_expression; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_diff_expression TO postgres;


--
-- Name: SEQUENCE ge_diff_expression_diff_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_diff_expression_diff_expression_id_seq TO postgres;


--
-- Name: TABLE ge_experiment; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experiment TO postgres;


--
-- Name: TABLE ge_experiment_analysis_group; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experiment_analysis_group TO postgres;


--
-- Name: SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experiment_analysis_group_experiment_analysis_group_id_seq TO postgres;


--
-- Name: TABLE ge_experiment_analysis_member; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experiment_analysis_member TO postgres;


--
-- Name: SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experiment_analysis_member_experiment_analysis_member_id_seq TO postgres;


--
-- Name: TABLE ge_experiment_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experiment_dbxref TO postgres;


--
-- Name: SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experiment_dbxref_experiment_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE ge_experiment_experiment_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experiment_experiment_id_seq TO postgres;


--
-- Name: TABLE ge_experimental_design; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experimental_design TO postgres;


--
-- Name: TABLE ge_experimental_design_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experimental_design_dbxref TO postgres;


--
-- Name: SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experimental_design_dbxref_experimental_design_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE ge_experimental_design_experimental_design_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experimental_design_experimental_design_id_seq TO postgres;


--
-- Name: TABLE ge_experimental_design_pub; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_experimental_design_pub TO postgres;


--
-- Name: SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_experimental_design_pub_experimental_design_pub_id_seq TO postgres;


--
-- Name: TABLE ge_expression_by_experiment; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_expression_by_experiment TO postgres;


--
-- Name: SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_expression_by_experiment_expression_by_experiment_id_seq TO postgres;


--
-- Name: TABLE ge_fluorescanning; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_fluorescanning TO postgres;


--
-- Name: SEQUENCE ge_fluorescanning_fluorescanning_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_fluorescanning_fluorescanning_id_seq TO postgres;


--
-- Name: TABLE ge_hybridization; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_hybridization TO postgres;


--
-- Name: SEQUENCE ge_hybridization_hybridization_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_hybridization_hybridization_id_seq TO postgres;


--
-- Name: TABLE ge_platform; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_platform TO postgres;


--
-- Name: TABLE ge_platform_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_platform_dbxref TO postgres;


--
-- Name: SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_platform_dbxref_platform_dbxref_id_seq TO postgres;


--
-- Name: TABLE ge_platform_design; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_platform_design TO postgres;


--
-- Name: SEQUENCE ge_platform_design_platform_design_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_platform_design_platform_design_id_seq TO postgres;


--
-- Name: SEQUENCE ge_platform_platform_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_platform_platform_id_seq TO postgres;


--
-- Name: TABLE ge_platform_pub; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_platform_pub TO postgres;


--
-- Name: SEQUENCE ge_platform_pub_platform_pub_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_platform_pub_platform_pub_id_seq TO postgres;


--
-- Name: TABLE ge_probe; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_probe TO postgres;


--
-- Name: TABLE ge_probe_expression; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_probe_expression TO postgres;


--
-- Name: SEQUENCE ge_probe_expression_probe_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_probe_expression_probe_expression_id_seq TO postgres;


--
-- Name: SEQUENCE ge_probe_probe_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_probe_probe_id_seq TO postgres;


--
-- Name: TABLE ge_probe_spot; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_probe_spot TO postgres;


--
-- Name: TABLE ge_probe_spot_coordinate; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_probe_spot_coordinate TO postgres;


--
-- Name: SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_probe_spot_coordinate_probe_spot_coordinate_id_seq TO postgres;


--
-- Name: SEQUENCE ge_probe_spot_probe_spot_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_probe_spot_probe_spot_id_seq TO postgres;


--
-- Name: TABLE ge_profile_element; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_profile_element TO postgres;


--
-- Name: SEQUENCE ge_profile_element_profile_element_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_profile_element_profile_element_id_seq TO postgres;


--
-- Name: TABLE ge_target; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_target TO postgres;


--
-- Name: TABLE ge_target_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_target_dbxref TO postgres;


--
-- Name: SEQUENCE ge_target_dbxref_target_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_target_dbxref_target_dbxref_id_seq TO postgres;


--
-- Name: TABLE ge_target_element; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_target_element TO postgres;


--
-- Name: SEQUENCE ge_target_element_target_element_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_target_element_target_element_id_seq TO postgres;


--
-- Name: SEQUENCE ge_target_target_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_target_target_id_seq TO postgres;


--
-- Name: TABLE ge_technology_type; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_technology_type TO postgres;


--
-- Name: SEQUENCE ge_technology_type_technology_type_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_technology_type_technology_type_id_seq TO postgres;


--
-- Name: TABLE ge_template; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_template TO postgres;


--
-- Name: TABLE ge_template_dbiref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_template_dbiref TO postgres;


--
-- Name: SEQUENCE ge_template_dbiref_template_dbiref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_template_dbiref_template_dbiref_id_seq TO postgres;


--
-- Name: TABLE ge_template_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_template_dbxref TO postgres;


--
-- Name: SEQUENCE ge_template_dbxref_template_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_template_dbxref_template_dbxref_id_seq TO postgres;


--
-- Name: TABLE ge_template_diff_expression; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_template_diff_expression TO postgres;


--
-- Name: SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_template_diff_expression_template_diff_expression_id_seq TO postgres;


--
-- Name: TABLE ge_template_expression; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON TABLE gem.ge_template_expression TO postgres;


--
-- Name: SEQUENCE ge_template_expression_template_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_template_expression_template_expression_id_seq TO postgres;


--
-- Name: SEQUENCE ge_template_template_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

GRANT SELECT ON SEQUENCE gem.ge_template_template_id_seq TO postgres;


--
-- Name: TABLE blast_defline; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.blast_defline TO postgres;


--
-- Name: TABLE blast_hit; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.blast_hit TO postgres;


--
-- Name: TABLE blast_query; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.blast_query TO postgres;


--
-- Name: TABLE chromat; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.chromat TO postgres;


--
-- Name: TABLE clone; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.clone TO postgres;


--
-- Name: TABLE clone_feature; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.clone_feature TO PUBLIC;
GRANT SELECT ON TABLE genomic.clone_feature TO postgres;


--
-- Name: TABLE clone_type; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.clone_type TO postgres;


--
-- Name: TABLE genbank_submission; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.genbank_submission TO postgres;


--
-- Name: TABLE gss; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.gss TO postgres;


--
-- Name: TABLE gss_submitted_to_genbank; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.gss_submitted_to_genbank TO postgres;


--
-- Name: TABLE library; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.library TO postgres;


--
-- Name: TABLE library_annotation_db; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.library_annotation_db TO postgres;


--
-- Name: TABLE library_shortname_abbreviation; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.library_shortname_abbreviation TO PUBLIC;


--
-- Name: TABLE qc_report; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.qc_report TO postgres;


--
-- Name: TABLE query_source_type; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.query_source_type TO postgres;


--
-- Name: TABLE read_class; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.read_class TO postgres;


--
-- Name: TABLE sequencing_primer; Type: ACL; Schema: genomic; Owner: postgres
--

GRANT SELECT ON TABLE genomic.sequencing_primer TO PUBLIC;


--
-- Name: TABLE ex_tag; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.ex_tag TO postgres;


--
-- Name: TABLE experiment; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.experiment TO postgres;


--
-- Name: SEQUENCE experiment_experiment_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT ALL ON SEQUENCE insitu.experiment_experiment_id_seq TO postgres;


--
-- Name: TABLE experiment_image; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE insitu.experiment_image TO postgres;


--
-- Name: SEQUENCE experiment_image_experiment_image_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE insitu.experiment_image_experiment_image_id_seq TO postgres;


--
-- Name: TABLE experiment_tag; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.experiment_tag TO postgres;


--
-- Name: SEQUENCE experiment_tag_experiment_tag_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE insitu.experiment_tag_experiment_tag_id_seq TO postgres;


--
-- Name: TABLE image_tag; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.image_tag TO postgres;


--
-- Name: TABLE is_organism; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.is_organism TO postgres;


--
-- Name: SEQUENCE is_organism_is_organism_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT ALL ON SEQUENCE insitu.is_organism_is_organism_id_seq TO postgres;


--
-- Name: TABLE probe; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.probe TO postgres;


--
-- Name: SEQUENCE probe_probe_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT ALL ON SEQUENCE insitu.probe_probe_id_seq TO postgres;


--
-- Name: TABLE tag; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.tag TO postgres;


--
-- Name: TABLE tag_implication; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE insitu.tag_implication TO postgres;


--
-- Name: SEQUENCE tag_tag_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

GRANT ALL ON SEQUENCE insitu.tag_tag_id_seq TO postgres;


--
-- Name: TABLE attribution; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE metadata.attribution TO postgres;


--
-- Name: SEQUENCE attribution_attribution_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.attribution_attribution_id_seq TO postgres;


--
-- Name: TABLE attribution_to; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE metadata.attribution_to TO postgres;


--
-- Name: SEQUENCE attribution_to_attribution_to_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.attribution_to_attribution_to_id_seq TO postgres;


--
-- Name: TABLE comments; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE metadata.comments TO postgres;


--
-- Name: SEQUENCE comments_comment_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.comments_comment_id_seq TO postgres;


--
-- Name: TABLE md_dbipath; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_dbipath TO postgres;


--
-- Name: SEQUENCE md_dbipath_dbipath_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON SEQUENCE metadata.md_dbipath_dbipath_id_seq TO postgres;


--
-- Name: TABLE md_dbiref; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_dbiref TO postgres;


--
-- Name: SEQUENCE md_dbiref_dbiref_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON SEQUENCE metadata.md_dbiref_dbiref_id_seq TO postgres;


--
-- Name: TABLE md_dbversion; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_dbversion TO postgres;


--
-- Name: SEQUENCE md_dbversion_dbversion_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON SEQUENCE metadata.md_dbversion_dbversion_id_seq TO postgres;


--
-- Name: TABLE md_files; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE metadata.md_files TO postgres;


--
-- Name: SEQUENCE md_files_file_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE metadata.md_files_file_id_seq TO postgres;


--
-- Name: TABLE md_groupmembers; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_groupmembers TO postgres;


--
-- Name: SEQUENCE md_groupmembers_groupmember_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON SEQUENCE metadata.md_groupmembers_groupmember_id_seq TO postgres;


--
-- Name: TABLE md_groups; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_groups TO postgres;


--
-- Name: SEQUENCE md_groups_group_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON SEQUENCE metadata.md_groups_group_id_seq TO postgres;


--
-- Name: TABLE md_image; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE metadata.md_image TO postgres;


--
-- Name: TABLE md_image_cvterm; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT ON TABLE metadata.md_image_cvterm TO postgres;


--
-- Name: SEQUENCE md_image_cvterm_md_image_cvterm_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT USAGE ON SEQUENCE metadata.md_image_cvterm_md_image_cvterm_id_seq TO postgres;


--
-- Name: SEQUENCE md_image_image_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.md_image_image_id_seq TO postgres;


--
-- Name: TABLE md_image_organism; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE metadata.md_image_organism TO postgres;


--
-- Name: SEQUENCE md_image_organism_md_image_organism_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT USAGE ON SEQUENCE metadata.md_image_organism_md_image_organism_id_seq TO postgres;


--
-- Name: TABLE md_metadata; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE metadata.md_metadata TO postgres;


--
-- Name: SEQUENCE md_metadata_metadata_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE metadata.md_metadata_metadata_id_seq TO postgres;


--
-- Name: TABLE md_tag; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE metadata.md_tag TO postgres;


--
-- Name: TABLE md_tag_image; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE metadata.md_tag_image TO postgres;


--
-- Name: SEQUENCE md_tag_image_tag_image_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.md_tag_image_tag_image_id_seq TO postgres;


--
-- Name: SEQUENCE md_tag_tag_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.md_tag_tag_id_seq TO postgres;


--
-- Name: TABLE roles; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE metadata.roles TO postgres;


--
-- Name: SEQUENCE roles_role_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE metadata.roles_role_id_seq TO postgres;


--
-- Name: TABLE data_points; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.data_points TO postgres;


--
-- Name: TABLE genotypes; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.genotypes TO postgres;


--
-- Name: TABLE images; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.images TO postgres;


--
-- Name: TABLE locations; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.locations TO postgres;


--
-- Name: TABLE organs; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.organs TO postgres;


--
-- Name: TABLE plants; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.plants TO postgres;


--
-- Name: TABLE populations; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.populations TO postgres;


--
-- Name: TABLE properties; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.properties TO postgres;


--
-- Name: TABLE samples; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.samples TO postgres;


--
-- Name: TABLE sources; Type: ACL; Schema: pheno_population; Owner: postgres
--

GRANT SELECT ON TABLE pheno_population.sources TO postgres;


--
-- Name: TABLE allele; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.allele TO postgres;


--
-- Name: TABLE allele_alias; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.allele_alias TO postgres;


--
-- Name: SEQUENCE allele_alias_allele_alias_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT UPDATE ON SEQUENCE phenome.allele_alias_allele_alias_id_seq TO postgres;


--
-- Name: SEQUENCE allele_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.allele_allele_id_seq TO postgres;


--
-- Name: TABLE allele_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.allele_dbxref TO postgres;


--
-- Name: SEQUENCE allele_dbxref_allele_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.allele_dbxref_allele_dbxref_id_seq TO postgres;


--
-- Name: TABLE allele_history; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT ON TABLE phenome.allele_history TO postgres;


--
-- Name: SEQUENCE allele_history_allele_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.allele_history_allele_history_id_seq TO postgres;


--
-- Name: TABLE cross_type; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.cross_type TO postgres;


--
-- Name: SEQUENCE cross_type_cross_type_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.cross_type_cross_type_id_seq TO postgres;


--
-- Name: TABLE cvterm_pub_ranking; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.cvterm_pub_ranking TO postgres;


--
-- Name: TABLE dbxref_type; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.dbxref_type TO postgres;


--
-- Name: SEQUENCE dbxref_type_dbxref_type_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.dbxref_type_dbxref_type_id_seq TO postgres;


--
-- Name: TABLE genotype; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.genotype TO postgres;


--
-- Name: TABLE genotype_experiment; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.genotype_experiment TO postgres;


--
-- Name: SEQUENCE genotype_experiment_genotype_experiment_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.genotype_experiment_genotype_experiment_id_seq TO postgres;


--
-- Name: SEQUENCE genotype_genotype_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.genotype_genotype_id_seq TO postgres;


--
-- Name: TABLE genotype_region; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.genotype_region TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE phenome.genotype_region TO postgres;


--
-- Name: SEQUENCE genotype_region_genotype_region_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.genotype_region_genotype_region_id_seq TO postgres;


--
-- Name: TABLE germplasm; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.germplasm TO postgres;


--
-- Name: SEQUENCE germplasm_germplasm_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.germplasm_germplasm_id_seq TO postgres;


--
-- Name: TABLE individual; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual TO postgres;


--
-- Name: TABLE individual_allele; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_allele TO postgres;


--
-- Name: SEQUENCE individual_allele_individual_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_allele_individual_allele_id_seq TO postgres;


--
-- Name: TABLE individual_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_dbxref TO postgres;


--
-- Name: TABLE individual_dbxref_evidence; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_dbxref_evidence TO postgres;


--
-- Name: TABLE individual_dbxref_evidence_history; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_dbxref_evidence_history TO postgres;


--
-- Name: SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq TO postgres;


--
-- Name: SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_dbxref_evidence_individual_dbxref_evidence_id_seq TO postgres;


--
-- Name: SEQUENCE individual_dbxref_individual_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_dbxref_individual_dbxref_id_seq TO postgres;


--
-- Name: TABLE individual_history; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_history TO postgres;


--
-- Name: SEQUENCE individual_history_individual_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_history_individual_history_id_seq TO postgres;


--
-- Name: TABLE individual_image; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.individual_image TO postgres;


--
-- Name: SEQUENCE individual_image_individual_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.individual_image_individual_image_id_seq TO postgres;


--
-- Name: SEQUENCE individual_individual_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.individual_individual_id_seq TO postgres;


--
-- Name: TABLE individual_locus; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.individual_locus TO postgres;


--
-- Name: TABLE is_public; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.is_public TO postgres;


--
-- Name: SEQUENCE is_public_is_public_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.is_public_is_public_id_seq TO postgres;


--
-- Name: TABLE locus; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus TO postgres;


--
-- Name: TABLE locus2locus; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus2locus TO postgres;


--
-- Name: SEQUENCE locus2locus_locus2locus_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus2locus_locus2locus_id_seq TO postgres;


--
-- Name: TABLE locus_alias; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locus_alias TO postgres;


--
-- Name: SEQUENCE locus_alias_locus_alias_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.locus_alias_locus_alias_id_seq TO postgres;


--
-- Name: TABLE locus_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus_dbxref TO postgres;


--
-- Name: TABLE locus_dbxref_evidence; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus_dbxref_evidence TO postgres;


--
-- Name: TABLE locus_dbxref_evidence_history; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT ON TABLE phenome.locus_dbxref_evidence_history TO postgres;


--
-- Name: SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq TO postgres;


--
-- Name: SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_dbxref_evidence_locus_dbxref_evidence_id_seq TO postgres;


--
-- Name: SEQUENCE locus_dbxref_locus_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_dbxref_locus_dbxref_id_seq TO postgres;


--
-- Name: TABLE locus_history; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT ON TABLE phenome.locus_history TO postgres;


--
-- Name: SEQUENCE locus_history_locus_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_history_locus_history_id_seq TO postgres;


--
-- Name: TABLE locus_image; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus_image TO postgres;


--
-- Name: SEQUENCE locus_image_locus_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_image_locus_image_id_seq TO postgres;


--
-- Name: SEQUENCE locus_locus_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.locus_locus_id_seq TO postgres;


--
-- Name: TABLE locus_marker; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.locus_marker TO postgres;


--
-- Name: TABLE locus_owner; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus_owner TO postgres;


--
-- Name: SEQUENCE locus_owner_locus_owner_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_owner_locus_owner_id_seq TO postgres;


--
-- Name: TABLE locus_pub_ranking; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locus_pub_ranking TO postgres;


--
-- Name: TABLE locus_pub_ranking_validate; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locus_pub_ranking_validate TO postgres;


--
-- Name: TABLE locus_registry; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.locus_registry TO postgres;


--
-- Name: SEQUENCE locus_registry_locus_registry_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_registry_locus_registry_id_seq TO postgres;


--
-- Name: TABLE locus_unigene; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locus_unigene TO postgres;


--
-- Name: SEQUENCE locus_unigene_locus_unigene_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.locus_unigene_locus_unigene_id_seq TO postgres;


--
-- Name: TABLE locusgroup; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locusgroup TO postgres;


--
-- Name: SEQUENCE locusgroup_locusgroup_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.locusgroup_locusgroup_id_seq TO postgres;


--
-- Name: TABLE locusgroup_member; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.locusgroup_member TO postgres;


--
-- Name: SEQUENCE locusgroup_member_locusgroup_member_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.locusgroup_member_locusgroup_member_id_seq TO postgres;


--
-- Name: TABLE nd_experiment_md_files; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE phenome.nd_experiment_md_files TO postgres;


--
-- Name: SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT USAGE ON SEQUENCE phenome.nd_experiment_md_files_nd_experiment_md_files_id_seq TO postgres;


--
-- Name: TABLE phenotype_user_trait; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.phenotype_user_trait TO postgres;


--
-- Name: SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.phenotype_user_trait_phenotype_user_trait_id_seq TO postgres;


--
-- Name: TABLE polymorphic_fragment; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.polymorphic_fragment TO postgres;


--
-- Name: SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.polymorphic_fragment_polymorphic_fragment_id_seq TO postgres;


--
-- Name: TABLE population; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.population TO postgres;


--
-- Name: TABLE population_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.population_dbxref TO postgres;


--
-- Name: SEQUENCE population_dbxref_population_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.population_dbxref_population_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE population_population_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.population_population_id_seq TO postgres;


--
-- Name: TABLE pub_curator; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.pub_curator TO postgres;


--
-- Name: SEQUENCE pub_curator_pub_curator_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.pub_curator_pub_curator_id_seq TO postgres;


--
-- Name: TABLE registry; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.registry TO postgres;


--
-- Name: SEQUENCE registry_registry_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.registry_registry_id_seq TO postgres;


--
-- Name: TABLE stock_allele; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.stock_allele TO postgres;


--
-- Name: SEQUENCE stock_allele_stock_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT USAGE ON SEQUENCE phenome.stock_allele_stock_allele_id_seq TO postgres;


--
-- Name: TABLE stock_image; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.stock_image TO postgres;


--
-- Name: SEQUENCE stock_image_stock_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT USAGE ON SEQUENCE phenome.stock_image_stock_image_id_seq TO postgres;


--
-- Name: TABLE stock_owner; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.stock_owner TO postgres;


--
-- Name: SEQUENCE stock_owner_stock_owner_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT USAGE ON SEQUENCE phenome.stock_owner_stock_owner_id_seq TO postgres;


--
-- Name: TABLE tomato_il_bin; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.tomato_il_bin TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE phenome.tomato_il_bin TO postgres;


--
-- Name: SEQUENCE tomato_il_bin_il_bin_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.tomato_il_bin_il_bin_id_seq TO postgres;


--
-- Name: TABLE tomato_term; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.tomato_term TO postgres;


--
-- Name: TABLE tomato_term2term; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.tomato_term2term TO postgres;


--
-- Name: SEQUENCE tomato_term2term_tomato_term2term_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.tomato_term2term_tomato_term2term_id_seq TO postgres;


--
-- Name: SEQUENCE tomato_term_tomato_term_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.tomato_term_tomato_term_id_seq TO postgres;


--
-- Name: TABLE unit; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.unit TO postgres;


--
-- Name: SEQUENCE unit_unit_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.unit_unit_id_seq TO postgres;


--
-- Name: TABLE user_trait; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.user_trait TO postgres;


--
-- Name: TABLE user_trait_unit; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE phenome.user_trait_unit TO postgres;


--
-- Name: SEQUENCE user_trait_unit_user_trait_unit_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.user_trait_unit_user_trait_unit_id_seq TO postgres;


--
-- Name: SEQUENCE user_trait_user_trait_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE phenome.user_trait_user_trait_id_seq TO postgres;


--
-- Name: TABLE variant; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT SELECT ON TABLE phenome.variant TO postgres;


--
-- Name: SEQUENCE variant_variant_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

GRANT ALL ON SEQUENCE phenome.variant_variant_id_seq TO postgres;


--
-- Name: TABLE ba_plausibility; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.ba_plausibility TO postgres;


--
-- Name: SEQUENCE ba_plausibility_bap_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.ba_plausibility_bap_id_seq TO postgres;


--
-- Name: TABLE bac_associations; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bac_associations TO postgres;


--
-- Name: SEQUENCE bac_associations_bac_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.bac_associations_bac_assoc_id_seq TO postgres;


--
-- Name: TABLE bac_consensus_sequences; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bac_consensus_sequences TO postgres;


--
-- Name: SEQUENCE bac_consensus_sequences_consensus_seq_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.bac_consensus_sequences_consensus_seq_id_seq TO postgres;


--
-- Name: TABLE bac_contigs; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bac_contigs TO postgres;


--
-- Name: SEQUENCE bac_contigs_bac_contig_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.bac_contigs_bac_contig_id_seq TO postgres;


--
-- Name: TABLE bac_end_sequences; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bac_end_sequences TO postgres;


--
-- Name: SEQUENCE bac_end_sequences_end_seq_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.bac_end_sequences_end_seq_id_seq TO postgres;


--
-- Name: TABLE bac_marker_matches; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bac_marker_matches TO postgres;


--
-- Name: TABLE bacs; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.bacs TO postgres;


--
-- Name: SEQUENCE bacs_bac_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.bacs_bac_id_seq TO postgres;


--
-- Name: TABLE computational_associations; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.computational_associations TO postgres;


--
-- Name: TABLE contig_sizes; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.contig_sizes TO postgres;


--
-- Name: SEQUENCE contig_sizes_contig_size_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.contig_sizes_contig_size_id_seq TO postgres;


--
-- Name: TABLE deprecated_probes; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.deprecated_probes TO postgres;


--
-- Name: SEQUENCE deprecated_probes_dp_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.deprecated_probes_dp_id_seq TO postgres;


--
-- Name: TABLE fpc_data; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.fpc_data TO postgres;


--
-- Name: SEQUENCE fpc_data_fpc_datum_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.fpc_data_fpc_datum_id_seq TO postgres;


--
-- Name: TABLE fpc_version; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.fpc_version TO postgres;


--
-- Name: SEQUENCE fpc_version_fpc_version_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.fpc_version_fpc_version_seq TO postgres;


--
-- Name: TABLE manual_associations; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.manual_associations TO postgres;


--
-- Name: TABLE oa_plausibility; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.oa_plausibility TO postgres;


--
-- Name: SEQUENCE oa_plausibility_oap_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.oa_plausibility_oap_id_seq TO postgres;


--
-- Name: TABLE overgo_associations; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.overgo_associations TO postgres;


--
-- Name: SEQUENCE overgo_associations_overgo_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.overgo_associations_overgo_assoc_id_seq TO postgres;


--
-- Name: TABLE overgo_plates; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.overgo_plates TO postgres;


--
-- Name: SEQUENCE overgo_plates_plate_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.overgo_plates_plate_id_seq TO postgres;


--
-- Name: TABLE overgo_results; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.overgo_results TO postgres;


--
-- Name: SEQUENCE overgo_results_result_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.overgo_results_result_id_seq TO postgres;


--
-- Name: TABLE overgo_version; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.overgo_version TO postgres;


--
-- Name: SEQUENCE overgo_version_overgo_version_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.overgo_version_overgo_version_seq TO postgres;


--
-- Name: TABLE plausible_bacs_in_all_contigs; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.plausible_bacs_in_all_contigs TO postgres;


--
-- Name: TABLE probe_markers; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.probe_markers TO postgres;


--
-- Name: SEQUENCE probe_markers_overgo_probe_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.probe_markers_overgo_probe_id_seq TO postgres;


--
-- Name: TABLE species; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.species TO postgres;


--
-- Name: SEQUENCE species_species_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.species_species_id_seq TO postgres;


--
-- Name: TABLE tentative_association_conflict_groups; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.tentative_association_conflict_groups TO postgres;


--
-- Name: SEQUENCE tentative_association_conflict_groups_tacg_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.tentative_association_conflict_groups_tacg_id_seq TO postgres;


--
-- Name: TABLE tentative_overgo_associations; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.tentative_overgo_associations TO postgres;


--
-- Name: SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.tentative_overgo_associations_tentative_assoc_id_seq TO postgres;


--
-- Name: TABLE users; Type: ACL; Schema: physical; Owner: postgres
--

GRANT SELECT ON TABLE physical.users TO postgres;


--
-- Name: SEQUENCE users_user_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

GRANT ALL ON SEQUENCE physical.users_user_id_seq TO postgres;


--
-- Name: TABLE stock; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock TO postgres;


--
-- Name: TABLE nd_experiment; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment TO postgres;


--
-- Name: TABLE nd_experiment_phenotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_phenotype TO postgres;


--
-- Name: TABLE nd_experiment_project; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_project TO postgres;


--
-- Name: TABLE nd_experiment_stock; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_stock TO postgres;


--
-- Name: TABLE nd_geolocation; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_geolocation TO postgres;


--
-- Name: TABLE phenotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.phenotype TO postgres;


--
-- Name: TABLE project; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project TO postgres;


--
-- Name: TABLE project_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project_relationship TO postgres;


--
-- Name: TABLE projectprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.projectprop TO postgres;


--
-- Name: TABLE stock_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock_relationship TO postgres;


--
-- Name: TABLE nd_experiment_genotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_genotype TO postgres;


--
-- Name: TABLE nd_experiment_protocol; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_protocol TO postgres;


--
-- Name: TABLE nd_protocol; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_protocol TO postgres;


--
-- Name: TABLE cvterm_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cvterm_relationship TO postgres;


--
-- Name: TABLE cv; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cv TO postgres;


--
-- Name: TABLE analysis; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.analysis TO postgres;


--
-- Name: TABLE analysisfeature; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.analysisfeature TO postgres;


--
-- Name: TABLE analysisprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.analysisprop TO postgres;


--
-- Name: TABLE ara_annotation; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_annotation TO postgres;


--
-- Name: TABLE ara_domain; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_domain TO postgres;


--
-- Name: TABLE ara_evidef; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_evidef TO postgres;


--
-- Name: TABLE ara_family; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_family TO postgres;


--
-- Name: TABLE ara_gfp_ms; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_gfp_ms TO postgres;


--
-- Name: TABLE ara_go_term; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_go_term TO postgres;


--
-- Name: TABLE ara_interactome_all; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_interactome_all TO postgres;


--
-- Name: TABLE ara_interactome_unique; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_interactome_unique TO postgres;


--
-- Name: TABLE ara_intron; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_intron TO postgres;


--
-- Name: TABLE ara_map; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_map TO postgres;


--
-- Name: TABLE ara_myristoylation; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_myristoylation TO postgres;


--
-- Name: TABLE ara_pmidlink; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_pmidlink TO postgres;


--
-- Name: TABLE ara_prefix_info; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_prefix_info TO postgres;


--
-- Name: TABLE ara_properties; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_properties TO postgres;


--
-- Name: TABLE ara_scop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_scop TO postgres;


--
-- Name: TABLE ara_sequence; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_sequence TO postgres;


--
-- Name: TABLE ara_signalp; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_signalp TO postgres;


--
-- Name: TABLE ara_targetp; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_targetp TO postgres;


--
-- Name: TABLE ara_users; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.ara_users TO postgres;


--
-- Name: TABLE blastwatch_queries; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.blastwatch_queries TO postgres;


--
-- Name: SEQUENCE blastwatch_queries_blastwatch_queries_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.blastwatch_queries_blastwatch_queries_id_seq TO postgres;


--
-- Name: TABLE blastwatch_results; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.blastwatch_results TO postgres;


--
-- Name: SEQUENCE blastwatch_results_blastwatch_results_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.blastwatch_results_blastwatch_results_id_seq TO postgres;


--
-- Name: TABLE bug; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.bug TO postgres;


--
-- Name: SEQUENCE bug_bug_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.bug_bug_id_seq TO postgres;


--
-- Name: TABLE contact; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.contact TO postgres;


--
-- Name: SEQUENCE contact_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.contact_contact_id_seq TO postgres;


--
-- Name: TABLE contact_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.contact_relationship TO postgres;


--
-- Name: SEQUENCE contact_relationship_contact_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.contact_relationship_contact_relationship_id_seq TO postgres;


--
-- Name: SEQUENCE cv_cv_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.cv_cv_id_seq TO postgres;


--
-- Name: TABLE cvprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cvprop TO postgres;


--
-- Name: SEQUENCE cvterm_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE,UPDATE ON SEQUENCE public.cvterm_cvterm_id_seq TO postgres;


--
-- Name: TABLE cvterm_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.cvterm_dbxref TO postgres;


--
-- Name: SEQUENCE cvterm_relationship_cvterm_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cvterm_relationship_cvterm_relationship_id_seq TO postgres;


--
-- Name: TABLE cvtermpath; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.cvtermpath TO postgres;


--
-- Name: TABLE cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.cvtermprop TO postgres;


--
-- Name: TABLE cvtermsynonym; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cvtermsynonym TO postgres;


--
-- Name: SEQUENCE cvtermsynonym_cvtermsynonym_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cvtermsynonym_cvtermsynonym_id_seq TO postgres;


--
-- Name: TABLE cxgn_bac_pipeline_genbank_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cxgn_bac_pipeline_genbank_log TO postgres;


--
-- Name: SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cxgn_bac_pipeline_genbank_log_id_seq TO postgres;


--
-- Name: TABLE cxgn_bac_pipeline_loading_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cxgn_bac_pipeline_loading_log TO postgres;


--
-- Name: SEQUENCE cxgn_bac_pipeline_loading_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cxgn_bac_pipeline_loading_log_id_seq TO postgres;


--
-- Name: TABLE cxgn_bac_pipeline_processing_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cxgn_bac_pipeline_processing_log TO postgres;


--
-- Name: SEQUENCE cxgn_bac_pipeline_processing_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cxgn_bac_pipeline_processing_log_id_seq TO postgres;


--
-- Name: TABLE cxgn_indexedlog_test_feel_free_to_delete_me; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cxgn_indexedlog_test_feel_free_to_delete_me TO postgres;


--
-- Name: SEQUENCE dbxref_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.dbxref_dbxref_id_seq TO postgres;


--
-- Name: TABLE dbxrefprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.dbxrefprop TO postgres;


--
-- Name: TABLE environment; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.environment TO postgres;


--
-- Name: TABLE environment_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.environment_cvterm TO postgres;


--
-- Name: SEQUENCE environment_cvterm_environment_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.environment_cvterm_environment_cvterm_id_seq TO postgres;


--
-- Name: SEQUENCE environment_environment_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.environment_environment_id_seq TO postgres;


--
-- Name: TABLE enzyme_restriction_sites; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.enzyme_restriction_sites TO postgres;


--
-- Name: TABLE family; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.family TO postgres;


--
-- Name: TABLE family; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.family TO postgres;


--
-- Name: TABLE family_build; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.family_build TO postgres;


--
-- Name: TABLE family_build; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.family_build TO postgres;


--
-- Name: TABLE family_member; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.family_member TO postgres;


--
-- Name: TABLE family_member; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.family_member TO postgres;


--
-- Name: TABLE feature_cvterm_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_cvterm_dbxref TO postgres;


--
-- Name: TABLE feature_cvterm_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_cvterm_pub TO postgres;


--
-- Name: TABLE feature_cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_cvtermprop TO postgres;


--
-- Name: SEQUENCE feature_dbxref_feature_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.feature_dbxref_feature_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE feature_feature_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.feature_feature_id_seq TO postgres;


--
-- Name: TABLE feature_genotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.feature_genotype TO postgres;


--
-- Name: SEQUENCE feature_genotype_feature_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.feature_genotype_feature_genotype_id_seq TO postgres;


--
-- Name: TABLE feature_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_relationship TO postgres;


--
-- Name: TABLE feature_relationship_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_relationship_pub TO postgres;


--
-- Name: TABLE feature_relationshipprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_relationshipprop TO postgres;


--
-- Name: TABLE feature_relationshipprop_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.feature_relationshipprop_pub TO postgres;


--
-- Name: TABLE featureloc_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.featureloc_pub TO postgres;


--
-- Name: TABLE featureprop_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.featureprop_pub TO postgres;


--
-- Name: TABLE forward_amplicon_sequence_information; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.forward_amplicon_sequence_information TO postgres;


--
-- Name: TABLE forward_amplicon_sequence_markers; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.forward_amplicon_sequence_markers TO postgres;


--
-- Name: TABLE fpc_band; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_band TO postgres;


--
-- Name: TABLE fpc_build; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_build TO postgres;


--
-- Name: TABLE fpc_build_fpc_fingerprint; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_build_fpc_fingerprint TO postgres;


--
-- Name: TABLE fpc_contig; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_contig TO postgres;


--
-- Name: TABLE fpc_contig_clone; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_contig_clone TO postgres;


--
-- Name: TABLE fpc_fingerprint; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_fingerprint TO postgres;


--
-- Name: TABLE fpc_series; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.fpc_series TO postgres;


--
-- Name: TABLE genotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.genotype TO postgres;


--
-- Name: SEQUENCE genotype_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.genotype_genotype_id_seq TO postgres;


--
-- Name: TABLE genotypeprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE ON TABLE public.genotypeprop TO postgres;


--
-- Name: SEQUENCE genotypeprop_genotypeprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.genotypeprop_genotypeprop_id_seq TO postgres;


--
-- Name: TABLE gff3atts; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.gff3atts TO postgres;


--
-- Name: TABLE gff3view; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.gff3view TO postgres;


--
-- Name: TABLE gff_meta; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.gff_meta TO postgres;


--
-- Name: TABLE glossary; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.glossary TO postgres;


--
-- Name: TABLE itag_loading_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.itag_loading_log TO postgres;


--
-- Name: SEQUENCE itag_loading_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.itag_loading_log_id_seq TO postgres;


--
-- Name: TABLE marker_names; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.marker_names TO postgres;


--
-- Name: TABLE phenotypeprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.phenotypeprop TO postgres;


--
-- Name: TABLE stockprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stockprop TO postgres;


--
-- Name: TABLE materialized_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.materialized_view TO postgres;


--
-- Name: TABLE nd_experiment_contact; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_contact TO postgres;


--
-- Name: SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_contact_nd_experiment_contact_id_seq TO postgres;


--
-- Name: TABLE nd_experiment_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_dbxref TO postgres;


--
-- Name: SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_genotype_nd_experiment_genotype_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_nd_experiment_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_nd_experiment_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_project_nd_experiment_project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_project_nd_experiment_project_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_protocol_nd_experiment_protocol_id_seq TO postgres;


--
-- Name: TABLE nd_experiment_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_pub TO postgres;


--
-- Name: SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_pub_nd_experiment_pub_id_seq TO postgres;


--
-- Name: TABLE nd_experiment_stock_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_stock_dbxref TO postgres;


--
-- Name: SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_stock_nd_experiment_stock_id_seq TO postgres;


--
-- Name: TABLE nd_experiment_stockprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experiment_stockprop TO postgres;


--
-- Name: SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq TO postgres;


--
-- Name: TABLE nd_experimentprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_experimentprop TO postgres;


--
-- Name: SEQUENCE nd_experimentprop_nd_experimentprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_experimentprop_nd_experimentprop_id_seq TO postgres;


--
-- Name: SEQUENCE nd_geolocation_nd_geolocation_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_geolocation_nd_geolocation_id_seq TO postgres;


--
-- Name: TABLE nd_geolocationprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_geolocationprop TO postgres;


--
-- Name: SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_geolocationprop_nd_geolocationprop_id_seq TO postgres;


--
-- Name: SEQUENCE nd_protocol_nd_protocol_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_protocol_nd_protocol_id_seq TO postgres;


--
-- Name: TABLE nd_protocol_reagent; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_protocol_reagent TO postgres;


--
-- Name: SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_protocol_reagent_nd_protocol_reagent_id_seq TO postgres;


--
-- Name: TABLE nd_protocolprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_protocolprop TO postgres;


--
-- Name: SEQUENCE nd_protocolprop_nd_protocolprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_protocolprop_nd_protocolprop_id_seq TO postgres;


--
-- Name: TABLE nd_reagent; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_reagent TO postgres;


--
-- Name: SEQUENCE nd_reagent_nd_reagent_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_reagent_nd_reagent_id_seq TO postgres;


--
-- Name: TABLE nd_reagent_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_reagent_relationship TO postgres;


--
-- Name: SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_reagent_relationship_nd_reagent_relationship_id_seq TO postgres;


--
-- Name: TABLE nd_reagentprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.nd_reagentprop TO postgres;


--
-- Name: SEQUENCE nd_reagentprop_nd_reagentprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.nd_reagentprop_nd_reagentprop_id_seq TO postgres;


--
-- Name: TABLE organism; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.organism TO postgres;


--
-- Name: TABLE organism_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.organism_dbxref TO postgres;


--
-- Name: SEQUENCE organism_dbxref_organism_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.organism_dbxref_organism_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE organism_organism_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.organism_organism_id_seq TO postgres;


--
-- Name: TABLE organism_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.organism_relationship TO postgres;


--
-- Name: TABLE organismpath; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.organismpath TO postgres;


--
-- Name: TABLE organismprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.organismprop TO postgres;


--
-- Name: SEQUENCE organismprop_organismprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE,UPDATE ON SEQUENCE public.organismprop_organismprop_id_seq TO postgres;


--
-- Name: TABLE phendesc; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.phendesc TO postgres;


--
-- Name: SEQUENCE phendesc_phendesc_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.phendesc_phendesc_id_seq TO postgres;


--
-- Name: TABLE phenotype_comparison; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.phenotype_comparison TO postgres;


--
-- Name: TABLE phenotype_comparison_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.phenotype_comparison_cvterm TO postgres;


--
-- Name: SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq TO postgres;


--
-- Name: SEQUENCE phenotype_comparison_phenotype_comparison_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.phenotype_comparison_phenotype_comparison_id_seq TO postgres;


--
-- Name: TABLE phenotype_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.phenotype_cvterm TO postgres;


--
-- Name: SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.phenotype_cvterm_phenotype_cvterm_id_seq TO postgres;


--
-- Name: SEQUENCE phenotype_phenotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.phenotype_phenotype_id_seq TO postgres;


--
-- Name: SEQUENCE phenotypeprop_phenotypeprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.phenotypeprop_phenotypeprop_id_seq TO postgres;


--
-- Name: TABLE phenstatement; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.phenstatement TO postgres;


--
-- Name: SEQUENCE phenstatement_phenstatement_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON SEQUENCE public.phenstatement_phenstatement_id_seq TO postgres;


--
-- Name: TABLE phylonode; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.phylonode TO postgres;


--
-- Name: TABLE phylonode_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylonode_dbxref TO postgres;


--
-- Name: TABLE phylonode_organism; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.phylonode_organism TO postgres;


--
-- Name: TABLE phylonode_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylonode_pub TO postgres;


--
-- Name: TABLE phylonode_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylonode_relationship TO postgres;


--
-- Name: TABLE phylonodeprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylonodeprop TO postgres;


--
-- Name: TABLE phylotree; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylotree TO postgres;


--
-- Name: TABLE phylotree_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.phylotree_pub TO postgres;


--
-- Name: TABLE project_contact; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project_contact TO postgres;


--
-- Name: SEQUENCE project_contact_project_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.project_contact_project_contact_id_seq TO postgres;


--
-- Name: SEQUENCE project_project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.project_project_id_seq TO postgres;


--
-- Name: TABLE project_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project_pub TO postgres;


--
-- Name: SEQUENCE project_pub_project_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.project_pub_project_pub_id_seq TO postgres;


--
-- Name: SEQUENCE project_relationship_project_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.project_relationship_project_relationship_id_seq TO postgres;


--
-- Name: SEQUENCE projectprop_projectprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.projectprop_projectprop_id_seq TO postgres;


--
-- Name: TABLE pub_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.pub_dbxref TO postgres;


--
-- Name: SEQUENCE pub_dbxref_pub_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.pub_dbxref_pub_dbxref_id_seq TO postgres;


--
-- Name: SEQUENCE pub_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.pub_pub_id_seq TO postgres;


--
-- Name: TABLE pub_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.pub_relationship TO postgres;


--
-- Name: TABLE pubabstract; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.pubabstract TO postgres;


--
-- Name: SEQUENCE pubabstract_pubabstract_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.pubabstract_pubabstract_id_seq TO postgres;


--
-- Name: TABLE pubauthor; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.pubauthor TO postgres;


--
-- Name: SEQUENCE pubauthor_pubauthor_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE public.pubauthor_pubauthor_id_seq TO postgres;


--
-- Name: TABLE pubprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.pubprop TO postgres;


--
-- Name: TABLE resource_file; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.resource_file TO postgres;


--
-- Name: TABLE signalp; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.signalp TO postgres;


--
-- Name: TABLE stock_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock_cvterm TO postgres;


--
-- Name: SEQUENCE stock_cvterm_stock_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_cvterm_stock_cvterm_id_seq TO postgres;


--
-- Name: TABLE stock_cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.stock_cvtermprop TO postgres;


--
-- Name: SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT USAGE ON SEQUENCE public.stock_cvtermprop_stock_cvtermprop_id_seq TO postgres;


--
-- Name: TABLE stock_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock_dbxref TO postgres;


--
-- Name: SEQUENCE stock_dbxref_stock_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_dbxref_stock_dbxref_id_seq TO postgres;


--
-- Name: TABLE stock_dbxrefprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.stock_dbxrefprop TO postgres;


--
-- Name: TABLE stock_genotype; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock_genotype TO postgres;


--
-- Name: SEQUENCE stock_genotype_stock_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_genotype_stock_genotype_id_seq TO postgres;


--
-- Name: TABLE stock_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.stock_pub TO postgres;


--
-- Name: SEQUENCE stock_pub_stock_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_pub_stock_pub_id_seq TO postgres;


--
-- Name: TABLE stock_relationship_cvterm; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.stock_relationship_cvterm TO postgres;


--
-- Name: TABLE stock_relationship_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stock_relationship_pub TO postgres;


--
-- Name: SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_relationship_pub_stock_relationship_pub_id_seq TO postgres;


--
-- Name: SEQUENCE stock_relationship_stock_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_relationship_stock_relationship_id_seq TO postgres;


--
-- Name: SEQUENCE stock_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stock_stock_id_seq TO postgres;


--
-- Name: TABLE stockcollection; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stockcollection TO postgres;


--
-- Name: TABLE stockcollection_stock; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stockcollection_stock TO postgres;


--
-- Name: SEQUENCE stockcollection_stock_stockcollection_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stockcollection_stock_stockcollection_stock_id_seq TO postgres;


--
-- Name: SEQUENCE stockcollection_stockcollection_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stockcollection_stockcollection_id_seq TO postgres;


--
-- Name: TABLE stockcollectionprop; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stockcollectionprop TO postgres;


--
-- Name: SEQUENCE stockcollectionprop_stockcollectionprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stockcollectionprop_stockcollectionprop_id_seq TO postgres;


--
-- Name: TABLE stockprop_pub; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.stockprop_pub TO postgres;


--
-- Name: SEQUENCE stockprop_pub_stockprop_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.stockprop_pub_stockprop_pub_id_seq TO postgres;


--
-- Name: SEQUENCE stockprop_stockprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.stockprop_stockprop_id_seq TO postgres;


--
-- Name: TABLE tableinfo; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.tableinfo TO postgres;


--
-- Name: TABLE tmp_cds_handler; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.tmp_cds_handler TO postgres;


--
-- Name: TABLE tmp_cds_handler_relationship; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.tmp_cds_handler_relationship TO postgres;


--
-- Name: TABLE tmp_gff_load_cache; Type: ACL; Schema: public; Owner: postgres
--

GRANT DELETE ON TABLE public.tmp_gff_load_cache TO postgres;


--
-- Name: TABLE unigene_dbxref; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.unigene_dbxref TO postgres;


--
-- Name: TABLE unigene_relations; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.unigene_relations TO postgres;


--
-- Name: TABLE unigene_signalp; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,DELETE ON TABLE public.unigene_signalp TO postgres;


--
-- Name: TABLE accession; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.accession TO postgres;


--
-- Name: SEQUENCE accession_accession_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.accession_accession_id_seq TO postgres;


--
-- Name: TABLE accession_names; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.accession_names TO postgres;


--
-- Name: SEQUENCE accession_names_accession_name_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.accession_names_accession_name_id_seq TO postgres;


--
-- Name: TABLE annotation_target_type; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.annotation_target_type TO postgres;


--
-- Name: SEQUENCE annotation_target_type_annotation_target_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.annotation_target_type_annotation_target_type_id_seq TO postgres;


--
-- Name: TABLE authors; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.authors TO postgres;


--
-- Name: SEQUENCE authors_author_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.authors_author_id_seq TO postgres;


--
-- Name: TABLE blast_annotations; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_annotations TO postgres;


--
-- Name: SEQUENCE blast_annotations_blast_annotation_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.blast_annotations_blast_annotation_id_seq TO postgres;


--
-- Name: TABLE blast_db; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_db TO postgres;


--
-- Name: TABLE blast_db_blast_db_group; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_db_blast_db_group TO postgres;


--
-- Name: SEQUENCE blast_db_blast_db_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.blast_db_blast_db_id_seq TO postgres;


--
-- Name: TABLE blast_db_group; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_db_group TO postgres;


--
-- Name: TABLE blast_db_organism; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_db_organism TO postgres;


--
-- Name: TABLE blast_defline; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_defline TO postgres;


--
-- Name: SEQUENCE blast_defline_defline_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.blast_defline_defline_id_seq TO postgres;


--
-- Name: TABLE blast_hits; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_hits TO postgres;


--
-- Name: SEQUENCE blast_hits_blast_hit_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.blast_hits_blast_hit_id_seq TO postgres;


--
-- Name: TABLE blast_targets; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.blast_targets TO postgres;


--
-- Name: SEQUENCE blast_targets_blast_target_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.blast_targets_blast_target_id_seq TO postgres;


--
-- Name: TABLE cds; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.cds TO postgres;


--
-- Name: SEQUENCE cds_cds_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.cds_cds_id_seq TO postgres;


--
-- Name: TABLE clone; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.clone TO postgres;


--
-- Name: SEQUENCE clone_clone_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.clone_clone_id_seq TO postgres;


--
-- Name: TABLE cloning_vector; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.cloning_vector TO postgres;


--
-- Name: SEQUENCE cloning_vector_cloning_vector_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.cloning_vector_cloning_vector_id_seq TO postgres;


--
-- Name: TABLE common_name; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.common_name TO postgres;


--
-- Name: SEQUENCE common_name_common_name_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.common_name_common_name_id_seq TO postgres;


--
-- Name: TABLE common_nameprop; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.common_nameprop TO postgres;


--
-- Name: TABLE cos_markers; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.cos_markers TO postgres;


--
-- Name: SEQUENCE cos_markers_cos_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.cos_markers_cos_marker_id_seq TO postgres;


--
-- Name: TABLE cosii_ortholog; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.cosii_ortholog TO postgres;


--
-- Name: SEQUENCE cosii_ortholog_cosii_unigene_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.cosii_ortholog_cosii_unigene_id_seq TO postgres;


--
-- Name: TABLE deprecated_linkage_groups; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_linkage_groups TO postgres;


--
-- Name: SEQUENCE deprecated_linkage_groups_lg_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_linkage_groups_lg_id_seq TO postgres;


--
-- Name: TABLE deprecated_map_cross; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_map_cross TO postgres;


--
-- Name: SEQUENCE deprecated_map_cross_map_cross_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_map_cross_map_cross_id_seq TO postgres;


--
-- Name: TABLE deprecated_mapdata; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_mapdata TO postgres;


--
-- Name: SEQUENCE deprecated_mapdata_loc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_mapdata_loc_id_seq TO postgres;


--
-- Name: TABLE deprecated_maps; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_maps TO postgres;


--
-- Name: SEQUENCE deprecated_maps_map_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_maps_map_id_seq TO postgres;


--
-- Name: TABLE deprecated_marker_confidences; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_marker_confidences TO postgres;


--
-- Name: SEQUENCE deprecated_marker_confidences_confidence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_marker_confidences_confidence_id_seq TO postgres;


--
-- Name: TABLE deprecated_marker_locations; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_marker_locations TO postgres;


--
-- Name: SEQUENCE deprecated_marker_locations_marker_location_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_marker_locations_marker_location_id_seq TO postgres;


--
-- Name: TABLE deprecated_marker_types; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_marker_types TO postgres;


--
-- Name: SEQUENCE deprecated_marker_types_marker_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_marker_types_marker_type_id_seq TO postgres;


--
-- Name: TABLE deprecated_markers; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.deprecated_markers TO postgres;


--
-- Name: SEQUENCE deprecated_markers_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.deprecated_markers_marker_id_seq TO postgres;


--
-- Name: TABLE derived_from_source; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.derived_from_source TO postgres;


--
-- Name: SEQUENCE derived_from_source_derived_from_source_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn.derived_from_source_derived_from_source_id_seq TO postgres;


--
-- Name: TABLE domain; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.domain TO postgres;


--
-- Name: SEQUENCE domain_domain_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.domain_domain_id_seq TO postgres;


--
-- Name: TABLE domain_match; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.domain_match TO postgres;


--
-- Name: SEQUENCE domain_match_domain_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.domain_match_domain_match_id_seq TO postgres;


--
-- Name: TABLE enzyme_restriction_sites; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.enzyme_restriction_sites TO postgres;


--
-- Name: TABLE enzymes; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.enzymes TO postgres;


--
-- Name: SEQUENCE enzymes_enzyme_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.enzymes_enzyme_id_seq TO postgres;


--
-- Name: TABLE est; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.est TO postgres;


--
-- Name: TABLE est_dbxref; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.est_dbxref TO postgres;


--
-- Name: TABLE ests_mapped_by_clone; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.ests_mapped_by_clone TO postgres;


--
-- Name: SEQUENCE ests_mapped_by_clone_embc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.ests_mapped_by_clone_embc_id_seq TO postgres;


--
-- Name: TABLE experiment_type; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.experiment_type TO postgres;


--
-- Name: SEQUENCE experiment_type_experiment_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.experiment_type_experiment_type_id_seq TO postgres;


--
-- Name: TABLE facility; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.facility TO postgres;


--
-- Name: SEQUENCE facility_facility_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.facility_facility_id_seq TO postgres;


--
-- Name: SEQUENCE family_build_family_build_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.family_build_family_build_id_seq TO postgres;


--
-- Name: SEQUENCE family_family_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.family_family_id_seq TO postgres;


--
-- Name: SEQUENCE family_member_family_member_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.family_member_family_member_id_seq TO postgres;


--
-- Name: TABLE family_tree; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.family_tree TO postgres;


--
-- Name: TABLE fish_chromatin_density_constants; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_chromatin_density_constants TO postgres;


--
-- Name: TABLE fish_experimenter; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_experimenter TO postgres;


--
-- Name: SEQUENCE fish_experimenter_fish_experimenter_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.fish_experimenter_fish_experimenter_id_seq TO postgres;


--
-- Name: TABLE fish_file; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_file TO postgres;


--
-- Name: SEQUENCE fish_file_fish_file_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.fish_file_fish_file_id_seq TO postgres;


--
-- Name: TABLE fish_image; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_image TO postgres;


--
-- Name: TABLE fish_karyotype_constants; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_karyotype_constants TO postgres;


--
-- Name: TABLE fish_karyotype_constants_old; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_karyotype_constants_old TO postgres;


--
-- Name: TABLE fish_result; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_result TO postgres;


--
-- Name: TABLE fish_result_composite; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_result_composite TO postgres;


--
-- Name: SEQUENCE fish_result_fish_result_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.fish_result_fish_result_id_seq TO postgres;


--
-- Name: TABLE fish_result_image; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.fish_result_image TO postgres;


--
-- Name: SEQUENCE fish_result_image_fish_result_image_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON SEQUENCE sgn.fish_result_image_fish_result_image_id_seq TO postgres;


--
-- Name: TABLE go; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.go TO postgres;


--
-- Name: SEQUENCE go_go_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.go_go_id_seq TO postgres;


--
-- Name: TABLE group_linkage; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.group_linkage TO postgres;


--
-- Name: SEQUENCE group_linkage_group_linkage_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.group_linkage_group_linkage_id_seq TO postgres;


--
-- Name: TABLE groups; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.groups TO postgres;


--
-- Name: SEQUENCE groups_group_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.groups_group_id_seq TO postgres;


--
-- Name: TABLE id_linkage; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.id_linkage TO postgres;


--
-- Name: SEQUENCE id_linkage_id_linkage_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.id_linkage_id_linkage_id_seq TO postgres;


--
-- Name: TABLE il_info; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.il_info TO postgres;


--
-- Name: TABLE interpro; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.interpro TO postgres;


--
-- Name: TABLE interpro_go; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.interpro_go TO postgres;


--
-- Name: SEQUENCE interpro_go_interpro_go_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.interpro_go_interpro_go_id_seq TO postgres;


--
-- Name: SEQUENCE interpro_interpro_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.interpro_interpro_id_seq TO postgres;


--
-- Name: TABLE library; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn.library TO postgres;


--
-- Name: SEQUENCE library_library_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.library_library_id_seq TO postgres;


--
-- Name: TABLE linkage_group; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.linkage_group TO postgres;


--
-- Name: SEQUENCE linkage_group_lg_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.linkage_group_lg_id_seq TO postgres;


--
-- Name: TABLE loc_types; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.loc_types TO postgres;


--
-- Name: SEQUENCE loc_types_loc_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.loc_types_loc_type_id_seq TO postgres;


--
-- Name: TABLE manual_annotations; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.manual_annotations TO postgres;


--
-- Name: SEQUENCE manual_annotations_manual_annotations_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.manual_annotations_manual_annotations_id_seq TO postgres;


--
-- Name: TABLE manual_censor_reasons; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.manual_censor_reasons TO postgres;


--
-- Name: SEQUENCE manual_censor_reasons_censor_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.manual_censor_reasons_censor_id_seq TO postgres;


--
-- Name: TABLE map; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.map TO postgres;


--
-- Name: SEQUENCE map_map_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.map_map_id_seq TO postgres;


--
-- Name: TABLE map_version; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.map_version TO postgres;


--
-- Name: SEQUENCE map_version_map_version_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.map_version_map_version_id_seq TO postgres;


--
-- Name: TABLE marker; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.marker TO postgres;


--
-- Name: TABLE marker_alias; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.marker_alias TO postgres;


--
-- Name: SEQUENCE marker_alias_alias_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_alias_alias_id_seq TO postgres;


--
-- Name: TABLE marker_collectible; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.marker_collectible TO postgres;


--
-- Name: SEQUENCE marker_collectible_marker_collectible_dummy_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_collectible_marker_collectible_dummy_id_seq TO postgres;


--
-- Name: TABLE marker_collection; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.marker_collection TO postgres;


--
-- Name: SEQUENCE marker_collection_mc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_collection_mc_id_seq TO postgres;


--
-- Name: TABLE marker_confidence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.marker_confidence TO postgres;


--
-- Name: SEQUENCE marker_confidence_confidence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_confidence_confidence_id_seq TO postgres;


--
-- Name: TABLE marker_derived_from; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.marker_derived_from TO postgres;


--
-- Name: SEQUENCE marker_derived_from_marker_derived_dummy_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn.marker_derived_from_marker_derived_dummy_id_seq TO postgres;


--
-- Name: TABLE marker_experiment; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.marker_experiment TO postgres;


--
-- Name: SEQUENCE marker_experiment_marker_experiment_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_experiment_marker_experiment_id_seq TO postgres;


--
-- Name: TABLE marker_location; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn.marker_location TO postgres;


--
-- Name: SEQUENCE marker_location_location_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_location_location_id_seq TO postgres;


--
-- Name: SEQUENCE marker_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.marker_marker_id_seq TO postgres;


--
-- Name: TABLE marker_to_map; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.marker_to_map TO postgres;


--
-- Name: TABLE metadata; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.metadata TO postgres;


--
-- Name: SEQUENCE metadata_metadata_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.metadata_metadata_id_seq TO postgres;


--
-- Name: TABLE microarray; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.microarray TO postgres;


--
-- Name: SEQUENCE microarray_microarray_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.microarray_microarray_id_seq TO postgres;


--
-- Name: TABLE misc; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.misc TO postgres;


--
-- Name: SEQUENCE misc_misc_unique_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.misc_misc_unique_id_seq TO postgres;


--
-- Name: TABLE organism; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn.organism TO postgres;


--
-- Name: SEQUENCE organism_organism_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.organism_organism_id_seq TO postgres;


--
-- Name: TABLE organismgroup; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.organismgroup TO postgres;


--
-- Name: TABLE organismgroup_member; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.organismgroup_member TO postgres;


--
-- Name: TABLE p_markers; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.p_markers TO postgres;


--
-- Name: SEQUENCE p_markers_pid_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.p_markers_pid_seq TO postgres;


--
-- Name: TABLE pcr_exp_accession; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.pcr_exp_accession TO postgres;


--
-- Name: SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.pcr_exp_accession_pcr_exp_accession_id_seq TO postgres;


--
-- Name: TABLE pcr_experiment; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.pcr_experiment TO postgres;


--
-- Name: SEQUENCE pcr_experiment_pcr_experiment_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.pcr_experiment_pcr_experiment_id_seq TO postgres;


--
-- Name: TABLE pcr_experiment_sequence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.pcr_experiment_sequence TO postgres;


--
-- Name: SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON SEQUENCE sgn.pcr_experiment_sequence_pcr_experiment_sequence_id_seq TO postgres;


--
-- Name: TABLE pcr_product; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.pcr_product TO postgres;


--
-- Name: SEQUENCE pcr_product_pcr_product_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.pcr_product_pcr_product_id_seq TO postgres;


--
-- Name: TABLE primer_unigene_match; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.primer_unigene_match TO postgres;


--
-- Name: SEQUENCE primer_unigene_match_primer_unigene_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.primer_unigene_match_primer_unigene_match_id_seq TO postgres;


--
-- Name: TABLE qc_report; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.qc_report TO postgres;


--
-- Name: SEQUENCE qc_report_qc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.qc_report_qc_id_seq TO postgres;


--
-- Name: TABLE rflp_markers; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.rflp_markers TO postgres;


--
-- Name: SEQUENCE rflp_markers_rflp_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.rflp_markers_rflp_id_seq TO postgres;


--
-- Name: TABLE rflp_sequences; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.rflp_sequences TO postgres;


--
-- Name: SEQUENCE rflp_sequences_seq_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.rflp_sequences_seq_id_seq TO postgres;


--
-- Name: TABLE rflp_unigene_associations; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.rflp_unigene_associations TO postgres;


--
-- Name: SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.rflp_unigene_associations_rflp_unigene_assoc_id_seq TO postgres;


--
-- Name: TABLE seqread; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.seqread TO postgres;


--
-- Name: SEQUENCE seqread_read_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.seqread_read_id_seq TO postgres;


--
-- Name: TABLE sequence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.sequence TO postgres;


--
-- Name: SEQUENCE sequence_sequence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.sequence_sequence_id_seq TO postgres;


--
-- Name: TABLE snp; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.snp TO postgres;


--
-- Name: TABLE snp_file; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.snp_file TO postgres;


--
-- Name: SEQUENCE snp_file_snp_file_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON SEQUENCE sgn.snp_file_snp_file_id_seq TO postgres;


--
-- Name: SEQUENCE snp_snp_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON SEQUENCE sgn.snp_snp_id_seq TO postgres;


--
-- Name: TABLE snpprop; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.snpprop TO postgres;


--
-- Name: SEQUENCE snpprop_snpprop_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON SEQUENCE sgn.snpprop_snpprop_id_seq TO postgres;


--
-- Name: TABLE ssr; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.ssr TO postgres;


--
-- Name: TABLE ssr_primer_unigene_matches; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.ssr_primer_unigene_matches TO postgres;


--
-- Name: SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq TO postgres;


--
-- Name: TABLE ssr_repeats; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.ssr_repeats TO postgres;


--
-- Name: SEQUENCE ssr_repeats_repeat_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.ssr_repeats_repeat_id_seq TO postgres;


--
-- Name: SEQUENCE ssr_ssr_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.ssr_ssr_id_seq TO postgres;


--
-- Name: TABLE submit_user; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.submit_user TO postgres;


--
-- Name: SEQUENCE submit_user_submit_user_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.submit_user_submit_user_id_seq TO postgres;


--
-- Name: TABLE taxonomy; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON TABLE sgn.taxonomy TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE sgn.taxonomy TO postgres;


--
-- Name: SEQUENCE taxonomy_tax_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn.taxonomy_tax_id_seq TO postgres;


--
-- Name: TABLE temp_caps_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.temp_caps_correspondence TO postgres;


--
-- Name: SEQUENCE temp_caps_correspondence_tcc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.temp_caps_correspondence_tcc_id_seq TO postgres;


--
-- Name: TABLE temp_map_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.temp_map_correspondence TO postgres;


--
-- Name: SEQUENCE temp_map_correspondence_tmc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.temp_map_correspondence_tmc_id_seq TO postgres;


--
-- Name: TABLE temp_marker_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.temp_marker_correspondence TO postgres;


--
-- Name: SEQUENCE temp_marker_correspondence_tmc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.temp_marker_correspondence_tmc_id_seq TO postgres;


--
-- Name: TABLE tigrtc_index; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.tigrtc_index TO postgres;


--
-- Name: SEQUENCE tigrtc_index_tcindex_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.tigrtc_index_tcindex_id_seq TO postgres;


--
-- Name: TABLE tigrtc_membership; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.tigrtc_membership TO postgres;


--
-- Name: SEQUENCE tigrtc_membership_tigrtc_membership_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.tigrtc_membership_tigrtc_membership_id_seq TO postgres;


--
-- Name: TABLE tigrtc_tracking; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.tigrtc_tracking TO postgres;


--
-- Name: SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.tigrtc_tracking_tigrtc_tracking_id_seq TO postgres;


--
-- Name: TABLE tm_markers; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.tm_markers TO postgres;


--
-- Name: TABLE tm_markers_sequences; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.tm_markers_sequences TO postgres;


--
-- Name: SEQUENCE tm_markers_tm_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.tm_markers_tm_id_seq TO postgres;


--
-- Name: TABLE trim_feature; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.trim_feature TO postgres;


--
-- Name: SEQUENCE trim_feature_feature_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.trim_feature_feature_id_seq TO postgres;


--
-- Name: TABLE trim_feature_types; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.trim_feature_types TO postgres;


--
-- Name: SEQUENCE trim_feature_types_trim_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.trim_feature_types_trim_type_id_seq TO postgres;


--
-- Name: TABLE types; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.types TO postgres;


--
-- Name: SEQUENCE types_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.types_type_id_seq TO postgres;


--
-- Name: TABLE unigene; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.unigene TO postgres;


--
-- Name: TABLE unigene_build; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.unigene_build TO postgres;


--
-- Name: SEQUENCE unigene_build_unigene_build_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.unigene_build_unigene_build_id_seq TO postgres;


--
-- Name: TABLE unigene_consensi; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.unigene_consensi TO postgres;


--
-- Name: SEQUENCE unigene_consensi_consensi_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.unigene_consensi_consensi_id_seq TO postgres;


--
-- Name: TABLE unigene_member; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT SELECT ON TABLE sgn.unigene_member TO postgres;


--
-- Name: SEQUENCE unigene_member_unigene_member_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.unigene_member_unigene_member_id_seq TO postgres;


--
-- Name: SEQUENCE unigene_unigene_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn.unigene_unigene_id_seq TO postgres;


--
-- Name: TABLE bac_status; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.bac_status TO postgres;


--
-- Name: SEQUENCE bac_status_bac_status_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.bac_status_bac_status_id_seq TO postgres;


--
-- Name: TABLE bac_status_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.bac_status_log TO postgres;


--
-- Name: SEQUENCE bac_status_log_bac_status_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.bac_status_log_bac_status_log_id_seq TO postgres;


--
-- Name: TABLE clone_il_mapping_bin_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.clone_il_mapping_bin_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE sgn_people.clone_il_mapping_bin_log TO postgres;


--
-- Name: SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq TO postgres;


--
-- Name: TABLE clone_validation_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.clone_validation_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE sgn_people.clone_validation_log TO postgres;


--
-- Name: SEQUENCE clone_validation_log_clone_validation_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.clone_validation_log_clone_validation_log_id_seq TO postgres;


--
-- Name: TABLE clone_verification_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.clone_verification_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE sgn_people.clone_verification_log TO postgres;


--
-- Name: SEQUENCE clone_verification_log_clone_verification_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.clone_verification_log_clone_verification_log_id_seq TO postgres;


--
-- Name: TABLE forum_post; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.forum_post TO postgres;


--
-- Name: SEQUENCE forum_post_forum_post_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.forum_post_forum_post_id_seq TO postgres;


--
-- Name: TABLE forum_topic; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.forum_topic TO postgres;


--
-- Name: SEQUENCE forum_topic_forum_topic_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.forum_topic_forum_topic_id_seq TO postgres;


--
-- Name: TABLE list; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.list TO postgres;


--
-- Name: TABLE list_item; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.list_item TO postgres;


--
-- Name: SEQUENCE list_item_list_item_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.list_item_list_item_id_seq TO postgres;


--
-- Name: SEQUENCE list_list_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.list_list_id_seq TO postgres;


--
-- Name: TABLE sp_clone_il_mapping_segment_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT INSERT,UPDATE ON TABLE sgn_people.sp_clone_il_mapping_segment_log TO postgres;
GRANT SELECT ON TABLE sgn_people.sp_clone_il_mapping_segment_log TO PUBLIC;


--
-- Name: SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq TO postgres;


--
-- Name: TABLE sp_dataset; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_dataset TO postgres;


--
-- Name: SEQUENCE sp_dataset_sp_dataset_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT USAGE ON SEQUENCE sgn_people.sp_dataset_sp_dataset_id_seq TO postgres;


--
-- Name: TABLE sp_group; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.sp_group TO postgres;


--
-- Name: TABLE sp_group_member; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.sp_group_member TO postgres;


--
-- Name: TABLE sp_login_old; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_login_old TO postgres;


--
-- Name: SEQUENCE sp_login_old_sp_login_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_login_old_sp_login_id_seq TO postgres;


--
-- Name: TABLE sp_organisms; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_organisms TO postgres;


--
-- Name: SEQUENCE sp_organisms_organism_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_organisms_organism_id_seq TO postgres;


--
-- Name: TABLE sp_organization; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_organization TO postgres;


--
-- Name: TABLE sp_organization_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_organization_person TO postgres;


--
-- Name: SEQUENCE sp_organization_person_sp_organization_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_organization_person_sp_organization_person_id_seq TO postgres;


--
-- Name: SEQUENCE sp_organization_sp_organization_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_organization_sp_organization_id_seq TO postgres;


--
-- Name: TABLE sp_papers; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_papers TO postgres;


--
-- Name: SEQUENCE sp_papers_sp_paper_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_papers_sp_paper_id_seq TO postgres;


--
-- Name: TABLE sp_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_person TO postgres;


--
-- Name: TABLE sp_person_organisms; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_person_organisms TO postgres;


--
-- Name: SEQUENCE sp_person_organisms_sp_person_organisms_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_person_organisms_sp_person_organisms_id_seq TO postgres;


--
-- Name: TABLE sp_person_roles; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_person_roles TO postgres;


--
-- Name: SEQUENCE sp_person_roles_sp_person_role_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_person_roles_sp_person_role_id_seq TO postgres;


--
-- Name: SEQUENCE sp_person_sp_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_person_sp_person_id_seq TO postgres;


--
-- Name: TABLE sp_project; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_project TO postgres;


--
-- Name: TABLE sp_project_il_mapping_clone_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT ON TABLE sgn_people.sp_project_il_mapping_clone_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE sgn_people.sp_project_il_mapping_clone_log TO postgres;


--
-- Name: SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq TO postgres;


--
-- Name: TABLE sp_project_organization; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_project_organization TO postgres;


--
-- Name: SEQUENCE sp_project_organization_sp_project_organization_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_project_organization_sp_project_organization_id_seq TO postgres;


--
-- Name: TABLE sp_project_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_project_person TO postgres;


--
-- Name: SEQUENCE sp_project_person_sp_project_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_project_person_sp_project_person_id_seq TO postgres;


--
-- Name: SEQUENCE sp_project_sp_project_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_project_sp_project_id_seq TO postgres;


--
-- Name: TABLE sp_roles; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sgn_people.sp_roles TO postgres;


--
-- Name: SEQUENCE sp_roles_sp_role_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_people.sp_roles_sp_role_id_seq TO postgres;


--
-- Name: TABLE user_map; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_people.user_map TO postgres;


--
-- Name: TABLE user_map_data; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_people.user_map_data TO postgres;


--
-- Name: SEQUENCE user_map_data_user_map_data_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.user_map_data_user_map_data_id_seq TO postgres;


--
-- Name: SEQUENCE user_map_user_map_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

GRANT SELECT,UPDATE ON SEQUENCE sgn_people.user_map_user_map_id_seq TO postgres;


--
-- Name: TABLE facility; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_submit.facility TO postgres;


--
-- Name: SEQUENCE facility_facility_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_submit.facility_facility_id_seq TO postgres;


--
-- Name: TABLE library; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_submit.library TO postgres;


--
-- Name: SEQUENCE library_library_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_submit.library_library_id_seq TO postgres;


--
-- Name: TABLE seqread; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_submit.seqread TO postgres;


--
-- Name: SEQUENCE seqread_submit_read_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_submit.seqread_submit_read_id_seq TO postgres;


--
-- Name: TABLE submit_user; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT SELECT,INSERT,UPDATE ON TABLE sgn_submit.submit_user TO postgres;


--
-- Name: SEQUENCE submit_user_submit_user_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

GRANT ALL ON SEQUENCE sgn_submit.submit_user_submit_user_id_seq TO postgres;


--
-- Name: TABLE fattribute; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fattribute TO postgres;


--
-- Name: TABLE fattribute_to_feature; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fattribute_to_feature TO postgres;


--
-- Name: TABLE fdata; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fdata TO postgres;


--
-- Name: TABLE fdna; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fdna TO postgres;


--
-- Name: TABLE fgroup; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fgroup TO postgres;


--
-- Name: TABLE fmeta; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.fmeta TO postgres;


--
-- Name: TABLE ftype; Type: ACL; Schema: tomato_gff; Owner: postgres
--

GRANT SELECT ON TABLE tomato_gff.ftype TO postgres;


--
-- Name: accessions; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessions;


--
-- Name: materialized_phenoview; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.materialized_phenoview;


--
-- Name: accessionsxbreeding_programs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxbreeding_programs;


--
-- Name: materialized_genoview; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.materialized_genoview;


--
-- Name: accessionsxgenotyping_protocols; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxgenotyping_protocols;


--
-- Name: accessionsxlocations; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxlocations;


--
-- Name: accessionsxplants; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxplants;


--
-- Name: accessionsxplots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxplots;


--
-- Name: accessionsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxseedlots;


--
-- Name: accessionsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxtrait_components;


--
-- Name: accessionsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxtraits;


--
-- Name: accessionsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxtrial_designs;


--
-- Name: accessionsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxtrial_types;


--
-- Name: accessionsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxtrials;


--
-- Name: accessionsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.accessionsxyears;


--
-- Name: breeding_programs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programs;


--
-- Name: breeding_programsxgenotyping_protocols; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxgenotyping_protocols;


--
-- Name: breeding_programsxlocations; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxlocations;


--
-- Name: breeding_programsxplants; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxplants;


--
-- Name: breeding_programsxplots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxplots;


--
-- Name: breeding_programsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxseedlots;


--
-- Name: breeding_programsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxtrait_components;


--
-- Name: breeding_programsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxtraits;


--
-- Name: breeding_programsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxtrial_designs;


--
-- Name: breeding_programsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxtrial_types;


--
-- Name: breeding_programsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxtrials;


--
-- Name: breeding_programsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.breeding_programsxyears;


--
-- Name: genotyping_protocols; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocols;


--
-- Name: genotyping_protocolsxlocations; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxlocations;


--
-- Name: genotyping_protocolsxplants; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxplants;


--
-- Name: genotyping_protocolsxplots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxplots;


--
-- Name: genotyping_protocolsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxseedlots;


--
-- Name: genotyping_protocolsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxtrait_components;


--
-- Name: genotyping_protocolsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxtraits;


--
-- Name: genotyping_protocolsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxtrial_designs;


--
-- Name: genotyping_protocolsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxtrial_types;


--
-- Name: genotyping_protocolsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxtrials;


--
-- Name: genotyping_protocolsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.genotyping_protocolsxyears;


--
-- Name: locations; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locations;


--
-- Name: locationsxplants; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxplants;


--
-- Name: locationsxplots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxplots;


--
-- Name: locationsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxseedlots;


--
-- Name: locationsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxtrait_components;


--
-- Name: locationsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxtraits;


--
-- Name: locationsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxtrial_designs;


--
-- Name: locationsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxtrial_types;


--
-- Name: locationsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxtrials;


--
-- Name: locationsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.locationsxyears;


--
-- Name: materialized_phenotype_jsonb_table; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.materialized_phenotype_jsonb_table;


--
-- Name: materialized_stockprop; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.materialized_stockprop;


--
-- Name: plants; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plants;


--
-- Name: plantsxplots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxplots;


--
-- Name: plantsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxseedlots;


--
-- Name: plantsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxtrait_components;


--
-- Name: plantsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxtraits;


--
-- Name: plantsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxtrial_designs;


--
-- Name: plantsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxtrial_types;


--
-- Name: plantsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxtrials;


--
-- Name: plantsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plantsxyears;


--
-- Name: plots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plots;


--
-- Name: plotsxseedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxseedlots;


--
-- Name: plotsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxtrait_components;


--
-- Name: plotsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxtraits;


--
-- Name: plotsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxtrial_designs;


--
-- Name: plotsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxtrial_types;


--
-- Name: plotsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxtrials;


--
-- Name: plotsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.plotsxyears;


--
-- Name: seedlots; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlots;


--
-- Name: seedlotsxtrait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxtrait_components;


--
-- Name: seedlotsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxtraits;


--
-- Name: seedlotsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxtrial_designs;


--
-- Name: seedlotsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxtrial_types;


--
-- Name: seedlotsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxtrials;


--
-- Name: seedlotsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.seedlotsxyears;


--
-- Name: trait_components; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_components;


--
-- Name: traits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.traits;


--
-- Name: trait_componentsxtraits; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_componentsxtraits;


--
-- Name: trait_componentsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_componentsxtrial_designs;


--
-- Name: trait_componentsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_componentsxtrial_types;


--
-- Name: trait_componentsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_componentsxtrials;


--
-- Name: trait_componentsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trait_componentsxyears;


--
-- Name: traitsxtrial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.traitsxtrial_designs;


--
-- Name: traitsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.traitsxtrial_types;


--
-- Name: traitsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.traitsxtrials;


--
-- Name: traitsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.traitsxyears;


--
-- Name: trial_designs; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_designs;


--
-- Name: trial_designsxtrial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_designsxtrial_types;


--
-- Name: trial_designsxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_designsxtrials;


--
-- Name: trial_designsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_designsxyears;


--
-- Name: trial_types; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_types;


--
-- Name: trial_typesxtrials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_typesxtrials;


--
-- Name: trial_typesxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trial_typesxyears;


--
-- Name: trials; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trials;


--
-- Name: trialsxyears; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.trialsxyears;


--
-- Name: years; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.years;